{
  "filename": "dfget.md",
  "__html": "<h1>dfget</h1>\n<p>dfget is the client of Seata. You can use the dfget command in the command line tool.</p>\n<h2>Name</h2>\n<p>dfget - the client of Seata, a non-interactive P2P downloader.</p>\n<h2>Synopsis</h2>\n<p><code>dfget -u [URL] [options]...</code></p>\n<h2>Options</h2>\n<pre><code>  -h, --help            show this help message and exit\n  --url URL, -u URL     will download a file from this url\n  --output OUTPUT, -O OUTPUT, -o OUTPUT\n                        output path that not only contains the dir part but\n                        also name part\n  --md5 MD5, -m MD5     expected file md5\n  --callsystem CALLSYSTEM\n                        system name that executes dfget,its format is\n                        company_department_appName\n  --notbs               not back source when p2p fail\n  --locallimit LOCALLIMIT, -s LOCALLIMIT\n                        rate limit about a single download task,its format is\n                        20M/m/K/k\n  --totallimit TOTALLIMIT\n                        rate limit about the whole host,its format is\n                        20M/m/K/k\n  --identifier IDENTIFIER, -i IDENTIFIER\n                        identify download task,it is available merely when md5\n                        param not exist\n  --timeout TIMEOUT, --exceed TIMEOUT, -e TIMEOUT\n                        download timeout(second)\n  --filter FILTER, -f FILTER\n                        filter some query params of url ,e.g. -f 'key&amp;sign'\n                        will filter key and sign query param.in this\n                        way,different urls correspond one same download task\n                        that can use p2p mode\n  --showbar, -b         show progress bar\n  --pattern {p2p,cdn}, -p {p2p,cdn}\n                        download pattern,cdn pattern not support totallimit\n  --version, -v         version\n  --node NODE, -n NODE  specify nodes\n  --console             show log on console\n  --header HEADER       http header, e.g. --header=&quot;Accept: *&quot; --header=&quot;Host:\n                        abc&quot;\n  --dfdaemon            caller is from df-daemon\n</code></pre>\n<h2>Files</h2>\n<h3>/etc/dragonfly.conf</h3>\n<p>This is the default configuration file for dfget, which specifies the address of the SuperNode.</p>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[node]</span>\n<span class=\"hljs-attr\">address</span>=<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>,<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.2</span>\n</code></pre>\n<h3>${HOME}/.small-dragonfly</h3>\n<p>This directory is created by dfget when you start it for the first time.</p>\n<pre><code class=\"language-text\">.small-dragonfly/\n├── data/               # stores temporary data downloaded by dfget\n├── dfdaemon/\n│   └── data/           # default, stores temporary data generated by dfdaemon\n├── logs/\n│   ├── dfclient.log    # dfget's log file\n│   ├── dfserver.log    # log file of peer server launched by dfget\n│   └── dfdaemon.log    # dfdaemon's log file\n└── meta/\n    └── host.meta       # stores meta information: peer server port\n</code></pre>\n",
  "link": "/en-us/docs/cli_ref/dfget.html",
  "meta": {}
}