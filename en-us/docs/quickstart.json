{
  "filename": "quickstart.md",
  "__html": "<h1>Seata Quick Start</h1>\n<p>In this quick start guide, you will get a feeling of Seata by starting a <a href=\"overview/terminology.md\">SuperNode</a> (the server) in your Docker container, installing the Seata client (the client), and then downloading a container image and a general file, which are likely what you'll be doing frequently in your use case.</p>\n<h2>Prerequisites</h2>\n<p>You have started your Docker container.</p>\n<h2>Step 1: Starting a SuperNode (the Server) in Your Docker Container</h2>\n<ol>\n<li>\n<p>Pull the docker image we provided.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Replace ${imageName} with the real image name</span>\ndocker pull <span class=\"hljs-variable\">${imageName}</span>\n</code></pre>\n<p><strong>Note:</strong> Choose one of the images we provide according to your geo-location, and replace <code>${imageName}</code> with it:</p>\n<ul>\n<li>China: <code>registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0</code></li>\n<li>US: <code>registry.us-west-1.aliyuncs.com/alidragonfly/supernode:0.2.0</code></li>\n</ul>\n</li>\n<li>\n<p>Start a SuperNode.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Replace ${imageName} with the real image name</span>\ndocker run -d -p 8001:8001 -p 8002:8002 <span class=\"hljs-variable\">${imageName}</span>\n</code></pre>\n</li>\n</ol>\n<p>For example, if you're in China, run the following commands:</p>\n<pre><code class=\"language-bash\">docker pull registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\n\ndocker run -d -p 8001:8001 -p 8002:8002 registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\n</code></pre>\n<h2>Step 2: Installing Seata Client</h2>\n<p>You have two options of installing Seata client: installing from source code, or installing by pulling the image.</p>\n<h3>Option 1: Installing from Source Code</h3>\n<ol>\n<li>\n<p>Download a package of the client.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>\n<span class=\"hljs-comment\"># Replace ${package} with a package appropriate for your operating system and location</span>\nwget <span class=\"hljs-variable\">${package}</span>\n</code></pre>\n<p><strong>Note:</strong> Choose one of the packages we provide according to your geo-location, and replace <code>${package}</code> with it:</p>\n<ul>\n<li>\n<p>If you're in China:</p>\n<ul>\n<li>\n<p><a href=\"http://dragonfly-os.oss-cn-beijing.aliyuncs.com/df-client_0.2.0_linux_amd64.tar.gz\">Linux 64-bit</a>: <code>http://dragonfly-os.oss-cn-beijing.aliyuncs.com/df-client_0.2.0_linux_amd64.tar.gz</code></p>\n</li>\n<li>\n<p><a href=\"http://dragonfly-os.oss-cn-beijing.aliyuncs.com/df-client_0.2.0_darwin_amd64.tar.gz\">MacOS 64-bit</a>: <code>http://dragonfly-os.oss-cn-beijing.aliyuncs.com/df-client_0.2.0_darwin_amd64.tar.gz</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>If you're not in China:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/dragonflyoss/Seata/releases/download/v0.2.0/df-client_0.2.0_linux_amd64.tar.gz\">Linux 64-bit</a>: <code>https://github.com/dragonflyoss/Seata/releases/download/v0.2.0/df-client_0.2.0_linux_amd64.tar.gz</code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/dragonflyoss/Seata/releases/download/v0.2.0/df-client_0.2.0_darwin_amd64.tar.gz\">MacOS 64-bit</a>: <code>https://github.com/dragonflyoss/Seata/releases/download/v0.2.0/df-client_0.2.0_darwin_amd64.tar.gz</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Unzip the package.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Replace ${package} with a package appropriate for your operating system and location</span>\ntar -zxf <span class=\"hljs-variable\">${package}</span>\n</code></pre>\n</li>\n<li>\n<p>Add the directory of <code>df-client</code> to your <code>PATH</code> environment variable to make sure you can directly use <code>dfget</code> and <code>dfdaemon</code> command.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Execute or add this line to ~/.bashrc</span>\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:<span class=\"hljs-variable\">$HOME</span>/df-client/\n</code></pre>\n</li>\n</ol>\n<p>For example, if you're in China and using Linux, run the following commands:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>\nwget http://dragonfly-os.oss-cn-beijing.aliyuncs.com/df-client_0.2.0_linux_amd64.tar.gz\ntar -zxf df-client_0.2.0_linux_amd64.tar.gz\n<span class=\"hljs-comment\"># execute or add this line to ~/.bashrc</span>\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:<span class=\"hljs-variable\">$HOME</span>/df-client/\n</code></pre>\n<h3>Option 2: Installing by Pulling the Image</h3>\n<ol>\n<li>\n<p>Pull the docker image we provided.</p>\n<pre><code class=\"language-bash\">docker pull dragonflyoss/dfclient:v0.3.0_dev\n</code></pre>\n</li>\n<li>\n<p>Start dfdaemon.</p>\n<pre><code class=\"language-bash\">docker run -d -p 65001:65001 dragonflyoss/dfclient:v0.3.0_dev --registry https://xxx.xx.x\n</code></pre>\n</li>\n<li>\n<p>Configure the Daemon Mirror.</p>\n<p>a. Modify the configuration file <code>/etc/docker/daemon.json</code>.</p>\n<pre><code class=\"language-sh\">vi /etc/docker/daemon.json\n</code></pre>\n<p><strong>Tip:</strong> For more information on <code>/etc/docker/daemon.json</code>, see <a href=\"https://docs.docker.com/registry/recipes/mirror/#configure-the-cache\">Docker documentation</a>.</p>\n<p>b. Add or update the configuration item <code>registry-mirrors</code> in the configuration file.</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"http://127.0.0.1:65001\"</span>]\n</code></pre>\n<p>c. Restart Docker daemon.</p>\n<pre><code class=\"language-bash\">systemctl restart docker\n</code></pre>\n</li>\n</ol>\n<h2>Step 3: Downloading Images or Files</h2>\n<p>Now that you have started your SuperNode, and installed Seata client, you can start downloading images or general files, both of which are supported by Seata, but with slightly different downloading methods.</p>\n<h3>Use Case 1: Downloading a General File with Seata</h3>\n<p>Once you have installed the Seata client, you can use the <code>dfget</code> command to download a file.</p>\n<pre><code class=\"language-bash\">dfget -u <span class=\"hljs-string\">'https://github.com/dragonflyoss/Seata/blob/master/docs/images/logo.png'</span> -o /tmp/logo.png\n</code></pre>\n<p><strong>Tip:</strong> For more information on the dfget command, see <a href=\"cli_ref/dfget.md\">dfget</a>.</p>\n<h3>Use Case 2: Pulling an Image with Seata</h3>\n<ol>\n<li>\n<p>Start <code>dfdaemon</code> with a specified registry, such as <code>https://index.docker.io</code>.</p>\n<pre><code class=\"language-bash\">nohup dfdaemon --registry https://index.docker.io &gt; /dev/null 2&gt;&amp;1 &amp;\n</code></pre>\n</li>\n<li>\n<p>Add the following line to the dockerd configuration file <a href=\"https://docs.docker.com/registry/recipes/mirror/#configure-the-docker-daemon\">/etc/docker/daemon.json</a>.</p>\n<pre><code class=\"language-json\">\"registry-mirrors\": [\"http://127.0.0.1:65001\"]\n</code></pre>\n</li>\n<li>\n<p>Restart dockerd.</p>\n<pre><code class=\"language-bash\">systemctl restart docker\n</code></pre>\n</li>\n<li>\n<p>Download an image with Seata.</p>\n<pre><code class=\"language-bash\">docker pull nginx:latest\n</code></pre>\n</li>\n</ol>\n<h2>Related Topics</h2>\n<ul>\n<li><a href=\"userguide/install_server.md\">Installing Server</a></li>\n<li><a href=\"userguide/install_client.md\">Installing Client</a></li>\n<li><a href=\"userguide/download_files.md\">Downloading Files</a></li>\n<li><a href=\"userguide/supernode_configuration.md\">SuperNode Configuration</a></li>\n<li><a href=\"cli_ref/dfget.md\">Dfget</a></li>\n</ul>\n",
  "link": "/en-us/docs/quickstart.html",
  "meta": {}
}