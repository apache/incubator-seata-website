{
  "filename": "api.md",
  "__html": "<h1>1. Overview</h1>\n<p>Seata API is devided into 2 categories: High-Level API and Low-Level API</p>\n<ul>\n<li><strong>High-Level API</strong> : Used for defining and controlling transaction boundary, and querying transaction status.</li>\n<li><strong>Low-Level API</strong> : Used for controlling the propagation of transaction context.</li>\n</ul>\n<h1>2. High-Level API</h1>\n<h2>2.1 GlobalTransaction</h2>\n<p>GlobalTransaction class contains methods about begin transaction, commit transaction, rollback transaction and get status of transaction and so on.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GlobalTransaction</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * Begin a global transaction(Use default transaction name and timeout)\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Begin a global transaction, and point out the timeout(use default transaction name)\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> timeout)</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Begin a global transaction, and point out the transaction name and timeout.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> timeout, String name)</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Commit globally\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Rollback globally\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Get the status of transaction\n     */</span>\n    <span class=\"hljs-function\">GlobalStatus <span class=\"hljs-title\">getStatus</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> TransactionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Get the XID of transaction\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">getXid</span><span class=\"hljs-params\">()</span></span>;\n\n}\n</code></pre>\n<h2>2.2 GlobalTransactionContext</h2>\n<p>GlobalTransaction instance can be retrieved from GlobalTransactionContext:</p>\n<pre><code class=\"language-java\">\n    <span class=\"hljs-comment\">/**\n     * Retrieve current global transaction instance, if it doesn't exist, create a new one.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> GlobalTransaction <span class=\"hljs-title\">getCurrentOrCreate</span><span class=\"hljs-params\">()</span> </span>{\n        GlobalTransaction tx = getCurrent();\n        <span class=\"hljs-keyword\">if</span> (tx == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> createNew();\n        }\n        <span class=\"hljs-keyword\">return</span> tx;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Reload the global transaction identified by XID, the instance aren't allowed to begin transaction.\n     * This API is usually used for centralized handling of failed transaction later.\n     * For example, if it's time out to commit globally, the subsequent centralized processing steps are like this: reload the instance, from which retrieve the status, then recommit the transaction globally or not depends on the status value.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> GlobalTransaction <span class=\"hljs-title\">reload</span><span class=\"hljs-params\">(String xid)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n        GlobalTransaction tx = <span class=\"hljs-keyword\">new</span> DefaultGlobalTransaction(xid, GlobalStatus.UnKnown, GlobalTransactionRole.Launcher) {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> timeout, String name)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Never BEGIN on a RELOADED GlobalTransaction. \"</span>);\n            }\n        };\n        <span class=\"hljs-keyword\">return</span> tx;\n    }\n</code></pre>\n<h2>2.3 TransactionalTemplate</h2>\n<p>TransactionalTemplate: Wrap a business service invoke into  a distributed transaction supported  service with preceding GlobalTransaction and GlobalTransactionContext API.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TransactionalTemplate</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(TransactionalExecutor business)</span> <span class=\"hljs-keyword\">throws</span> TransactionalExecutor.ExecutionException </span>{\n\n        <span class=\"hljs-comment\">// 1. Get current global transaction instance or create a new one</span>\n        GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();\n\n        <span class=\"hljs-comment\">// 2. Begin the global transaction</span>\n        <span class=\"hljs-keyword\">try</span> {\n            tx.begin(business.timeout(), business.name());\n\n        } <span class=\"hljs-keyword\">catch</span> (TransactionException txe) {\n            <span class=\"hljs-comment\">// 2.1 Fail to begin</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TransactionalExecutor.ExecutionException(tx, txe,\n                TransactionalExecutor.Code.BeginFailure);\n\n        }\n\n        Object rs = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 3. invoke service</span>\n            rs = business.execute();\n\n        } <span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n\n            <span class=\"hljs-comment\">// Exception from business service invoke</span>\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">// Rollback globally</span>\n                tx.rollback();\n\n                <span class=\"hljs-comment\">// 3.1 Global rollback success, throw original business exception</span>\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TransactionalExecutor.ExecutionException(tx, TransactionalExecutor.Code.RollbackDone, ex);\n\n            } <span class=\"hljs-keyword\">catch</span> (TransactionException txe) {\n                <span class=\"hljs-comment\">// 3.2 Global rollback failed</span>\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TransactionalExecutor.ExecutionException(tx, txe,\n                    TransactionalExecutor.Code.RollbackFailure, ex);\n\n            }\n\n        }\n\n        <span class=\"hljs-comment\">// 4. Commit globally</span>\n        <span class=\"hljs-keyword\">try</span> {\n            tx.commit();\n\n        } <span class=\"hljs-keyword\">catch</span> (TransactionException txe) {\n            <span class=\"hljs-comment\">// 4.1 Global commit failed</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TransactionalExecutor.ExecutionException(tx, txe,\n                TransactionalExecutor.Code.CommitFailure);\n\n        }\n        <span class=\"hljs-keyword\">return</span> rs;\n    }\n\n}\n</code></pre>\n<p>The exception of template method: ExecutionException</p>\n<pre><code>    class ExecutionException extends Exception {\n\n        // Transaction instance threw exception\n        private GlobalTransaction transaction;\n\n        // Exception code:\n        // BeginFailure(Fail to begin transaction)\n        // CommitFailure(Fail to commit globally)\n        // RollbackFailure(Fail to rollback globally)\n        // RollbackDone(Global rollback success)\n        private Code code;\n\n        // Original exception triggered by rollback\n        private Throwable originalException;\n</code></pre>\n<p>Outer calling logic try-catch the exception, and do something based on the exception code:</p>\n<ul>\n<li><strong>BeginFailure</strong> (Fail to begin transaction): getCause() gets the framework exception of begin transaction, getOriginalException() is null.</li>\n<li><strong>CommitFailure</strong>(Fail to commit globally):  getCause() gets the framework exception of commit transaction, getOriginalException() is null.</li>\n<li><strong>RollbackFailure</strong> (Fail to rollback globally)：getCause() gets the framework exception of rollback transaction，getOriginalException() gets the original exception of business invoke.</li>\n<li><strong>RollbackDone</strong>(Global rollback success): getCause()  is null, getOriginalException() gets the original exception of business invoke.</li>\n</ul>\n<h1>3. Low-Level API</h1>\n<h2>3.1 RootContext</h2>\n<p>RootContext: It's responsible for maintaining XID during runtime of application.</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-comment\">/**\n     * Get the global XID of the current running application\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getXID</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> CONTEXT_HOLDER.get(KEY_XID);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Bind the global XID to the current application runtime\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(String xid)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(<span class=\"hljs-string\">\"bind \"</span> + xid);\n        }\n        CONTEXT_HOLDER.put(KEY_XID, xid);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Unbind the global XID from the current application runtime, and return XID\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">unbind</span><span class=\"hljs-params\">()</span> </span>{\n        String xid = CONTEXT_HOLDER.remove(KEY_XID);\n        <span class=\"hljs-keyword\">if</span> (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(<span class=\"hljs-string\">\"unbind \"</span> + xid);\n        }\n        <span class=\"hljs-keyword\">return</span> xid;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Check if the current application runtime is in the global transaction context\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">inGlobalTransaction</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> CONTEXT_HOLDER.get(KEY_XID) != <span class=\"hljs-keyword\">null</span>;\n    }\n</code></pre>\n<p>The implementation of High-Level API is based on maintaining XID in the RootContext.</p>\n<p>Whether or not the operation of the current running application is in a global transaction context, just check if there is an XID in the RootContext.</p>\n<p>The default implementation of RootContext is based on ThreadLocal, which is the XID is in the context of current thread.</p>\n<p>Two classic scenes of Low-Level API :</p>\n<h3>1. The propagation of transaction context by remote invoke</h3>\n<p>Retrieve current XID by remote invoke:</p>\n<pre><code class=\"language-java\">String xid = RootContext.getXID();\n</code></pre>\n<p>Propagating the XID to the provider of service by RPC, bind the XID to current RootContext before executing the business logic of provider.</p>\n<pre><code class=\"language-java\">RootContext.bind(rpcXid);\n</code></pre>\n<h3>2. Pause and recover of transaction</h3>\n<p>In a global transaction, if some business logic shouldn't be in the scope of the global transaction, unbind XID before invoke it.</p>\n<pre><code class=\"language-java\">String unbindXid = RootContext.unbind();\n</code></pre>\n<p>Rebind the XID back after the execution of related business logic to achieve recovering the global transaction.</p>\n<pre><code class=\"language-java\">RootContext.bind(unbindXid);\n</code></pre>\n",
  "link": "/en-us/docs/user/api.html",
  "meta": {
    "title": "Api Guide",
    "keywords": "Seata",
    "description": "Api Guide."
  }
}