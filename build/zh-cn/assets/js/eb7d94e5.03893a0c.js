"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[1138],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>S});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,S=u["".concat(l,".").concat(p)]||u[p]||d[p]||a;return t?r.createElement(S,i(i({ref:n},g),{},{components:t})):r.createElement(S,i({ref:n},g))}));function S(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9873:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={title:"\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801-Server\u7aef\u542f\u52a8\u6d41\u7a0b",author:"\u6768\u6653\u5175|\u4e2d\u539f\u94f6\u884c",date:"2020/07/02",keywords:["fescar\u3001seata\u3001\u5206\u5e03\u5f0f\u4e8b\u52a1"]},i=void 0,s={permalink:"/zh-cn/blog/seata-sourcecode-server-bootstrap",source:"@site/i18n/zh-cn/docusaurus-plugin-content-blog/seata-sourcecode-server-bootstrap.md",title:"\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801-Server\u7aef\u542f\u52a8\u6d41\u7a0b",description:"\u3010\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801\u89e3\u8bfb\u4e00\u3011Server\u7aef\u542f\u52a8\u6d41\u7a0b",date:"2020-07-02T00:00:00.000Z",formattedDate:"2020\u5e747\u67082\u65e5",tags:[],readingTime:18.62,hasTruncateMarker:!1,authors:[{name:"\u6768\u6653\u5175|\u4e2d\u539f\u94f6\u884c"}],frontMatter:{title:"\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801-Server\u7aef\u542f\u52a8\u6d41\u7a0b",author:"\u6768\u6653\u5175|\u4e2d\u539f\u94f6\u884c",date:"2020/07/02",keywords:["fescar\u3001seata\u3001\u5206\u5e03\u5f0f\u4e8b\u52a1"]},prevItem:{title:"Seata RPC \u6a21\u5757\u7684\u91cd\u6784\u4e4b\u8def",permalink:"/zh-cn/blog/seata-rpc-refactor"},nextItem:{title:"\u5206\u5e03\u5f0f\u4e8b\u52a1\u5982\u4f55\u5b9e\u73b0\uff1f\u6df1\u5165\u89e3\u8bfb Seata \u7684 XA \u6a21\u5f0f",permalink:"/zh-cn/blog/seata-xa-introduce"}},l={authorsImageUrls:[void 0]},c=[{value:"\u3010\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801\u89e3\u8bfb\u4e00\u3011Server\u7aef\u542f\u52a8\u6d41\u7a0b",id:"\u5206\u5e03\u5f0f\u4e8b\u52a1seata\u6e90\u7801\u89e3\u8bfb\u4e00server\u7aef\u542f\u52a8\u6d41\u7a0b",level:2},{value:"\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6838\u5fc3\u8981\u70b9\uff1a",id:"\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6838\u5fc3\u8981\u70b9",level:3},{value:"1. \u542f\u52a8\u7c7bServer",id:"1-\u542f\u52a8\u7c7bserver",level:4},{value:"2. \u89e3\u6790\u914d\u7f6e",id:"2-\u89e3\u6790\u914d\u7f6e",level:4},{value:"3. \u521d\u59cb\u5316UUIDGenerator",id:"3-\u521d\u59cb\u5316uuidgenerator",level:4},{value:"4. SessionHolder\u521d\u59cb\u5316",id:"4-sessionholder\u521d\u59cb\u5316",level:4},{value:"5. \u521d\u59cb\u5316DefaultCoordinator",id:"5-\u521d\u59cb\u5316defaultcoordinator",level:4},{value:"6. \u521d\u59cb\u5316NettyRemotingServer",id:"6-\u521d\u59cb\u5316nettyremotingserver",level:4}],g={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u5206\u5e03\u5f0f\u4e8b\u52a1seata\u6e90\u7801\u89e3\u8bfb\u4e00server\u7aef\u542f\u52a8\u6d41\u7a0b"},"\u3010\u5206\u5e03\u5f0f\u4e8b\u52a1Seata\u6e90\u7801\u89e3\u8bfb\u4e00\u3011Server\u7aef\u542f\u52a8\u6d41\u7a0b"),(0,o.kt)("h3",{id:"\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6838\u5fc3\u8981\u70b9"},"\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6838\u5fc3\u8981\u70b9\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u4e8b\u52a1\u7684\u6301\u4e45\u5316\uff0c\u4e8b\u52a1\u6240\u5904\u7684\u5404\u79cd\u72b6\u6001\u4e8b\u52a1\u53c2\u4e0e\u65b9\u7684\u5404\u79cd\u72b6\u6001\u90fd\u9700\u8981\u6301\u4e45\u5316\uff0c\u5f53\u5b9e\u4f8b\u5b95\u673a\u65f6\u624d\u80fd\u57fa\u4e8e\u6301\u4e45\u5316\u7684\u6570\u636e\u5bf9\u4e8b\u52a1\u56de\u6eda\u6216\u63d0\u4ea4\uff0c\u5b9e\u73b0\u6700\u7ec8\u4e00\u81f4\u6027"),(0,o.kt)("li",{parentName:"ol"},"\u5b9a\u65f6\u5bf9\u8d85\u65f6\u672a\u5b8c\u6210\u4e8b\u52a1\u7684\u5904\u7406\uff08\u7ee7\u7eed\u5c1d\u8bd5\u63d0\u4ea4\u6216\u56de\u6eda\uff09\uff0c\u5373\u901a\u8fc7\u91cd\u8bd5\u673a\u5236\u5b9e\u73b0\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u6027"),(0,o.kt)("li",{parentName:"ol"},"\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u8de8\u670d\u52a1\u5b9e\u4f8b\u4f20\u64ad\uff0c\u5f53\u5206\u5e03\u5f0f\u4e8b\u52a1\u8de8\u591a\u4e2a\u5b9e\u4f8b\u65f6\u9700\u8981\u5b9e\u73b0\u4e8b\u52a1\u7684\u4f20\u64ad\uff0c\u4e00\u822c\u9700\u8981\u9002\u914d\u4e0d\u540c\u7684rpc\u6846\u67b6"),(0,o.kt)("li",{parentName:"ol"},"\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b\uff1a\u5927\u591a\u6570\u5206\u5e03\u5f0f\u4e8b\u52a1\u4e3a\u4e86\u6027\u80fd\uff0c\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u662f\u8bfb\u672a\u63d0\u4ea4"),(0,o.kt)("li",{parentName:"ol"},"\u5e42\u7b49\u6027\uff1a\u5bf9\u4e8eXA\u6216\u8005seata\u7684AT\u8fd9\u6837\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\uff0c\u90fd\u5df2\u7ecf\u9ed8\u8ba4\u5b9e\u73b0\u4e86\u5e42\u7b49\u6027\uff0c\u800cTCC\u3001Saga\u8fd9\u79cd\u63a5\u53e3\u7ea7\u522b\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u90fd\u8fd8\u9700\u8981\u4e1a\u52a1\u5f00\u53d1\u8005\u81ea\u5df1\u5b9e\u73b0\u5e42\u7b49\u6027\u3002")),(0,o.kt)("p",null,"\u672c\u7247\u6587\u7ae0\u4e3b\u8981\u4eceseata-server\u7684\u542f\u52a8\u6d41\u7a0b\u7684\u89d2\u5ea6\u4ecb\u7ecd\u4e00\u4e0bseata-server\u7684\u6e90\u7801\uff0c\u542f\u52a8\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20200726213919467.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTE0NTg0OA==,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,o.kt)("h4",{id:"1-\u542f\u52a8\u7c7bserver"},"1. \u542f\u52a8\u7c7bServer"),(0,o.kt)("p",null,"seata-server\u7684\u5165\u53e3\u7c7b\u5728Server\u7c7b\u4e2d\uff0c\u6e90\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) throws IOException {\n    // \u4ece\u73af\u5883\u53d8\u91cf\u6216\u8fd0\u884c\u65f6\u53c2\u6570\u4e2d\u83b7\u53d6\u76d1\u542c\u7aef\u53e3\uff0c\u9ed8\u8ba4\u7aef\u53e38091\n    int port = PortHelper.getPort(args);\n    \n    // \u628a\u76d1\u542c\u7aef\u53e3\u8bbe\u7f6e\u5230SystemProperty\u4e2d\uff0cLogback\u7684LoggerContextListener\u5b9e\u73b0\u7c7b\n    // SystemPropertyLoggerContextListener\u4f1a\u628aPort\u5199\u5165\u5230Logback\u7684Context\u4e2d\uff0c\n    // \u5728logback.xml\u6587\u4ef6\u4e2d\u4f1a\u4f7f\u7528Port\u53d8\u91cf\u6765\u6784\u5efa\u65e5\u5fd7\u6587\u4ef6\u540d\u79f0\u3002\n    System.setProperty(ConfigurationKeys.SERVER_PORT, Integer.toString(port));\n\n    // \u521b\u5efaLogger\n    final Logger logger = LoggerFactory.getLogger(Server.class);\n    if (ContainerHelper.isRunningInContainer()) {\n        logger.info("The server is running in container.");\n    }\n\n    // \u89e3\u6790\u542f\u52a8\u4ee5\u53ca\u914d\u7f6e\u6587\u4ef6\u7684\u5404\u79cd\u914d\u7f6e\u53c2\u6570\n    ParameterParser parameterParser = new ParameterParser(args);\n\n    // metrics\u76f8\u5173\uff0c\u8fd9\u91cc\u662f\u4f7f\u7528SPI\u673a\u5236\u83b7\u53d6Registry\u5b9e\u4f8b\u5bf9\u8c61\n    MetricsManager.get().init();\n    \n    // \u628a\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684storeMode\u5199\u5165SystemProperty\u4e2d\uff0c\u65b9\u4fbf\u5176\u4ed6\u7c7b\u4f7f\u7528\u3002\n    System.setProperty(ConfigurationKeys.STORE_MODE, parameterParser.getStoreMode());\n    \n    // \u521b\u5efaNettyRemotingServer\u5b9e\u4f8b\uff0cNettyRemotingServer\u662f\u4e00\u4e2a\u57fa\u4e8eNetty\u5b9e\u73b0\u7684Rpc\u6846\u67b6\uff0c\n    // \u6b64\u65f6\u5e76\u6ca1\u6709\u521d\u59cb\u5316\uff0cNettyRemotingServer\u8d1f\u8d23\u4e0e\u5ba2\u6237\u7aefSDK\u4e2d\u7684TM\u3001RM\u8fdb\u884c\u7f51\u7edc\u901a\u4fe1\u3002\n     nettyRemotingServer = new NettyRemotingServer(WORKING_THREADS);\n    \n    // \u8bbe\u7f6e\u76d1\u542c\u7aef\u53e3\n    nettyRemotingServer.setListenPort(parameterParser.getPort());\n    \n    // UUIDGenerator\u521d\u59cb\u5316\uff0cUUIDGenerator\u57fa\u4e8e\u96ea\u82b1\u7b97\u6cd5\u5b9e\u73b0\uff0c\n    // \u7528\u4e8e\u751f\u6210\u5168\u5c40\u4e8b\u52a1\u3001\u5206\u652f\u4e8b\u52a1\u7684id\u3002\n    // \u591a\u4e2aServer\u5b9e\u4f8b\u914d\u7f6e\u4e0d\u540c\u7684ServerNode\uff0c\u4fdd\u8bc1id\u7684\u552f\u4e00\u6027\n    UUIDGenerator.init(parameterParser.getServerNode());\n    \n    // SessionHodler\u8d1f\u8d23\u4e8b\u52a1\u65e5\u5fd7\uff08\u72b6\u6001\uff09\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff0c\n    // \u5f53\u524d\u652f\u6301file\u3001db\u3001redis\u4e09\u79cd\u5b58\u50a8\u6a21\u5f0f\uff0c\u96c6\u7fa4\u90e8\u7f72\u6a21\u5f0f\u8981\u4f7f\u7528db\u6216redis\u6a21\u5f0f\n    SessionHolder.init(parameterParser.getStoreMode());\n    \n    // \u521b\u5efa\u521d\u59cb\u5316DefaultCoordinator\u5b9e\u4f8b\uff0cDefaultCoordinator\u662fTC\u7684\u6838\u5fc3\u4e8b\u52a1\u903b\u8f91\u5904\u7406\u7c7b\uff0c\n    // \u5e95\u5c42\u5305\u542b\u4e86AT\u3001TCC\u3001SAGA\u7b49\u4e0d\u540c\u4e8b\u52a1\u7c7b\u578b\u7684\u903b\u8f91\u5904\u7406\u3002\n    DefaultCoordinator coordinator = new DefaultCoordinator(nettyRemotingServer);\n    coordinator.init();\n    nettyRemotingServer.setHandler(coordinator);\n    // register ShutdownHook\n    ShutdownHook.getInstance().addDisposable(coordinator);\n    ShutdownHook.getInstance().addDisposable(nettyRemotingServer);\n\n    // 127.0.0.1 and 0.0.0.0 are not valid here.\n    if (NetUtil.isValidIp(parameterParser.getHost(), false)) {\n        XID.setIpAddress(parameterParser.getHost());\n    } else {\n        XID.setIpAddress(NetUtil.getLocalIp());\n    }\n    XID.setPort(nettyRemotingServer.getListenPort());\n\n    try {\n        // \u521d\u59cb\u5316Netty\uff0c\u5f00\u59cb\u76d1\u542c\u7aef\u53e3\u5e76\u963b\u585e\u5728\u8fd9\u91cc\uff0c\u7b49\u5f85\u7a0b\u5e8f\u5173\u95ed\n        nettyRemotingServer.init();\n    } catch (Throwable e) {\n        logger.error("nettyServer init error:{}", e.getMessage(), e);\n        System.exit(-1);\n    }\n\n    System.exit(0);\n}\n')),(0,o.kt)("h4",{id:"2-\u89e3\u6790\u914d\u7f6e"},"2. \u89e3\u6790\u914d\u7f6e"),(0,o.kt)("p",null,"\u53c2\u6570\u89e3\u6790\u7684\u5b9e\u73b0\u4ee3\u7801\u5728ParameterParser\u7c7b\u4e2d\uff0cinit\u65b9\u6cd5\u6e90\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"private void init(String[] args) {\n   try {\n       // \u5224\u65ad\u662f\u5426\u8fd0\u884c\u5728\u5bb9\u5668\u4e2d\uff0c\u5982\u679c\u8fd0\u884c\u5728\u5bb9\u5668\u4e2d\u5219\u914d\u7f6e\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\n       if (ContainerHelper.isRunningInContainer()) {\n           this.seataEnv = ContainerHelper.getEnv();\n           this.host = ContainerHelper.getHost();\n           this.port = ContainerHelper.getPort();\n           this.serverNode = ContainerHelper.getServerNode();\n           this.storeMode = ContainerHelper.getStoreMode();\n       } else {\n           // \u57fa\u4e8eJCommander\u83b7\u53d6\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\u914d\u7f6e\u7684\u53c2\u6570\uff0c\n           // JCommander\u901a\u8fc7\u6ce8\u89e3\u3001\u53cd\u5c04\u7684\u65b9\u5f0f\u628a\u53c2\u6570\u8d4b\u503c\u5230\u5f53\u524d\u7c7b\u7684\u5b57\u6bb5\u4e0a\u3002\n           JCommander jCommander = JCommander.newBuilder().addObject(this).build();\n           jCommander.parse(args);\n           if (help) {\n               jCommander.setProgramName(PROGRAM_NAME);\n               jCommander.usage();\n               System.exit(0);\n           }\n       }\n       // serverNode\u7528\u4e8e\u96ea\u82b1\u7b97\u4e2d\u7684\u5b9e\u4f8b\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u9700\u8981\u4fdd\u8bc1\u552f\u4e00\u3002\n       // \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u57fa\u4e8e\u5f53\u524d\u670d\u52a1\u5668\u7684I\u968f\u673a\u751f\u6210\u4e00\u4e2a\n       if (this.serverNode == null) {\n           this.serverNode = IdWorker.initWorkerId();\n       }\n       if (StringUtils.isNotBlank(seataEnv)) {\n           System.setProperty(ENV_PROPERTY_KEY, seataEnv);\n       }\n       if (StringUtils.isBlank(storeMode)) {\n           // \u8fd9\u91cc\u7275\u626f\u5230\u4e00\u4e2a\u91cd\u8981\u7684Configuration\u7c7b\uff0cParameterParser\u53ea\u8d1f\u8d23\u83b7\u53d6ip\u3001port\u3001storeMode\u7b49\u6838\u5fc3\u53c2\u6570\uff0c\n           // \u5176\u4ed6\u7684\u53c2\u6570\u90fd\u662f\u4eceConfiguration\u4e2d\u83b7\u53d6\u7684\u3002\u8fd9\u91cc\u5982\u679c\u6ca1\u6709\u542f\u52a8\u53c2\u6570\u6ca1\u6709\u6307\u5b9astoreMode\uff0c\n           // \u5c31\u4eceConfiguration\u7c7b\u4e2d\u83b7\u53d6\u3002\n           storeMode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE,\n               SERVER_DEFAULT_STORE_MODE);\n       }\n   } catch (ParameterException e) {\n       printError(e);\n   }\n\n}\n")),(0,o.kt)("p",null,"\u5728ParameterParser\u7684init\u65b9\u6cd5\u4e2d\u7b2c\u4e00\u6b21\u8c03\u7528\u4e86ConfigurationFactory.getInstance()\uff0c\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u5355\u4f8b\u7684Configuration\u5bf9\u8c61\uff0cConfiguration\u8d1f\u8d23\u521d\u59cb\u5316\u6240\u6709\u7684\u5176\u4ed6\u914d\u7f6e\u53c2\u6570\u4fe1\u606f\u3002\u4eceSeata Server\u7aef\u7684\u6e90\u7801\u4e2d\u6211\u4eec\u80fd\u770b\u5230\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6file.conf\u3001registry.conf\u3002\u90a3\u4e48\u8fd9\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff0c\u4e24\u4e2a\u6587\u4ef6\u90fd\u662f\u5fc5\u987b\u7684\u5417\uff1f\u6211\u4eec\u7ee7\u7eed\u770b\u4ee3\u7801\u3002"),(0,o.kt)("p",null,"ConfigurationFactory.getInstance\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u83b7\u53d6\u4e00\u4e2a\u5355\u4f8b\u5bf9\u8c61\uff0c\u6838\u5fc3\u5728buildConfiguration\u65b9\u6cd5\u4e2d\uff0c\u4e0d\u8fc7\u5728buidlConfiguration\u65b9\u6cd5\u524d\uff0cConfigurationFactory\u7c7b\u6709\u4e00\u6bb5static\u4ee3\u7801\u5757\u4f1a\u5148\u6267\u884c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// \u83b7\u53d6Configuration\u7684\u5355\u4f8b\u5bf9\u8c61\npublic static Configuration getInstance() {\n    if (instance == null) {\n        synchronized (Configuration.class) {\n            if (instance == null) {\n                instance = buildConfiguration();\n            }\n        }\n    }\n    return instance;\n}\n\n// ConfigurationFactory\u7684static\u4ee3\u7801\u5757\nstatic {\n    // \u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3aregistry.conf\n    String seataConfigName = System.getProperty(SYSTEM_PROPERTY_SEATA_CONFIG_NAME);\n    if (seataConfigName == null) {\n        seataConfigName = System.getenv(ENV_SEATA_CONFIG_NAME);\n    }\n    if (seataConfigName == null) {\n        seataConfigName = REGISTRY_CONF_PREFIX;\n    }\n    String envValue = System.getProperty(ENV_PROPERTY_KEY);\n    if (envValue == null) {\n        envValue = System.getenv(ENV_SYSTEM_KEY);\n    }\n    \n    // \u8bfb\u53d6registry.conf\u6587\u4ef6\u7684\u914d\u7f6e\uff0c\u6784\u5efa\u57fa\u7840\u7684Configuration\u5bf9\u8c61\n    Configuration configuration = (envValue == null) ? new FileConfiguration(seataConfigName + REGISTRY_CONF_SUFFIX,\n        false) : new FileConfiguration(seataConfigName + "-" + envValue + REGISTRY_CONF_SUFFIX, false);\n    Configuration extConfiguration = null;\n    try {\n        // ExtConfigurationProvider\u5f53\u524d\u53ea\u6709\u4e00\u4e2aSpringBootConfigurationProvider\u5b9e\u73b0\u7c7b\n        // \u7528\u4e8e\u652f\u6301\u5ba2\u6237\u7aefSDK SpringBoot\u7684\u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f\uff0c\u5bf9\u4e8eServer\u7aef\u6765\u8bf4\u8fd9\u6bb5\u903b\u8f91\u53ef\u4ee5\u5ffd\u7565\u3002\n        extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info("load Configuration:{}", extConfiguration == null ? configuration.getClass().getSimpleName()\n                : extConfiguration.getClass().getSimpleName());\n        }\n    } catch (EnhancedServiceNotFoundException ignore) {\n\n    } catch (Exception e) {\n        LOGGER.error("failed to load extConfiguration:{}", e.getMessage(), e);\n    }\n    CURRENT_FILE_INSTANCE = extConfiguration == null ? configuration : extConfiguration;\n}\n')),(0,o.kt)("p",null,"ConfigurationFactory\u4e2d\u7684static\u4ee3\u7801\u5757\u662f\u4eceregistry.conf\u4e2d\u8bfb\u53d6\u914d\u7f6e\u4fe1\u606f\u3002registry.conf\u4e2d\u4e3b\u6709\u4e24\u4e2a\u914d\u7f6e\u4fe1\u606f\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u518c\u4e2d\u5fc3"),"\u548c",(0,o.kt)("strong",{parentName:"p"},"\u914d\u7f6e\u6e90"),"\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u914d\u7f6e\u6e90"),"\u7528\u6765\u6307\u5b9a\u5176\u4ed6\u66f4\u8be6\u7ec6\u7684\u914d\u7f6e\u9879\u662ffile.conf\u6216\u8005\u662fapollo\u7b49\u5176\u4ed6\u914d\u7f6e\u6e90\u3002\u6240\u4ee5registry.conf\u914d\u7f6e\u6587\u4ef6\u65f6\u5fc5\u987b\u7684\uff0cregistry.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u5176\u4ed6\u8be6\u7ec6\u914d\u7f6e\u7684\u914d\u7f6e\u6e90\uff0c\u5f53\u524d\u914d\u7f6e\u6e90\u652f\u6301file\u3001zk\u3001apollo\u3001nacos\u3001etcd3\u7b49\u3002\u6240\u4ee5file.conf\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53ea\u6709\u5f53\u8bbe\u7f6e\u914d\u7f6e\u6e90\u4e3afile\u7c7b\u578b\u65f6\u624d\u4f1a\u8bfb\u53d6file.conf\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002"),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765ConfigurationFactory\u4e2d\u7684buildConfiguration\u5c31\u662f\u6839\u636eregistry.conf\u4e2d\u8bbe\u7f6e\u7684\u914d\u7f6e\u6e90\u6765\u52a0\u8f7d\u66f4\u591a\u7684\u914d\u7f6e\u9879\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'private static Configuration buildConfiguration() {\n    ConfigType configType;\n    String configTypeName;\n    try {\n        // \u4eceregistry.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6config.type\u5b57\u6bb5\u503c\uff0c\u5e76\u89e3\u6790\u4e3a\u679a\u4e3eConfigType\n        configTypeName = CURRENT_FILE_INSTANCE.getConfig(\n            ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR\n                + ConfigurationKeys.FILE_ROOT_TYPE);\n\n        if (StringUtils.isBlank(configTypeName)) {\n            throw new NotSupportYetException("config type can not be null");\n        }\n\n        configType = ConfigType.getType(configTypeName);\n    } catch (Exception e) {\n        throw e;\n    }\n    Configuration extConfiguration = null;\n    Configuration configuration;\n    if (ConfigType.File == configType) {\n        // \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e3afile\u7c7b\u578b\uff0c\u5219\u4eceregistry.conf\u4e2d\u8bfb\u53d6config.file.name\u914d\u7f6e\u9879\uff0c\n        // \u5373file\u7c7b\u578b\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u793a\u4f8b\u4e2d\u9ed8\u8ba4\u4e3afile.conf\n        String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n            ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n        String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n        \n        // \u6839\u636efile\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u6784\u5efaFileConfuguration\u5bf9\u8c61\n        configuration = new FileConfiguration(name);\n        try {\n            // configuration\u7684\u989d\u5916\u6269\u5c55\uff0c\u4e5f\u662f\u53ea\u5bf9\u5ba2\u6237\u7aefSpringBoot\u7684SDK\u624d\u751f\u6548\n            extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info("load Configuration:{}", extConfiguration == null\n                    ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n            }\n        } catch (EnhancedServiceNotFoundException ignore) {\n\n        } catch (Exception e) {\n            LOGGER.error("failed to load extConfiguration:{}", e.getMessage(), e);\n        }\n    } else {\n        // \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u7684\u7c7b\u578b\u4e0d\u662ffile\uff0c\u5982\uff1anacos\u3001zk\u7b49\uff0c\n        // \u5219\u901a\u8fc7SPI\u7684\u65b9\u5f0f\u751f\u6210\u5bf9\u5e94\u7684ConfigurationProvider\u5bf9\u8c61\n        configuration = EnhancedServiceLoader\n            .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n    }\n    try {\n        // ConfigurationCache\u662f\u5bf9Configuration\u505a\u4e86\u4e00\u6b21\u5c42\u4ee3\u7406\u5185\u5b58\u7f13\u5b58\uff0c\u63d0\u5347\u83b7\u53d6\u914d\u7f6e\u7684\u6027\u80fd\n        Configuration configurationCache;\n        if (null != extConfiguration) {\n            configurationCache = ConfigurationCache.getInstance().proxy(extConfiguration);\n        } else {\n            configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n        }\n        if (null != configurationCache) {\n            extConfiguration = configurationCache;\n        }\n    } catch (EnhancedServiceNotFoundException ignore) {\n\n    } catch (Exception e) {\n        LOGGER.error("failed to load configurationCacheProvider:{}", e.getMessage(), e);\n    }\n    return null == extConfiguration ? configuration : extConfiguration;\n}\n')),(0,o.kt)("h4",{id:"3-\u521d\u59cb\u5316uuidgenerator"},"3. \u521d\u59cb\u5316UUIDGenerator"),(0,o.kt)("p",null,"UUIDGenertor\u521d\u59cb\u5316\u63a5\u6536\u4e00\u4e2aserverNode\u53c2\u6570\uff0cUUIDGenertor\u5f53\u524d\u662f\u4f7f\u7528\u4e86\u96ea\u82b1\u7b97\u6cd5\u6765\u751f\u6210\u552f\u4e00Id\uff0c\u8be5serverNode\u7528\u6765\u4fdd\u8bc1\u591a\u4e2aseata-server\u5b9e\u4f8b\u751f\u6210\u7684\u552f\u4e00id\u4e0d\u91cd\u590d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class UUIDGenerator {\n\n    /**\n     * Generate uuid long.\n     *\n     * @return the long\n     */\n    public static long generateUUID() {\n        return IdWorker.getInstance().nextId();\n    }\n\n    /**\n     * Init.\n     *\n     * @param serverNode the server node id\n     */\n    public static void init(Long serverNode) {\n        IdWorker.init(serverNode);\n    }\n}\n")),(0,o.kt)("p",null,"UUIDGenerator\u662f\u5bf9IdWorker\u505a\u4e86\u5c01\u88c5\uff0c\u552f\u4e00id\u7684\u6838\u5fc3\u5b9e\u73b0\u903b\u8f91\u5728IdWoker\u7c7b\u4e2d\uff0cIdWorker\u662f\u4e00\u4e2a\u96ea\u82b1\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002\u6b64\u5904\u7684IdWorker\u53c8\u662f\u4e00\u4e2a\u5355\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class IdWorker\n/**\n     * Constructor\n     *\n     * @param workerId\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684ServerNode, \u53d6\u503c\u8303\u56f4\u57280\xb71023\uff0c\u4e5f\u5c31\u662f\u572864\u4f4d\u7684UUID\u4e2d\u536010\u4f4d\n     */\n    public IdWorker(long workerId) {\n        if (workerId > maxWorkerId || workerId < 0) {\n            throw new IllegalArgumentException(\n                String.format("worker Id can\'t be greater than %d or less than 0", maxWorkerId));\n        }\n        this.workerId = workerId;\n    }\n\n    /**\n     * Get the next ID (the method is thread-safe)\n     *\n     * @return SnowflakeId\n     */\n    public long nextId() {\n        long timestamp = timeGen();\n\n        if (timestamp < lastTimestamp) {\n            throw new RuntimeException(String.format(\n                "clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));\n        }\n\n        synchronized (this) {\n            if (lastTimestamp == timestamp) {\n                sequence = (sequence + 1) & sequenceMask;\n                if (sequence == 0) {\n                    timestamp = tilNextMillis(lastTimestamp);\n                }\n            } else {\n                sequence = 0L;\n            }\n            lastTimestamp = timestamp;\n        }\n        //\u96ea\u82b1\u7b97\u6cd564\u4f4d\u552f\u4e00id\u7ec4\u6210\uff1a\u7b2c\u4e00\u4f4d0 + 41\u4f4d\u65f6\u95f4\u6233 + 10\u4f4dworkerId + 12\u4f4d\u81ea\u589e\u5e8f\u5217\u5316\uff08\u540c\u4e00\u65f6\u95f4\u6233\u5185\u81ea\u589e\uff09\n        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n    }\n')),(0,o.kt)("h4",{id:"4-sessionholder\u521d\u59cb\u5316"},"4. SessionHolder\u521d\u59cb\u5316"),(0,o.kt)("p",null,"SessionHolder\u8d1f\u8d23Session\u7684\u6301\u4e45\u5316\uff0c\u4e00\u4e2aSession\u5bf9\u8c61\u5bf9\u5e94\u4e00\u4e2a\u4e8b\u52a1\uff0c\u4e8b\u52a1\u5206\u4e3a\u4e24\u79cd\uff1a\u5168\u5c40\u4e8b\u52a1\uff08GlobalSession\uff09\u548c\u5206\u652f\u4e8b\u52a1\uff08BranchSession\uff09\u3002\nSessionHolder\u652f\u6301file\u548cdb\u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0f\uff0c\u5176\u4e2ddb\u652f\u6301\u96c6\u7fa4\u6a21\u5f0f\uff0c\u63a8\u8350\u4f7f\u7528db\u3002SessionHolder\u4e2d\u6700\u4e3b\u8981\u7684\u56db\u4e2a\u5b57\u6bb5\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// ROOT_SESSION_MANAGER\u7528\u4e8e\u83b7\u53d6\u6240\u6709\u7684Setssion\uff0c\u4ee5\u53caSession\u7684\u521b\u5efa\u3001\u66f4\u65b0\u3001\u5220\u9664\u7b49\u3002\nprivate static SessionManager ROOT_SESSION_MANAGER;\n// \u7528\u4e8e\u83b7\u53d6\u3001\u66f4\u65b0\u6240\u6709\u7684\u5f02\u6b65commit\u7684Session\nprivate static SessionManager ASYNC_COMMITTING_SESSION_MANAGER;\n// \u7528\u4e8e\u83b7\u53d6\u3001\u66f4\u65b0\u6240\u6709\u9700\u8981\u91cd\u8bd5commit\u7684Session\nprivate static SessionManager RETRY_COMMITTING_SESSION_MANAGER;\n// \u7528\u4e8e\u83b7\u53d6\u3001\u66f4\u65b0\u6240\u6709\u9700\u8981\u91cd\u8bd5rollback\u7684Session\nprivate static SessionManager RETRY_ROLLBACKING_SESSION_MANAGER;\n")),(0,o.kt)("p",null,"SessionHolder\u7684init\u65b9\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public static void init(String mode) throws IOException {\n    if (StringUtils.isBlank(mode)) {\n        mode = CONFIG.getConfig(ConfigurationKeys.STORE_MODE);\n    }\n    StoreMode storeMode = StoreMode.get(mode);\n    if (StoreMode.DB.equals(storeMode)) {\n        // \u8fd9\u91cc\u53c8\u7528\u5230\u4e86SPI\u7684\u65b9\u5f0f\u52a0\u8f7dSessionManager\uff0c\n        // \u5176\u5b9e\u4e0b\u9762\u83b7\u53d6\u7684\u56db\u4e2aSessionManager\u5b9e\u4f8b\u90fd\u662f\u540c\u4e00\u4e2a\u7c7bDataBaseSessionManager\u7684\u4e0d\u540c\u5b9e\u4f8b\uff0c\n        // \u53ea\u662f\u7ed9DataBaseSessionManager\u7684\u6784\u9020\u51fd\u6570\u4f20\u53c2\u4e0d\u540c\u3002\n        ROOT_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.getName());\n        ASYNC_COMMITTING_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.getName(),\n            new Object[] {ASYNC_COMMITTING_SESSION_MANAGER_NAME});\n        RETRY_COMMITTING_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.getName(),\n            new Object[] {RETRY_COMMITTING_SESSION_MANAGER_NAME});\n        RETRY_ROLLBACKING_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.getName(),\n            new Object[] {RETRY_ROLLBACKING_SESSION_MANAGER_NAME});\n    } else if (StoreMode.FILE.equals(storeMode)) {\n        //file\u6a21\u5f0f\u53ef\u4ee5\u5148\u4e0d\u5173\u5fc3\n        ...\n    } else {\n        throw new IllegalArgumentException("unknown store mode:" + mode);\n    }\n    // reload\u65b9\u6cd5\u5bf9\u4e8edb\u6a21\u5f0f\u53ef\u4ee5\u5ffd\u7565\n    reload();\n}\n')),(0,o.kt)("p",null,"\u4e0a\u9762\u770b\u5230SessionHolder\u4e2d\u7684\u56db\u4e2aSessionManager\u672c\u8d28\u90fd\u662f\u7c7bDataBaseSessionManager\u7684\u5b9e\u4f8b\uff0c\u53ea\u662f\u7ed9\u6784\u9020\u51fd\u6570\u4f20\u53c2\u4e0d\u540c\uff0c\u770b\u4e0bDataBaseSessionManager\u7684\u5b9a\u4e49\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public DataBaseSessionManager(String name) {\n    super();\n    this.taskName = name;\n}\n\n// \u6839\u636e\u5b9e\u4f8b\u7684taskName\u6765\u51b3\u5b9aallSessions\u8fd4\u56de\u7684\u4e8b\u52a1\u5217\u8868\uff0c\n// \u5982taskName\u7b49\u4e8eASYNC_COMMITTING_SESSION_MANAGER_NAME\u7684\n// \u5c31\u8fd4\u56de\u6240\u6709\u72b6\u6001\u4e3aAsyncCommitting\u7684\u4e8b\u52a1\u3002\npublic Collection<GlobalSession> allSessions() {\n    // get by taskName\n    if (SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {\n            return findGlobalSessions(new SessionCondition(GlobalStatus.AsyncCommitting));\n    } else if (SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {\n            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying}));\n    } else if (SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {\n            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.RollbackRetrying,\n                    GlobalStatus.Rollbacking, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));\n    } else {\n        // taskName\u4e3anull\uff0c\u5219\u5bf9\u5e94ROOT_SESSION_MANAGER\uff0c\u5373\u83b7\u53d6\u6240\u6709\u72b6\u6001\u7684\u4e8b\u52a1\n        return findGlobalSessions(new SessionCondition(new GlobalStatus[] {\n                GlobalStatus.UnKnown, GlobalStatus.Begin,\n                GlobalStatus.Committing, GlobalStatus.CommitRetrying, GlobalStatus.Rollbacking,\n                GlobalStatus.RollbackRetrying,\n                GlobalStatus.TimeoutRollbacking, \n                GlobalStatus.TimeoutRollbackRetrying,\n                GlobalStatus.AsyncCommitting}));\n    }\n}\n")),(0,o.kt)("h4",{id:"5-\u521d\u59cb\u5316defaultcoordinator"},"5. \u521d\u59cb\u5316DefaultCoordinator"),(0,o.kt)("p",null,"DefaultCoordinator\u662f\u4e8b\u52a1\u534f\u8c03\u5668\u7684\u6838\u5fc3\uff0c\u5982\uff1a\u5f00\u542f\u3001\u63d0\u4ea4\u3001\u56de\u6eda\u5168\u5c40\u4e8b\u52a1\uff0c\u6ce8\u518c\u3001\u63d0\u4ea4\u3001\u56de\u6eda\u5206\u652f\u4e8b\u52a1\u90fd\u662f\u7531DefaultCoordinator\u8d1f\u8d23\u534f\u8c03\u5904\u7406\u7684\u3002DefaultCoordinato\u901a\u8fc7RpcServer\u4e0e\u8fdc\u7a0b\u7684TM\u3001RM\u901a\u4fe1\u6765\u5b9e\u73b0\u5206\u652f\u4e8b\u52a1\u7684\u63d0\u4ea4\u3001\u56de\u6eda\u7b49\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public DefaultCoordinator(ServerMessageSender messageSender) {\n    // \u63a5\u53e3messageSender\u7684\u5b9e\u73b0\u7c7b\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684RpcServer\n    this.messageSender = messageSender;\n    \n    // DefaultCore\u5c01\u88c5\u4e86AT\u3001TCC\u3001Saga\u7b49\u5206\u5e03\u5f0f\u4e8b\u52a1\u6a21\u5f0f\u7684\u5177\u4f53\u5b9e\u73b0\u7c7b\n    this.core = new DefaultCore(messageSender);\n}\n\n// init\u65b9\u6cd5\u521d\u59cb\u5316\u4e865\u4e2a\u5b9a\u65f6\u5668\uff0c\u4e3b\u8981\u7528\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u91cd\u8bd5\u673a\u5236\uff0c\n// \u56e0\u4e3a\u5206\u5e03\u5f0f\u73af\u5883\u7684\u4e0d\u7a33\u5b9a\u6027\u4f1a\u9020\u6210\u4e8b\u52a1\u5904\u4e8e\u4e2d\u95f4\u72b6\u6001\uff0c\n// \u6240\u4ee5\u8981\u901a\u8fc7\u4e0d\u65ad\u7684\u91cd\u8bd5\u673a\u5236\u6765\u5b9e\u73b0\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u3002\n// \u4e0b\u9762\u7684\u5b9a\u65f6\u5668\u9664\u4e86undoLogDelete\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u5b9a\u65f6\u4efb\u52a1\u9ed8\u8ba4\u90fd\u662f1\u79d2\u6267\u884c\u4e00\u6b21\u3002\npublic void init() {\n    // \u5904\u7406\u5904\u4e8e\u56de\u6eda\u72b6\u6001\u53ef\u91cd\u8bd5\u7684\u4e8b\u52a1\n    retryRollbacking.scheduleAtFixedRate(() -> {\n        try {\n            handleRetryRollbacking();\n        } catch (Exception e) {\n            LOGGER.info("Exception retry rollbacking ... ", e);\n        }\n    }, 0, ROLLBACKING_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n        \n    // \u5904\u7406\u4e8c\u9636\u6bb5\u53ef\u4ee5\u91cd\u8bd5\u63d0\u4ea4\u7684\u72b6\u6001\u53ef\u91cd\u8bd5\u7684\u4e8b\u52a1\n    retryCommitting.scheduleAtFixedRate(() -> {\n        try {\n            handleRetryCommitting();\n        } catch (Exception e) {\n            LOGGER.info("Exception retry committing ... ", e);\n        }\n    }, 0, COMMITTING_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n\n    // \u5904\u7406\u5f02\u6b65\u63d0\u4ea4\u7684\u4e8b\u52a1\n    asyncCommitting.scheduleAtFixedRate(() -> {\n        try {\n            handleAsyncCommitting();\n        } catch (Exception e) {\n            LOGGER.info("Exception async committing ... ", e);\n        }\n    }, 0, ASYNC_COMMITTING_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n    \n    // \u68c0\u67e5\u4e8b\u52a1\u7684\u7b2c\u4e00\u9636\u6bb5\u5df2\u7ecf\u8d85\u65f6\u7684\u4e8b\u52a1\uff0c\u8bbe\u7f6e\u4e8b\u52a1\u72b6\u6001\u4e3aTimeoutRollbacking\uff0c\n    // \u8be5\u4e8b\u52a1\u4f1a\u7531\u5176\u4ed6\u5b9a\u65f6\u4efb\u52a1\u6267\u884c\u56de\u6eda\u64cd\u4f5c\n    timeoutCheck.scheduleAtFixedRate(() -> {\n        try {\n            timeoutCheck();\n        } catch (Exception e) {\n            LOGGER.info("Exception timeout checking ... ", e);\n        }\n    }, 0, TIMEOUT_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n    \n    // \u6839\u636eunlog\u7684\u4fdd\u5b58\u5929\u6570\u8c03\u7528RM\u5220\u9664unlog\n    undoLogDelete.scheduleAtFixedRate(() -> {\n        try {\n            undoLogDelete();\n        } catch (Exception e) {\n            LOGGER.info("Exception undoLog deleting ... ", e);\n        }\n    }, UNDO_LOG_DELAY_DELETE_PERIOD, UNDO_LOG_DELETE_PERIOD, TimeUnit.MILLISECONDS);\n}\n')),(0,o.kt)("h4",{id:"6-\u521d\u59cb\u5316nettyremotingserver"},"6. \u521d\u59cb\u5316NettyRemotingServer"),(0,o.kt)("p",null,"NettyRemotingServer\u662f\u57fa\u4e8eNetty\u5b9e\u73b0\u7684\u7b80\u5316\u7248\u7684Rpc\u670d\u52a1\u7aef\uff0cNettyRemotingServer\u521d\u59cb\u5316\u65f6\u4e3b\u8981\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"registerProcessor"),"\uff1a\u6ce8\u518c\u4e0eClient\u901a\u4fe1\u7684Processor\u3002"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"super.init()"),"\uff1asuper.init()\u65b9\u6cd5\u4e2d\u8d1f\u8d23\u521d\u59cb\u5316Netty\uff0c\u5e76\u628a\u5f53\u524d\u5b9e\u4f8b\u7684IP\u7aef\u53e3\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u4e2d")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public void init() {\n    // registry processor\n    registerProcessor();\n    if (initialized.compareAndSet(false, true)) {\n        super.init();\n    }\n}\n\nprivate void registerProcessor() {\n    // 1. \u6ce8\u518c\u6838\u5fc3\u7684ServerOnRequestProcessor\uff0c\u5373\u4e0e\u4e8b\u52a1\u5904\u7406\u76f8\u5173\u7684Processor\uff0c\n    // \u5982\uff1a\u5168\u5c40\u4e8b\u52a1\u5f00\u59cb\u3001\u63d0\u4ea4\uff0c\u5206\u652f\u4e8b\u52a1\u6ce8\u518c\u3001\u53cd\u9988\u5f53\u524d\u72b6\u6001\u7b49\u3002\n    // ServerOnRequestProcessor\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u5165getHandler()\u8fd4\u56de\u7684\u793a\u4f8b\uff0c\u8fd9\u4e2ahandler\n    // \u5c31\u662f\u524d\u9762\u63d0\u5230\u7684DefaultCoordinator\uff0cDefaultCoordinator\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6838\u5fc3\u5904\u7406\u7c7b\n    ServerOnRequestProcessor onRequestProcessor =\n        new ServerOnRequestProcessor(this, getHandler());\n    super.registerProcessor(MessageType.TYPE_BRANCH_REGISTER, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_BEGIN, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_COMMIT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_REPORT, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_ROLLBACK, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_GLOBAL_STATUS, onRequestProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_SEATA_MERGE, onRequestProcessor, messageExecutor);\n    \n    // 2.\u6ce8\u518cResponseProcessor\uff0cResponseProcessor\u7528\u4e8e\u5904\u7406\u5f53Server\u7aef\u4e3b\u52a8\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\n    // Client\u7aef\u56de\u590d\u7684\u6d88\u606f\uff0c\u5373Response\u3002\u5982\uff1aServer\u5411Client\u7aef\u53d1\u9001\u5206\u652f\u4e8b\u52a1\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u7684\u8bf7\u6c42\u65f6\uff0c\n    // Client\u8fd4\u56de\u63d0\u4ea4/\u56de\u6eda\u7684\u7ed3\u679c\n    ServerOnResponseProcessor onResponseProcessor =\n        new ServerOnResponseProcessor(getHandler(), getFutures());\n    super.registerProcessor(MessageType.TYPE_BRANCH_COMMIT_RESULT, onResponseProcessor, messageExecutor);\n    super.registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK_RESULT, onResponseProcessor, messageExecutor);\n    \n    // 3. Client\u7aef\u53d1\u8d77RM\u6ce8\u518c\u8bf7\u6c42\u65f6\u5bf9\u5e94\u7684Processor\n    RegRmProcessor regRmProcessor = new RegRmProcessor(this);\n    super.registerProcessor(MessageType.TYPE_REG_RM, regRmProcessor, messageExecutor);\n    \n    // 4. Client\u7aef\u53d1\u8d77TM\u6ce8\u518c\u8bf7\u6c42\u65f6\u5bf9\u5e94\u7684Processor\n    RegTmProcessor regTmProcessor = new RegTmProcessor(this);\n    super.registerProcessor(MessageType.TYPE_REG_CLT, regTmProcessor, null);\n    \n    // 5. Client\u7aef\u53d1\u9001\u5fc3\u8df3\u8bf7\u6c42\u65f6\u5bf9\u5e94\u7684Processor\n    ServerHeartbeatProcessor heartbeatMessageProcessor = new ServerHeartbeatProcessor(this);\n    super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, heartbeatMessageProcessor, null);\n}\n")),(0,o.kt)("p",null,"\u5728NettyRemotingServer\u4e2d\u6709\u8c03\u7528\u57fa\u7c7bAbstractNettyRemotingServer\u7684init\u65b9\u6cd5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public void init() {\n    // super.init()\u65b9\u6cd5\u4e2d\u542f\u52a8\u4e86\u4e00\u4e2a\u5b9a\u65f6\u6e05\u7406\u8d85\u65f6Rpc\u8bf7\u6c42\u7684\u5b9a\u65f6\u4efb\u52a1\uff0c3S\u6267\u884c\u4e00\u6b21\u3002\n    super.init();\n    // \u914d\u7f6eNetty Server\u7aef\uff0c\u5f00\u59cb\u76d1\u542c\u7aef\u53e3\u3002\n    serverBootstrap.start();\n}\n\n// serverBootstrap.start();\npublic void start() {\n    // Netty server\u7aef\u7684\u5e38\u89c4\u914d\u7f6e\uff0c\u5176\u4e2d\u6dfb\u52a0\u4e86\u4e24\u4e2aChannelHandler\uff1a\n    // ProtocolV1Decoder\u3001ProtocolV1Encoder\uff0c\n    // \u5206\u522b\u5bf9\u5e94Seata\u81ea\u5b9a\u4e49RPC\u534f\u8bae\u7684\u89e3\u7801\u5668\u548c\u7f16\u7801\u5668\n    this.serverBootstrap.group(this.eventLoopGroupBoss, this.eventLoopGroupWorker)\n        .channel(NettyServerConfig.SERVER_CHANNEL_CLAZZ)\n        .option(ChannelOption.SO_BACKLOG, nettyServerConfig.getSoBackLogSize())\n        .option(ChannelOption.SO_REUSEADDR, true)\n        .childOption(ChannelOption.SO_KEEPALIVE, true)\n        .childOption(ChannelOption.TCP_NODELAY, true)\n        .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSendBufSize())\n        .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketResvBufSize())\n        .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK,\n            new WriteBufferWaterMark(nettyServerConfig.getWriteBufferLowWaterMark(),\n                nettyServerConfig.getWriteBufferHighWaterMark()))\n        .localAddress(new InetSocketAddress(listenPort))\n        .childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new IdleStateHandler(nettyServerConfig.getChannelMaxReadIdleSeconds(), 0, 0))\n                    .addLast(new ProtocolV1Decoder())\n                    .addLast(new ProtocolV1Encoder());\n                if (channelHandlers != null) {\n                    addChannelPipelineLast(ch, channelHandlers);\n                }\n\n            }\n        });\n\n    try {\n        // \u5f00\u59cb\u76d1\u542c\u914d\u7f6e\u7684\u7aef\u53e3\n        ChannelFuture future = this.serverBootstrap.bind(listenPort).sync();\n        LOGGER.info("Server started, listen port: {}", listenPort);\n        // Netty\u542f\u52a8\u6210\u529f\u4e4b\u540e\u628a\u5f53\u524d\u5b9e\u4f8b\u6ce8\u518c\u5230registry.conf\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u7684\u6ce8\u518c\u4e2d\u5fc3\u4e0a\n        RegistryFactory.getInstance().register(new InetSocketAddress(XID.getIpAddress(), XID.getPort()));\n        initialized.set(true);\n        future.channel().closeFuture().sync();\n    } catch (Exception exx) {\n        throw new RuntimeException(exx);\n    }\n}\n')))}d.isMDXComponent=!0}}]);