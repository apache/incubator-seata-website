"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[4709],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8488:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=t(87462),o=(t(67294),t(3905));const r={title:"Seata\u4e8b\u52a1\u9694\u79bb",keywords:["Seata\u4e8b\u52a1\u9694\u79bb"],description:"Seata\u4e8b\u52a1\u9694\u79bb"},l="Seata\u4e8b\u52a1\u9694\u79bb",i={unversionedId:"user/appendix/isolation",id:"user/appendix/isolation",title:"Seata\u4e8b\u52a1\u9694\u79bb",description:"Seata\u4e8b\u52a1\u9694\u79bb",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/user/appendix/isolation.md",sourceDirName:"user/appendix",slug:"/user/appendix/isolation",permalink:"/zh-cn/docs/user/appendix/isolation",draft:!1,tags:[],version:"current",frontMatter:{title:"Seata\u4e8b\u52a1\u9694\u79bb",keywords:["Seata\u4e8b\u52a1\u9694\u79bb"],description:"Seata\u4e8b\u52a1\u9694\u79bb"}},c={},s=[{value:"\u4ece\u4ee3\u7406\u6570\u636e\u6e90\u8bf4\u8d77",id:"\u4ece\u4ee3\u7406\u6570\u636e\u6e90\u8bf4\u8d77",level:2},{value:"<strong><code>StatementProxy.executeXXX()</code>\u7684\u5904\u7406\u903b\u8f91</strong>",id:"statementproxyexecutexxx\u7684\u5904\u7406\u903b\u8f91",level:3},{value:"<strong><code>ConnectionProxy.commit()</code>\u7684\u5904\u7406\u903b\u8f91</strong>",id:"connectionproxycommit\u7684\u5904\u7406\u903b\u8f91",level:3},{value:"<strong>@GlobalTransactional\u7684\u4f5c\u7528</strong>",id:"globaltransactional\u7684\u4f5c\u7528",level:3},{value:"<strong>@GlobalLock + select for update\u7684\u4f5c\u7528</strong>",id:"globallock--select-for-update\u7684\u4f5c\u7528",level:3},{value:"\u5148\u4e3e\u4e00\u4e2a\u810f\u5199\u7684\u4f8b\u5b50\uff0c\u518d\u6765\u770bSeata\u5982\u4f55\u9632\u6b62\u810f\u5199",id:"\u5148\u4e3e\u4e00\u4e2a\u810f\u5199\u7684\u4f8b\u5b50\u518d\u6765\u770bseata\u5982\u4f55\u9632\u6b62\u810f\u5199",level:2},{value:"<strong>\u600e\u4e48\u7528Seata\u9632\u6b62\u810f\u5199\uff1f</strong>",id:"\u600e\u4e48\u7528seata\u9632\u6b62\u810f\u5199",level:2},{value:"\u529e\u6cd5\u4e00\uff1a<code>updateA()</code>\u4e5f\u52a0\u4e0a<code>@GlobalTransactional</code>\uff0c\u6b64\u65f6Seata\u4f1a\u5982\u4f55\u4fdd\u8bc1\u4e8b\u52a1\u9694\u79bb\uff1f",id:"\u529e\u6cd5\u4e00updatea\u4e5f\u52a0\u4e0aglobaltransactional\u6b64\u65f6seata\u4f1a\u5982\u4f55\u4fdd\u8bc1\u4e8b\u52a1\u9694\u79bb",level:3},{value:"\u529e\u6cd5\u4e8c\uff1a <strong>@GlobalLock + select for update</strong>",id:"\u529e\u6cd5\u4e8c-globallock--select-for-update",level:3},{value:"<strong>\u5982\u4f55\u9632\u6b62\u810f\u8bfb\uff1f</strong>",id:"\u5982\u4f55\u9632\u6b62\u810f\u8bfb",level:2},{value:"\u573a\u666f\uff1a   \u67d0\u4e1a\u52a1\u5148\u8c03\u7528<code>updateAll()</code>\uff0c<code>updateAll()</code>\u672a\u6267\u884c\u5b8c\u6210\uff0c\u53e6\u4e00\u4e1a\u52a1\u540e\u8c03\u7528<code>queryA()</code>",id:"\u573a\u666f---\u67d0\u4e1a\u52a1\u5148\u8c03\u7528updateallupdateall\u672a\u6267\u884c\u5b8c\u6210\u53e6\u4e00\u4e1a\u52a1\u540e\u8c03\u7528querya",level:3},{value:"<strong>DataSourceProxy\u7684\u4f5c\u7528</strong>",id:"datasourceproxy\u7684\u4f5c\u7528",level:2},{value:"<strong>\u901a\u8fc7<code>ConnectionProxy.prepareStatement(...)</code>\u83b7\u5f97<code>StatementProxy</code></strong>",id:"\u901a\u8fc7connectionproxypreparestatement\u83b7\u5f97statementproxy",level:2},{value:"<strong><code>StatementProxy.execute()</code>\u7684\u5904\u7406\u903b\u8f91</strong>",id:"statementproxyexecute\u7684\u5904\u7406\u903b\u8f91",level:2},{value:"<strong><code>ConnectionProxy.commit()</code>\u7684\u5904\u7406\u903b\u8f91</strong>",id:"connectionproxycommit\u7684\u5904\u7406\u903b\u8f91-1",level:2},{value:"\u4ecb\u7ecd<code>RootContext</code>",id:"\u4ecb\u7ecdrootcontext",level:2},{value:"<strong><code>GlobalTransactionalInterceptor</code>\u5904\u7406\u5e26\u6709<code>@GlobalTransactional</code>\u6216<code>@GlobalLock</code>\u7684\u65b9\u6cd5</strong>",id:"globaltransactionalinterceptor\u5904\u7406\u5e26\u6709globaltransactional\u6216globallock\u7684\u65b9\u6cd5",level:2},{value:"<strong>\u5148\u770b\u5904\u7406<code>@GlobalTransactional</code></strong>",id:"\u5148\u770b\u5904\u7406globaltransactional",level:3},{value:"<strong>\u63a5\u7740\u770b\u5904\u7406<code>@GlobalLock</code></strong>",id:"\u63a5\u7740\u770b\u5904\u7406globallock",level:3}],p={toc:s},u="wrapper";function d(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"seata\u4e8b\u52a1\u9694\u79bb"},"Seata\u4e8b\u52a1\u9694\u79bb"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u76ee\u6807\uff1a\u5e2e\u52a9\u7528\u6237\u660e\u767d\u4f7f\u7528Seata ",(0,o.kt)("strong",{parentName:"p"},"AT\u6a21\u5f0f"),"\u65f6\uff0c\u8be5\u5982\u4f55\u6b63\u786e\u5b9e\u73b0\u4e8b\u52a1\u9694\u79bb\uff0c\u9632\u6b62\u810f\u8bfb\u810f\u5199\u3002"),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"\u5e0c\u671b\u8bfb\u8005\u5728\u9605\u8bfb\u672c\u6587\u524d\uff0c\u5df2\u9605\u8bfb\u8fc7seata\u5b98\u7f51\u4e2d\u5bf9AT\u6a21\u5f0f\u7684\u4ecb\u7ecd\uff0c\u5e76\u4e14\u5bf9\u6570\u636e\u5e93\u672c\u5730\u9501\u6709\u6240\u4e86\u89e3")),(0,o.kt)("p",{parentName:"blockquote"},"\uff08\u4f8b\u5982\uff0c\u4e24\u4e2a\u4e8b\u52a1\u540c\u65f6\u5728\u5bf9\u540c\u4e00\u6761\u8bb0\u5f55\u505aupdate\u65f6\uff0c\u53ea\u6709\u62ff\u5230record lock\u7684\u4e8b\u52a1\u624d\u80fd\u66f4\u65b0\u6210\u529f\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u5728record lock\u672a\u91ca\u653e\u524d\u53ea\u80fd\u7b49\u5f85\uff0c\u76f4\u5230\u4e8b\u52a1\u8d85\u65f6\uff09")),(0,o.kt)("p",null,"\u9996\u5148\u8bf7\u770b\u8fd9\u6837\u7684\u4e00\u6bb5\u4ee3\u7801\uff0c\u5c3d\u7ba1\u770b\u7740\u201c\u521d\u7ea7\u201d\uff0c\u4f46\u6301\u4e45\u5c42\u6846\u67b6\u5b9e\u9645\u4e0a\u5e2e\u6211\u4eec\u505a\u7684\u4e3b\u8981\u4e8b\u60c5\u4e5f\u5c31\u8fd9\u6837\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class StorageService {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @GlobalTransactional\n    public void batchUpdate() throws SQLException {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        try {\n            connection = dataSource.getConnection();\n            connection.setAutoCommit(false);\n            String sql = "update storage_tbl set count = ?" +\n                "    where id = ? and commodity_code = ?";\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setInt(1, 100);\n            preparedStatement.setLong(2, 1);\n            preparedStatement.setString(3, "2001");\n            preparedStatement.executeUpdate();\n            connection.commit();\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            IOutils.close(preparedStatement);\n            IOutils.close(connection);\n        }\n    }\n\n}\n')),(0,o.kt)("h2",{id:"\u4ece\u4ee3\u7406\u6570\u636e\u6e90\u8bf4\u8d77"},"\u4ece\u4ee3\u7406\u6570\u636e\u6e90\u8bf4\u8d77"),(0,o.kt)("p",null,"\u4f7f\u7528AT\u6a21\u5f0f\uff0c\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u4fbf\u662f\u4ee3\u7406\u6570\u636e\u6e90\uff0c\u90a3\u4e48\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"DataSourceProxy"),"\u4ee3\u7406\u6570\u636e\u6e90\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f"),(0,o.kt)("p",null,"DataSourceProxy\u80fd\u5e2e\u52a9\u6211\u4eec\u83b7\u5f97\u51e0\u4e2a\u91cd\u8981\u7684\u4ee3\u7406\u5bf9\u8c61"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"DataSourceProxy.getConnection()"),"\u83b7\u5f97",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionProxy"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionProxy.prepareStatement(...)"),"\u83b7\u5f97",(0,o.kt)("inlineCode",{parentName:"p"},"StatementProxy")))),(0,o.kt)("p",null,"Seata\u7684\u5982\u4f55\u5b9e\u73b0\u4e8b\u52a1\u9694\u79bb\uff0c\u5c31\u85cf\u5728\u8fd92\u4e2aProxy\u4e2d\uff0c\u6211\u5148\u6982\u8ff0\u4e0b\u5b9e\u73b0\u903b\u8f91\u3002"),(0,o.kt)("h3",{id:"statementproxyexecutexxx\u7684\u5904\u7406\u903b\u8f91"},(0,o.kt)("strong",{parentName:"h3"},(0,o.kt)("inlineCode",{parentName:"strong"},"StatementProxy.executeXXX()"),"\u7684\u5904\u7406\u903b\u8f91")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5f53\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"io.seata.rm.datasource.StatementProxy.executeXXX()"),"\u4f1a\u5c06sql\u4ea4\u7ed9",(0,o.kt)("inlineCode",{parentName:"p"},"io.seata.rm.datasource.exec.ExecuteTemplate.execute(...)"),"\u5904\u7406\u3002"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ExecuteTemplate.execute(...)"),"\u65b9\u6cd5\u4e2d\uff0cSeata\u6839\u636e\u4e0d\u540cdbType\u548csql\u8bed\u53e5\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684Executer\uff0c\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"io.seata.rm.datasource.exec.Executer"),"\u7c7b\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"execute(Object... args)"),"\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u9009\u4e86DML\u7c7b\u578bExecuter\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u67e5\u8be2\u524d\u955c\u50cf\uff08select for update\uff0c\u56e0\u6b64\u6b64\u65f6\u83b7\u5f97\u672c\u5730\u9501\uff09"),(0,o.kt)("li",{parentName:"ul"},"\u6267\u884c\u4e1a\u52a1sql"),(0,o.kt)("li",{parentName:"ul"},"\u67e5\u8be2\u540e\u955c\u50cf"),(0,o.kt)("li",{parentName:"ul"},"\u51c6\u5907undoLog"))),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u4f60\u7684sql\u662fselect for update\u5219\u4f1a\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"SelectForUpdateExecutor"),"\uff08Seata\u4ee3\u7406\u4e86select for update\uff09\uff0c\u4ee3\u7406\u540e\u5904\u7406\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u5148\u6267\u884c select for update\uff08\u83b7\u53d6\u6570\u636e\u5e93\u672c\u5730\u9501\uff09"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u5904\u4e8e",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalTransactional")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalLock"),"\uff0c",(0,o.kt)("strong",{parentName:"li"},"\u68c0\u67e5"),"\u662f\u5426\u6709\u5168\u5c40\u9501"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\u5168\u5c40\u9501\uff0c\u5219\u672a\u5f00\u542f\u672c\u5730\u4e8b\u52a1\u4e0b\u4f1arollback\u672c\u5730\u4e8b\u52a1,\u518d\u91cd\u65b0\u4e89\u62a2\u672c\u5730\u9501\u548c\u5168\u5c40\u9501,\u4ee5\u6b64\u7c7b\u63a8,\u9664\u975e\u62ff\u5230\u5168\u5c40\u9501")))))),(0,o.kt)("h3",{id:"connectionproxycommit\u7684\u5904\u7406\u903b\u8f91"},(0,o.kt)("strong",{parentName:"h3"},(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionProxy.commit()"),"\u7684\u5904\u7406\u903b\u8f91")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5904\u4e8e\u5168\u5c40\u4e8b\u52a1\u4e2d\uff08\u5373\uff0c\u6570\u636e\u6301\u4e45\u5316\u65b9\u6cd5\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalTransactional"),"\uff09",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u6ce8\u518c\u5206\u652f\u4e8b\u52a1\uff0c\u83b7\u53d6\u5168\u5c40\u9501"),(0,o.kt)("li",{parentName:"ul"},"undoLog\u6570\u636e\u5165\u5e93"),(0,o.kt)("li",{parentName:"ul"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1"))),(0,o.kt)("li",{parentName:"ul"},"\u5904\u4e8e",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalLock"),"\u4e2d\uff08\u5373\uff0c\u6570\u636e\u6301\u4e45\u5316\u65b9\u6cd5\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalLock"),"\uff09",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u5411tc\u67e5\u8be2\u662f\u5426\u6709\u5168\u5c40\u9501\u5b58\u5728\uff0c\u5982\u5b58\u5728\uff0c\u5219\u629b\u51fa\u5f02\u5e38"),(0,o.kt)("li",{parentName:"ul"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1"))),(0,o.kt)("li",{parentName:"ul"},"\u9664\u4e86\u4ee5\u4e0a\u60c5\u51b5\uff08",(0,o.kt)("inlineCode",{parentName:"li"},"else"),"\u5206\u652f\uff09",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1")))),(0,o.kt)("h3",{id:"globaltransactional\u7684\u4f5c\u7528"},(0,o.kt)("strong",{parentName:"h3"},"@GlobalTransactional\u7684\u4f5c\u7528")),(0,o.kt)("p",null,"\u6807\u8bc6\u4e00\u4e2a\u5168\u5c40\u4e8b\u52a1"),(0,o.kt)("h3",{id:"globallock--select-for-update\u7684\u4f5c\u7528"},(0,o.kt)("strong",{parentName:"h3"},"@GlobalLock + select for update\u7684\u4f5c\u7528")),(0,o.kt)("p",null,"\u5982\u679c\u50cf",(0,o.kt)("inlineCode",{parentName:"p"},"updateA()"),"\u65b9\u6cd5\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalLock + select for update"),"\uff0cSeata\u5728\u5904\u7406\u65f6\uff0c\u4f1a\u5148\u83b7\u53d6\u6570\u636e\u5e93\u672c\u5730\u9501\uff0c\u7136\u540e\u67e5\u8be2\u8be5\u8bb0\u5f55\u662f\u5426\u6709\u5168\u5c40\u9501\u5b58\u5728\uff0c\u82e5\u6709\uff0c\u5219\u629b\u51faLockConflictException\u3002"),(0,o.kt)("h2",{id:"\u5148\u4e3e\u4e00\u4e2a\u810f\u5199\u7684\u4f8b\u5b50\u518d\u6765\u770bseata\u5982\u4f55\u9632\u6b62\u810f\u5199"},"\u5148\u4e3e\u4e00\u4e2a\u810f\u5199\u7684\u4f8b\u5b50\uff0c\u518d\u6765\u770bSeata\u5982\u4f55\u9632\u6b62\u810f\u5199"),(0,o.kt)("p",null,"\u5047\u8bbe\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateAll()"),"\u7528\u6765\u540c\u65f6\u66f4\u65b0A\u548cB\u8868\u8bb0\u5f55\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"updateA()")," ",(0,o.kt)("inlineCode",{parentName:"li"},"updateB()"),"\u5219\u5206\u522b\u66f4\u65b0A\u3001B\u8868\u8bb0\u5f55"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateAll()"),"\u5df2\u7ecf\u52a0\u4e0a\u4e86",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalTransactional"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class YourBussinessService {\n\n    DbServiceA serviceA;\n    DbServiceB serviceB;\n\n    @GlobalTransactional\n    public boolean updateAll(DTO dto) {\n        serviceA.update(dto.getA());\n        serviceB.update(dto.getB());\n    }\n\n    public boolean updateA(DTO dto) {\n        serviceA.update(dto.getA());\n    }\n\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class DbServiceA {\n    @Transactional\n    public boolean update(A a) {\n    \n    }\n}\n\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"dirty-write",src:t(48125).Z,width:"1964",height:"1946"}),"\n|"),(0,o.kt)("h2",{id:"\u600e\u4e48\u7528seata\u9632\u6b62\u810f\u5199"},(0,o.kt)("strong",{parentName:"h2"},"\u600e\u4e48\u7528Seata\u9632\u6b62\u810f\u5199\uff1f")),(0,o.kt)("h3",{id:"\u529e\u6cd5\u4e00updatea\u4e5f\u52a0\u4e0aglobaltransactional\u6b64\u65f6seata\u4f1a\u5982\u4f55\u4fdd\u8bc1\u4e8b\u52a1\u9694\u79bb"},"\u529e\u6cd5\u4e00\uff1a",(0,o.kt)("inlineCode",{parentName:"h3"},"updateA()"),"\u4e5f\u52a0\u4e0a",(0,o.kt)("inlineCode",{parentName:"h3"},"@GlobalTransactional"),"\uff0c\u6b64\u65f6Seata\u4f1a\u5982\u4f55\u4fdd\u8bc1\u4e8b\u52a1\u9694\u79bb\uff1f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class DbServiceA {\n\n    @GlobalTransactional\n    @Transactional\n    public boolean updateA(DTO dto) {\n\n        serviceA.update(dto.getA());\n\n    }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateAll()"),"\u5148\u88ab\u8c03\u7528\uff08\u672a\u5b8c\u6210\uff09\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"updateA()"),"\u540e\u88ab\u8c03\u7528")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"dirty-write",src:t(82311).Z,width:"2236",height:"1932"})),(0,o.kt)("h3",{id:"\u529e\u6cd5\u4e8c-globallock--select-for-update"},"\u529e\u6cd5\u4e8c\uff1a ",(0,o.kt)("strong",{parentName:"h3"},"@GlobalLock + select for update")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class DbServiceA {\n    \n    @GlobalLock\n    @Transactional\n    public boolean updateA(DTO dto) {\n\n        serviceA.selectForUpdate(dto.getA());\n\n        serviceA.update(dto.getA());\n\n    }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateAll()"),"\u5148\u88ab\u8c03\u7528\uff08\u672a\u5b8c\u6210\uff09\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"updateA()"),"\u540e\u88ab\u8c03\u7528\n",(0,o.kt)("img",{alt:"dirty-write",src:t(55208).Z,width:"2860",height:"1830"}))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u90a3\u5982\u679c\u662f",(0,o.kt)("inlineCode",{parentName:"li"},"updateA()"),"\u5148\u88ab\u8c03\u7528\uff08\u672a\u5b8c\u6210\uff09\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"updateAll()"),"\u540e\u88ab\u8c03\u7528\u5462\uff1f",(0,o.kt)("br",{parentName:"li"}),"\u7531\u4e8e2\u4e2a\u4e1a\u52a1\u90fd\u662f\u8981\u5148\u83b7\u5f97\u672c\u5730\u9501\uff0c\u56e0\u6b64\u540c\u6837\u4e0d\u4f1a\u53d1\u751f\u810f\u5199"),(0,o.kt)("li",{parentName:"ul"},"\u4e00\u5b9a\u6709\u4eba\u4f1a\u95ee\uff0c\u201c\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u52a0\u4e0aselect for update? \u53ea\u7528@GlobalLock\u80fd\u4e0d\u80fd\u9632\u6b62\u810f\u5199\uff1f\u201d\n\u80fd\u3002\u4f46\u8bf7\u518d\u56de\u770b\u4e0b\u4e0a\u9762\u7684\u56fe\uff0cselect for update\u80fd\u5e26\u6765\u8fd9\u4e48\u51e0\u4e2a\u597d\u5904\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u9501\u51b2\u7a81\u66f4\u201c\u6e29\u67d4\u201d\u4e9b\u3002\u5982\u679c\u53ea\u6709@GlobalLock\uff0c\u68c0\u67e5\u5230\u5168\u5c40\u9501\uff0c\u5219\u7acb\u523b\u629b\u51fa\u5f02\u5e38\uff0c\u4e5f\u8bb8\u518d\u201c\u575a\u6301\u201d\u90a3\u4e48\u4e00\u4e0b\uff0c\u5168\u5c40\u9501\u5c31\u91ca\u653e\u4e86\uff0c\u629b\u51fa\u5f02\u5e38\u5c82\u4e0d\u53ef\u60dc\u4e86\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5728",(0,o.kt)("inlineCode",{parentName:"li"},"updateA()"),"\u4e2d\u53ef\u4ee5\u901a\u8fc7select for update\u83b7\u5f97\u6700\u65b0\u7684A\uff0c\u63a5\u7740\u518d\u505a\u66f4\u65b0\u3002")))),(0,o.kt)("h2",{id:"\u5982\u4f55\u9632\u6b62\u810f\u8bfb"},(0,o.kt)("strong",{parentName:"h2"},"\u5982\u4f55\u9632\u6b62\u810f\u8bfb\uff1f")),(0,o.kt)("h3",{id:"\u573a\u666f---\u67d0\u4e1a\u52a1\u5148\u8c03\u7528updateallupdateall\u672a\u6267\u884c\u5b8c\u6210\u53e6\u4e00\u4e1a\u52a1\u540e\u8c03\u7528querya"},"\u573a\u666f\uff1a   \u67d0\u4e1a\u52a1\u5148\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"h3"},"updateAll()"),"\uff0c",(0,o.kt)("inlineCode",{parentName:"h3"},"updateAll()"),"\u672a\u6267\u884c\u5b8c\u6210\uff0c\u53e6\u4e00\u4e1a\u52a1\u540e\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"h3"},"queryA()")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"dirty-write",src:t(37034).Z,width:"2860",height:"1830"})),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"\u6e90\u7801\u5c55\u793a"},(0,o.kt)("strong",{parentName:"h1"},"\u6e90\u7801\u5c55\u793a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class StorageService {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @GlobalTransactional\n    public void update() throws SQLException {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        try {\n            connection = dataSource.getConnection();\n            connection.setAutoCommit(false);\n            String sql = "update storage_tbl set count = ?" +\n                "    where id = ? and commodity_code = ?";\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setInt(1, 100);\n            preparedStatement.setLong(2, 1);\n            preparedStatement.setString(3, "2001");\n            preparedStatement.execute();\n            connection.commit();\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            IOutils.close(preparedStatement);\n            IOutils.close(connection);\n        }\n    }\n\n}\n')),(0,o.kt)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u867d\u7136\u770b\u7740\u5f88\u521d\u7ea7\uff0c\u6ca1\u6709\u4f7f\u7528\u6301\u4e45\u5c42\u6846\u67b6\uff0c\u4f46\u5982\u679c\u5c06\u6846\u67b6\u5e2e\u6211\u4eec\u505a\u7684\u4e8b\u60c5\u62bd\u8c61\u51fa\u6765\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u7b80\u5355\u8bf4\u660e\u63a5\u4e0b\u6765\u6e90\u7801\u4ecb\u7ecd\u7684\u8109\u7edc\uff08\u4e3b\u8981\u5173\u6ce8\u548c\u4e8b\u52a1\u9694\u79bb\u6709\u5173\u7684\u6e90\u7801\uff09")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u4ee3\u7406\u6570\u636e\u6e90\u7684\u7528\u9014",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DataSourceProxy"),"\u7684\u4f5c\u7528\uff08\u8fd4\u56de",(0,o.kt)("inlineCode",{parentName:"li"},"ConnectionProxy"),"\uff09",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u4ecb\u7ecd ",(0,o.kt)("inlineCode",{parentName:"li"},"ConnectionProxy"),"\u7684\u4e00\u4e2a\u5c0f\u529f\u80fd\uff08\u5b58\u653eundolog\uff09"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConnectionProxy"),"\u7684\u4f5c\u7528\uff08\u8fd4\u56de",(0,o.kt)("inlineCode",{parentName:"li"},"StatementProxy"),"\uff09"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"StatementProxy.execute()"),"\u7684\u5904\u7406\u903b\u8f91",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"io.seata.rm.datasource.exec.UpdateExecutor"),"\u7684\u6267\u884c\u903b\u8f91\uff08\u67e5\u524d\u955c\u50cf\u3001\u6267\u884csql\u3001\u67e5\u540e\u955c\u50cf\u3001\u51c6\u5907undoLog\uff09"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SelectForUpdateExecutor"),"\u7684\u6267\u884c\u903b\u8f91\uff08\u6323\u672c\u5730\u9501\uff0c\u67e5\u5168\u5c40\u9501\u3002\u6709\u5168\u5c40\u9501\uff0c\u56de\u6eda\uff0c\u518d\u4e89...\uff09"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConnectionProxy.commit()"),"\u7684\u5904\u7406\u903b\u8f91\uff08\u6ce8\u518c\u5206\u652f\u4e8b\u52a1\uff08\u4e89\u5168\u5c40\u9501\uff09\uff0c\u5199\u5165undoLog\uff0c\u6570\u636e\u5e93\u63d0\u4ea4\uff09"))),(0,o.kt)("li",{parentName:"ul"},"\u4ecb\u7ecdRootContext"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GlobalTransactionalInterceptor"),"\u7684\u4e0d\u540c\u4ee3\u7406\u903b\u8f91",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalTransactional"),"\u5982\u4f55\u5904\u7406"),(0,o.kt)("li",{parentName:"ul"},"\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"li"},"@GlobalLock"),"\u5982\u4f55\u5904\u7406")))),(0,o.kt)("h2",{id:"datasourceproxy\u7684\u4f5c\u7528"},(0,o.kt)("strong",{parentName:"h2"},"DataSourceProxy\u7684\u4f5c\u7528")),(0,o.kt)("p",null,"DataSourceProxy\u5e2e\u52a9\u6211\u4eec\u83b7\u5f97\u51e0\u4e2a\u91cd\u8981\u7684\u4ee3\u7406\u5bf9\u8c61"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"DataSourceProxy.getConnection()"),"\u83b7\u5f97",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionProxy")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource;\n\nimport java.sql.Connection;\n\npublic class DataSourceProxy extends AbstractDataSourceProxy implements Resource {\n    \n    @Override\n    public ConnectionProxy getConnection() throws SQLException {\n        Connection targetConnection = targetDataSource.getConnection();\n        return new ConnectionProxy(this, targetConnection);\n    }\n}\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u73b0\u5728\u5148\u4ecb\u7ecd\u4e0b",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionProxy"),"\u4e2d\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionContext"),"\uff0c\u5b83\u7684\u6709\u4e00\u4e2a\u529f\u80fd\u662f",(0,o.kt)("strong",{parentName:"p"},"\u5b58\u653eundoLog"),"\u3002"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource;\n\nimport io.seata.rm.datasource.undo.SQLUndoLog;\n\npublic class ConnectionProxy extends AbstractConnectionProxy {\n\n    private ConnectionContext context = new ConnectionContext();\n\n    public void appendUndoLog(SQLUndoLog sqlUndoLog) {\n        context.appendUndoItem(sqlUndoLog);\n    }\n\n}\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package io.seata.rm.datasource;\n\npublic class ConnectionContext {\n\n    private static final Savepoint DEFAULT_SAVEPOINT = new Savepoint() {\n        @Override\n        public int getSavepointId() throws SQLException {\n            return 0;\n        }\n\n        @Override\n        public String getSavepointName() throws SQLException {\n            return "DEFAULT_SEATA_SAVEPOINT";\n        }\n    };\n    \n    private final Map<Savepoint, List<SQLUndoLog>> sqlUndoItemsBuffer = new LinkedHashMap<>();\n\n    private Savepoint currentSavepoint = DEFAULT_SAVEPOINT;\n\n    void appendUndoItem(SQLUndoLog sqlUndoLog) {\n        sqlUndoItemsBuffer.computeIfAbsent(currentSavepoint, k -> new ArrayList<>()).add(sqlUndoLog);\n    }\n\n}\n\n')))))),(0,o.kt)("h2",{id:"\u901a\u8fc7connectionproxypreparestatement\u83b7\u5f97statementproxy"},(0,o.kt)("strong",{parentName:"h2"},"\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionProxy.prepareStatement(...)"),"\u83b7\u5f97",(0,o.kt)("inlineCode",{parentName:"strong"},"StatementProxy"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource;\n\npublic class ConnectionProxy extends AbstractConnectionProxy {\n\n    public ConnectionProxy(DataSourceProxy dataSourceProxy, Connection targetConnection) {\n        super(dataSourceProxy, targetConnection);\n    }\n\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource;\n\nimport java.sql.Connection;\n\npublic abstract class AbstractConnectionProxy implements Connection {\n\n    protected Connection targetConnection;\n\n    public AbstractConnectionProxy(DataSourceProxy dataSourceProxy, Connection targetConnection) {\n        this.dataSourceProxy = dataSourceProxy;\n        this.targetConnection = targetConnection;\n    }\n\n    @Override\n    public PreparedStatement prepareStatement(String sql) throws SQLException {\n        String dbType = getDbType();\n        // support oracle 10.2+\n        PreparedStatement targetPreparedStatement = null;\n        if (BranchType.AT == RootContext.getBranchType()) { //\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u4f1a\u8fd4\u56deAT\uff1f\n            List<SQLRecognizer> sqlRecognizers = SQLVisitorFactory.get(sql, dbType);\n            if (sqlRecognizers != null && sqlRecognizers.size() == 1) {\n                SQLRecognizer sqlRecognizer = sqlRecognizers.get(0);\n                if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {\n                    TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(dbType).getTableMeta(getTargetConnection(),\n                            sqlRecognizer.getTableName(), getDataSourceProxy().getResourceId());\n                    String[] pkNameArray = new String[tableMeta.getPrimaryKeyOnlyName().size()];\n                    tableMeta.getPrimaryKeyOnlyName().toArray(pkNameArray);\n                    // \u5982\u679c\u662finsert\u8bed\u53e5\uff0c\u8fd9\u91cc\u521b\u5efa\u7684PreparedStatement\u9700\u8981\u53ef\u4ee5\u8fd4\u56de\u81ea\u52a8\u751f\u6210\u7684\u4e3b\u952e\uff0c\u56e0\u6b64\u4f7f\u7528\u8fd9\u4e2aprepareStatement()\n                    targetPreparedStatement = getTargetConnection().prepareStatement(sql,pkNameArray);\n\n                }\n            }\n        }\n        if (targetPreparedStatement == null) {\n            targetPreparedStatement = getTargetConnection().prepareStatement(sql);\n        }\n        return new PreparedStatementProxy(this, targetPreparedStatement, sql);\n    }\n\n\n    public Connection getTargetConnection() {\n        return targetConnection;\n    }\n\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u5148\u5728\u8fd9\u6253\u4e0b\u4e2a\u7591\u95ee\uff0c\u540e\u8fb9\u89e3\u91ca\u3002",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"RootContext.getBranchType()"),"\u7684\u8fd4\u56de\u503c\u600e\u4e48\u4f1a\u662fAT\uff1f"))),(0,o.kt)("h2",{id:"statementproxyexecute\u7684\u5904\u7406\u903b\u8f91"},(0,o.kt)("strong",{parentName:"h2"},(0,o.kt)("inlineCode",{parentName:"strong"},"StatementProxy.execute()"),"\u7684\u5904\u7406\u903b\u8f91")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5f53\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"io.seata.rm.datasource.StatementProxy.execute()"),"\u4f1a\u5c06sql\u4ea4\u7ed9",(0,o.kt)("inlineCode",{parentName:"p"},"io.seata.rm.datasource.exec.ExecuteTemplate.execute(...)"),"\u5904\u7406\u3002"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource;\n\npublic class PreparedStatementProxy extends AbstractPreparedStatementProxy\n    implements PreparedStatement, ParametersHolder {\n\n    @Override\n    public boolean execute() throws SQLException {\n        return ExecuteTemplate.execute(this, (statement, args) -> statement.execute());\n    }\n\n}\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ExecuteTemplate.execute(...)"),"\u65b9\u6cd5\u4e2d\uff0cSeata\u6839\u636e\u4e0d\u540cdbType\u548csql\u8bed\u53e5\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684Executer\uff0c\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"io.seata.rm.datasource.exec.Executer"),"\u7c7b\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"execute(Object... args)"),"\u3002",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource.exec;\n")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    public class ExecuteTemplate {\n\n        public static <T, S extends Statement> T execute(StatementProxy<S> statementProxy,\n                                                 StatementCallback<T, S> statementCallback,\n                                                 Object... args) throws SQLException {\n            return execute(null, statementProxy, statementCallback, args);\n        }\n\n        public static <T, S extends Statement> T execute(List<SQLRecognizer> sqlRecognizers,\n                                             StatementProxy<S> statementProxy,\n                                             StatementCallback<T, S> statementCallback,\n                                             Object... args) throws SQLException {\n            if (!RootContext.requireGlobalLock() && BranchType.AT != RootContext.getBranchType()) {\n                // Just work as original statement\n                return statementCallback.execute(statementProxy.getTargetStatement(), args);\n            }\n\n            String dbType = statementProxy.getConnectionProxy().getDbType();\n            if (CollectionUtils.isEmpty(sqlRecognizers)) {\n                sqlRecognizers = SQLVisitorFactory.get(\n                        statementProxy.getTargetSQL(),\n                        dbType);\n            }\n            Executor<T> executor;\n            if (CollectionUtils.isEmpty(sqlRecognizers)) {\n                executor = new PlainExecutor<>(statementProxy, statementCallback);\n            } else {\n                if (sqlRecognizers.size() == 1) {\n                    SQLRecognizer sqlRecognizer = sqlRecognizers.get(0);\n                    switch (sqlRecognizer.getSQLType()) {\n                        case INSERT:\n                            executor = EnhancedServiceLoader.load(InsertExecutor.class, dbType,\n                                    new Class[]{StatementProxy.class, StatementCallback.class, SQLRecognizer.class},\n                                    new Object[]{statementProxy, statementCallback, sqlRecognizer});\n                            break;\n                        case UPDATE:\n                            executor = new UpdateExecutor<>(statementProxy, statementCallback, sqlRecognizer);\n                            break;\n                        case DELETE:\n                            executor = new DeleteExecutor<>(statementProxy, statementCallback, sqlRecognizer);\n                            break;\n                        case SELECT_FOR_UPDATE:\n                            executor = new SelectForUpdateExecutor<>(statementProxy, statementCallback, sqlRecognizer);\n                            break;\n                        default:\n                            executor = new PlainExecutor<>(statementProxy, statementCallback);\n                            break;\n                    }\n                } else {\n                    executor = new MultiExecutor<>(statementProxy, statementCallback, sqlRecognizers);\n                }\n            }\n            T rs;\n            try {\n                rs = executor.execute(args);\n            } catch (Throwable ex) {\n                if (!(ex instanceof SQLException)) {\n                    // Turn other exception into SQLException\n                    ex = new SQLException(ex);\n                }\n                throw (SQLException) ex;\n            }\n            return rs;\n        }\n\n    }\n    ```\n    >\n    > \u4e5f\u5728\u8fd9\u6253\u4e0b\u4e2a\u7591\u95ee\uff0c\u540e\u8fb9\u89e3\u91ca\u3002  \n    > **`RootContext.requireGlobalLock()`\u600e\u4e48\u5224\u65ad\u5f53\u524d\u662f\u5426\u9700\u8981\u5168\u5c40\u9501\uff1f**\n    >\n    \u5148\u4ee5`io.seata.rm.datasource.exec.UpdateExecutor`\u4e3e\u4f8b\uff0c`UpdateExecutor` extends `AbstractDMLBaseExecutor` extends `BaseTransactionalExecutor`\u3002\n    \u89c2\u5bdf`execute()`\u65b9\u6cd5\u7684\u505a\u4e86\u4ec0\u4e48\n\n    ```java\n    package io.seata.rm.datasource.exec;\n\n    public abstract class BaseTransactionalExecutor<T, S extends Statement> implements Executor<T> {\n        \n\n        protected StatementProxy<S> statementProxy;\n\n        protected StatementCallback<T, S> statementCallback;\n\n        protected SQLRecognizer sqlRecognizer;\n\n        public BaseTransactionalExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback,\n            SQLRecognizer sqlRecognizer) {\n            this.statementProxy = statementProxy;\n            this.statementCallback = statementCallback;\n            this.sqlRecognizer = sqlRecognizer;\n        }\n\n        @Override\n        public T execute(Object... args) throws Throwable {\n            String xid = RootContext.getXID();\n            if (xid != null) {\n                statementProxy.getConnectionProxy().bind(xid);\n            }\n\n            statementProxy.getConnectionProxy().setGlobalLockRequire(RootContext.requireGlobalLock());\n            return doExecute(args);\n        }\n\n    }\n    ```\n    ```java\n    public abstract class AbstractDMLBaseExecutor<T, S extends Statement> extends BaseTransactionalExecutor<T, S> {\n        \n        public AbstractDMLBaseExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback,\n                               SQLRecognizer sqlRecognizer) {\n            super(statementProxy, statementCallback, sqlRecognizer);\n        }\n\n        @Override\n        public T doExecute(Object... args) throws Throwable {\n            AbstractConnectionProxy connectionProxy = statementProxy.getConnectionProxy();\n            if (connectionProxy.getAutoCommit()) {\n                return executeAutoCommitTrue(args);\n            } else {\n                return executeAutoCommitFalse(args);\n            }\n        }\n\n        protected T executeAutoCommitTrue(Object[] args) throws Throwable {\n            ConnectionProxy connectionProxy = statementProxy.getConnectionProxy();\n            try {\n                connectionProxy.changeAutoCommit(); // \u6ce8\u610f\uff0c\u4f60\u5982\u679c\u6ca1\u5f00\u542f\u4e8b\u52a1\uff0cseata\u5e2e\u4f60\u5f00\u542f\n                return new LockRetryPolicy(connectionProxy).execute(() -> {\n                    T result = executeAutoCommitFalse(args);\n                    connectionProxy.commit(); // \u5e2e\u4f60\u5f00\u542f\u4e8b\u52a1\u540e\uff0c\u901a\u8fc7connectionProxy\u6765\u63d0\u4ea4\n                    return result;\n                });\n            } catch (Exception e) {\n                // when exception occur in finally,this exception will lost, so just print it here\n                LOGGER.error("execute executeAutoCommitTrue error:{}", e.getMessage(), e);\n                if (!LockRetryPolicy.isLockRetryPolicyBranchRollbackOnConflict()) {\n                    connectionProxy.getTargetConnection().rollback();\n                }\n                throw e;\n            } finally {\n                connectionProxy.getContext().reset();\n                connectionProxy.setAutoCommit(true);\n            }\n        }\n\n        protected T executeAutoCommitFalse(Object[] args) throws Exception {\n            if (!JdbcConstants.MYSQL.equalsIgnoreCase(getDbType()) && isMultiPk()) {\n                throw new NotSupportYetException("multi pk only support mysql!");\n            }\n            TableRecords beforeImage = beforeImage();\n            T result = statementCallback.execute(statementProxy.getTargetStatement(), args);\n            TableRecords afterImage = afterImage(beforeImage);\n            prepareUndoLog(beforeImage, afterImage);\n            return result;\n        }\n    }\n    ```\n    ```java\n    package io.seata.rm.datasource.exec;\n\n    public class UpdateExecutor<T, S extends Statement> extends AbstractDMLBaseExecutor<T, S> {\n        \n        public UpdateExecutor(StatementProxy<S> statementProxy, StatementCallback<T, S> statementCallback,\n                            SQLRecognizer sqlRecognizer) {\n            super(statementProxy, statementCallback, sqlRecognizer);\n        }\n\n    }\n\n    ```\n- \u5982\u679c\u9009\u4e86DML\u7c7b\u578bExecuter\uff0c\u53ef\u4ee5\u5728\u4e0a\u9762\u7684executeAutoCommitFalse()\u4e2d\u770b\u5230\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff1a\n    - \u67e5\u8be2\u524d\u955c\u50cf\uff08select for update\uff0c\u56e0\u6b64\u6b64\u65f6\u83b7\u5f97\u672c\u5730\u9501\uff09\n        ```java\n        package io.seata.rm.datasource.exec;\n\n        public class UpdateExecutor<T, S extends Statement> extends AbstractDMLBaseExecutor<T, S> {\n            \n            private static final boolean ONLY_CARE_UPDATE_COLUMNS = CONFIG.getBoolean(\n                    ConfigurationKeys.TRANSACTION_UNDO_ONLY_CARE_UPDATE_COLUMNS, DefaultValues.DEFAULT_ONLY_CARE_UPDATE_COLUMNS); // \u9ed8\u8ba4\u4e3atrue\n\n            @Override\n            protected TableRecords beforeImage() throws SQLException {\n                ArrayList<List<Object>> paramAppenderList = new ArrayList<>();\n                TableMeta tmeta = getTableMeta();\n                String selectSQL = buildBeforeImageSQL(tmeta, paramAppenderList);\n                // SELECT id, count FROM storage_tbl WHERE id = ? FOR UPDATE\n                return buildTableRecords(tmeta, selectSQL, paramAppenderList);\n            }\n\n            private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {\n                SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer) sqlRecognizer;\n                List<String> updateColumns = recognizer.getUpdateColumns();\n                StringBuilder prefix = new StringBuilder("SELECT ");\n                StringBuilder suffix = new StringBuilder(" FROM ").append(getFromTableInSQL());\n                String whereCondition = buildWhereCondition(recognizer, paramAppenderList);\n                if (StringUtils.isNotBlank(whereCondition)) {\n                    suffix.append(WHERE).append(whereCondition);\n                }\n                String orderBy = recognizer.getOrderBy();\n                if (StringUtils.isNotBlank(orderBy)) {\n                    suffix.append(orderBy);\n                }\n                ParametersHolder parametersHolder = statementProxy instanceof ParametersHolder ? (ParametersHolder)statementProxy : null;\n                String limit = recognizer.getLimit(parametersHolder, paramAppenderList);\n                if (StringUtils.isNotBlank(limit)) {\n                    suffix.append(limit);\n                }\n                suffix.append(" FOR UPDATE");\n                StringJoiner selectSQLJoin = new StringJoiner(", ", prefix.toString(), suffix.toString());\n                if (ONLY_CARE_UPDATE_COLUMNS) {\n                    if (!containsPK(updateColumns)) {// \u5982\u679c\u672c\u6b21\u66f4\u65b0\u7684\u884c\u4e0d\u5305\u542b\u4e3b\u952e\uff0c\u90a3select for update\u7684\u65f6\u5019\u52a0\u4e0a\u4e3b\u952e\n                        selectSQLJoin.add(getColumnNamesInSQL(tableMeta.getEscapePkNameList(getDbType())));\n                    }\n                    for (String columnName : updateColumns) {\n                        selectSQLJoin.add(columnName);\n                    }\n                } else {\n                    for (String columnName : tableMeta.getAllColumns().keySet()) {\n                        selectSQLJoin.add(ColumnUtils.addEscape(columnName, getDbType()));\n                    }\n                }\n                return selectSQLJoin.toString();\n            }\n\n\n            protected TableRecords buildTableRecords(TableMeta tableMeta, String selectSQL, ArrayList<List<Object>> paramAppenderList) throws SQLException {\n                ResultSet rs = null;\n                try (PreparedStatement ps = statementProxy.getConnection().prepareStatement(selectSQL)) { // \u6267\u884cselect for update\uff0c\u7136\u540e\u5c31\u62ff\u5230\u4e86\u672c\u5730\u9501\n                    if (CollectionUtils.isNotEmpty(paramAppenderList)) {\n                        for (int i = 0, ts = paramAppenderList.size(); i < ts; i++) {\n                            List<Object> paramAppender = paramAppenderList.get(i);\n                            for (int j = 0, ds = paramAppender.size(); j < ds; j++) {\n                                ps.setObject(i * ds + j + 1, paramAppender.get(j));\n                            }\n                        }\n                    }\n                    rs = ps.executeQuery();\n                    return TableRecords.buildRecords(tableMeta, rs);\n                } finally {\n                    IOUtil.close(rs);\n                }\n            }\n        }\n\n        ```\n\n    - \u6267\u884c\u4e1a\u52a1sql\n    - \u67e5\u8be2\u540e\u955c\u50cf\n      ```java\n        package io.seata.rm.datasource.exec;\n\n        public class UpdateExecutor<T, S extends Statement> extends AbstractDMLBaseExecutor<T, S> {\n            \n            @Override\n            protected TableRecords afterImage(TableRecords beforeImage) throws SQLException {\n                TableMeta tmeta = getTableMeta();\n                if (beforeImage == null || beforeImage.size() == 0) {\n                    return TableRecords.empty(getTableMeta());\n                }\n                String selectSQL = buildAfterImageSQL(tmeta, beforeImage);\n                //SELECT id, count FROM storage_tbl WHERE (id) in ( (?) )\n                ResultSet rs = null;\n                try (PreparedStatement pst = statementProxy.getConnection().prepareStatement(selectSQL)) {\n                    SqlGenerateUtils.setParamForPk(beforeImage.pkRows(), getTableMeta().getPrimaryKeyOnlyName(), pst);\n                    rs = pst.executeQuery();\n                    return TableRecords.buildRecords(tmeta, rs);\n                } finally {\n                    IOUtil.close(rs);\n                }\n            }\n        }\n      ```\n    - \u51c6\u5907undoLog\n        ```java\n        public abstract class BaseTransactionalExecutor<T, S extends Statement> implements Executor<T> {\n            \n            protected void prepareUndoLog(TableRecords beforeImage, TableRecords afterImage) throws SQLException {\n                if (beforeImage.getRows().isEmpty() && afterImage.getRows().isEmpty()) {\n                    return;\n                }\n                if (SQLType.UPDATE == sqlRecognizer.getSQLType()) {\n                    if (beforeImage.getRows().size() != afterImage.getRows().size()) {\n                        throw new ShouldNeverHappenException("Before image size is not equaled to after image size, probably because you updated the primary keys.");\n                    }\n                }\n                ConnectionProxy connectionProxy = statementProxy.getConnectionProxy();\n\n                TableRecords lockKeyRecords = sqlRecognizer.getSQLType() == SQLType.DELETE ? beforeImage : afterImage;\n                String lockKeys = buildLockKey(lockKeyRecords);\n                if (null != lockKeys) {\n                    connectionProxy.appendLockKey(lockKeys);\n\n                    SQLUndoLog sqlUndoLog = buildUndoItem(beforeImage, afterImage);\n                    connectionProxy.appendUndoLog(sqlUndoLog); // \u628aundoLog\u5b58\u5230connectionProxy\u4e2d\uff0c\u5177\u4f53\u600e\u4e48\u56de\u4e8b\u4e0a\u9762\u6709\u63d0\u8fc7\n                }\n            }\n        }\n        ```\n  \n\n\n- \u5982\u679c\u4f60\u7684sql\u662fselect for update\u5219\u4f1a\u4f7f\u7528`SelectForUpdateExecutor`\uff08Seata\u4ee3\u7406\u4e86select for update\uff09\uff0c\u4ee3\u7406\u540e\u5904\u7406\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a\n    -  \u5148\u6267\u884c select for update\uff08\u83b7\u53d6\u6570\u636e\u5e93\u672c\u5730\u9501\uff09\n    -  \u5982\u679c\u5904\u4e8e`@GlobalTransactional` or `@GlobalLock`\uff0c**\u68c0\u67e5**\u662f\u5426\u6709\u5168\u5c40\u9501\n    -  \u5982\u679c\u6709\u5168\u5c40\u9501\uff0c\u5219\u672a\u5f00\u542f\u672c\u5730\u4e8b\u52a1\u4e0b\u4f1arollback\u672c\u5730\u4e8b\u52a1\uff0c\u518d\u91cd\u65b0\u4e89\u62a2\u672c\u5730\u9501\u548c\u67e5\u8be2\u5168\u5c40\u9501\uff0c\u76f4\u5230\u5168\u5c40\u9501\u91ca\u653e\n    ```java\n       package io.seata.rm.datasource.exec;\n\n       public class SelectForUpdateExecutor<T, S extends Statement> extends BaseTransactionalExecutor<T, S> {\n               @Override\n                public T doExecute(Object... args) throws Throwable {\n                    Connection conn = statementProxy.getConnection();\n                    DatabaseMetaData dbmd = conn.getMetaData();\n                    T rs;\n                    Savepoint sp = null;\n                    boolean originalAutoCommit = conn.getAutoCommit();\n                    try {\n                        if (originalAutoCommit) {\n                            /*\n                             * In order to hold the local db lock during global lock checking\n                             * set auto commit value to false first if original auto commit was true\n                             */\n                            conn.setAutoCommit(false);\n                        } else if (dbmd.supportsSavepoints()) {\n                            /*\n                             * In order to release the local db lock when global lock conflict\n                             * create a save point if original auto commit was false, then use the save point here to release db\n                             * lock during global lock checking if necessary\n                             */\n                            sp = conn.setSavepoint();\n                        } else {\n                            throw new SQLException("not support savepoint. please check your db version");\n                        }\n\n                        LockRetryController lockRetryController = new LockRetryController();\n                        ArrayList<List<Object>> paramAppenderList = new ArrayList<>();\n                        String selectPKSQL = buildSelectSQL(paramAppenderList);\n                        while (true) {\n                            try {\n                                // #870\n                                // execute return Boolean\n                                // executeQuery return ResultSet\n                                rs = statementCallback.execute(statementProxy.getTargetStatement(), args); //\u6267\u884c select for update\uff08\u83b7\u53d6\u6570\u636e\u5e93\u672c\u5730\u9501\uff09\n\n                                // Try to get global lock of those rows selected\n                                TableRecords selectPKRows = buildTableRecords(getTableMeta(), selectPKSQL, paramAppenderList);\n                                String lockKeys = buildLockKey(selectPKRows);\n                                if (StringUtils.isNullOrEmpty(lockKeys)) {\n                                    break;\n                                }\n\n                                if (RootContext.inGlobalTransaction() || RootContext.requireGlobalLock()) {\n                                    // Do the same thing under either @GlobalTransactional or @GlobalLock, \n                                    // that only check the global lock  here.\n                                    statementProxy.getConnectionProxy().checkLock(lockKeys);\n                                } else {\n                                    throw new RuntimeException("Unknown situation!");\n                                }\n                                break;\n                            } catch (LockConflictException lce) {\n                                if (sp != null) {\n                                    conn.rollback(sp);\n                                } else {\n                                    conn.rollback();// \u56de\u6eda\uff0c\u91ca\u653e\u672c\u5730\u9501\n                                }\n                                // trigger retry\n                                lockRetryController.sleep(lce);\n                            }\n                        }\n                    } finally {\n                        if (sp != null) {\n                            try {\n                                if (!JdbcConstants.ORACLE.equalsIgnoreCase(getDbType())) {\n                                    conn.releaseSavepoint(sp);\n                                }\n                            } catch (SQLException e) {\n                                LOGGER.error("{} release save point error.", getDbType(), e);\n                            }\n                        }\n                        if (originalAutoCommit) {\n                            conn.setAutoCommit(true);\n                        }\n                    }\n                    return rs;\n                }\n\n\n\n       }\n    ```\n')),(0,o.kt)("h2",{id:"connectionproxycommit\u7684\u5904\u7406\u903b\u8f91-1"},(0,o.kt)("strong",{parentName:"h2"},(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionProxy.commit()"),"\u7684\u5904\u7406\u903b\u8f91")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class ConnectionProxy extends AbstractConnectionProxy {\n\n    private final static LockRetryPolicy LOCK_RETRY_POLICY = new LockRetryPolicy();\n\n    private ConnectionContext context = new ConnectionContext();\n\n    @Override\n    public void commit() throws SQLException {\n        try {\n            LOCK_RETRY_POLICY.execute(() -> {\n                doCommit();\n                return null;\n            });\n        } catch (SQLException e) {\n            if (targetConnection != null && !getAutoCommit() && !getContext().isAutoCommitChanged()) {\n                rollback();\n            }\n            throw e;\n        } catch (Exception e) {\n            throw new SQLException(e);\n        }\n    }\n\n    private void doCommit() throws SQLException {\n        if (context.inGlobalTransaction()) {\n            processGlobalTransactionCommit();\n        } else if (context.isGlobalLockRequire()) {\n            processLocalCommitWithGlobalLocks();\n        } else {\n            targetConnection.commit();\n        }\n    }\n\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e5f\u5728\u8fd9\u6253\u4e0b\u4e2a\u7591\u95ee\uff0c\u540e\u8fb9\u89e3\u91ca\u3002",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionProxy"),"\u91cc\u7684",(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionContext"),"\u662f\u5982\u4f55\u5224\u65ad",(0,o.kt)("inlineCode",{parentName:"strong"},"inGlobalTransaction()")," or ",(0,o.kt)("inlineCode",{parentName:"strong"},"isGlobalLockRequire()"),"\u7684\u5462\uff1f"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5904\u4e8e\u5168\u5c40\u4e8b\u52a1\u4e2d\uff08\u5373\uff0c\u6570\u636e\u6301\u4e45\u5316\u65b9\u6cd5\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalTransactional"),"\uff09"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6ce8\u518c\u5206\u652f\u4e8b\u52a1\uff0c\u83b7\u53d6\u5168\u5c40\u9501")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"undoLog\u6570\u636e\u5165\u5e93")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'    public class ConnectionProxy extends AbstractConnectionProxy {\n\n        private final static LockRetryPolicy LOCK_RETRY_POLICY = new LockRetryPolicy();\n\n        private ConnectionContext context = new ConnectionContext();\n        \n        private void processGlobalTransactionCommit() throws SQLException {\n            try {\n                register(); // \u6ce8\u518c\u5206\u652f\uff0c\u4e89\u5168\u5c40\u9501\n            } catch (TransactionException e) {\n                recognizeLockKeyConflictException(e, context.buildLockKeys());\n            }\n            try {\n                UndoLogManagerFactory.getUndoLogManager(this.getDbType()).flushUndoLogs(this); // undolog\u5165\u5e93\n                targetConnection.commit(); // \u5206\u652f\u4e8b\u52a1\u63d0\u4ea4\n            } catch (Throwable ex) {\n                LOGGER.error("process connectionProxy commit error: {}", ex.getMessage(), ex);\n                report(false);\n                throw new SQLException(ex);\n            }\n            if (IS_REPORT_SUCCESS_ENABLE) {\n                report(true);\n            }\n            context.reset();\n        }\n\n        private void register() throws TransactionException {\n            if (!context.hasUndoLog() || !context.hasLockKey()) {\n                return;\n            }\n            Long branchId = DefaultResourceManager.get().branchRegister(BranchType.AT, getDataSourceProxy().getResourceId(),\n                null, context.getXid(), null, context.buildLockKeys());\n            context.setBranchId(branchId);\n        }\n')))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    }\n    ```\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5904\u4e8e",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalLock"),"\u4e2d\uff08\u5373\uff0c\u6570\u636e\u6301\u4e45\u5316\u65b9\u6cd5\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalLock"),"\uff09"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5411tc\u67e5\u8be2\u662f\u5426\u6709\u5168\u5c40\u9501\u5b58\u5728")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"   public class ConnectionProxy extends AbstractConnectionProxy {\n\n       private final static LockRetryPolicy LOCK_RETRY_POLICY = new LockRetryPolicy();\n\n       private ConnectionContext context = new ConnectionContext();\n       \n       private void processLocalCommitWithGlobalLocks() throws SQLException {\n           checkLock(context.buildLockKeys());\n           try {\n               targetConnection.commit();\n           } catch (Throwable ex) {\n               throw new SQLException(ex);\n           }\n           context.reset();\n       }\n\n       public void checkLock(String lockKeys) throws SQLException {\n           if (StringUtils.isBlank(lockKeys)) {\n               return;\n           }\n           // Just check lock without requiring lock by now.\n           try {\n               boolean lockable = DefaultResourceManager.get().lockQuery(BranchType.AT,\n                   getDataSourceProxy().getResourceId(), context.getXid(), lockKeys);\n               if (!lockable) {\n                   throw new LockConflictException();\n               }\n           } catch (TransactionException e) {\n               recognizeLockKeyConflictException(e, lockKeys);\n           }\n       }\n")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    }\n    ```\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u9664\u4e86\u4ee5\u4e0a\u60c5\u51b5\uff08",(0,o.kt)("inlineCode",{parentName:"li"},"else"),"\u5206\u652f\uff09",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u8ba9\u6570\u636e\u5e93commit\u672c\u6b21\u4e8b\u52a1")))),(0,o.kt)("h2",{id:"\u4ecb\u7ecdrootcontext"},"\u4ecb\u7ecd",(0,o.kt)("inlineCode",{parentName:"h2"},"RootContext")),(0,o.kt)("p",null,"\u6211\u4eec\u5728\u4e0a\u9762\u7559\u4e0b\u4e863\u4e2a\u201c\u6263\u513f\u201d\uff0c\u73b0\u5728\u5230\u4e86\u7ed3\u5408",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext"),"\u6e90\u7801\u6765\u89e3\u7b54\u7684\u65f6\u5019\u3002"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"RootContext.getBranchType()"),"\u7684\u8fd4\u56de\u503c\u600e\u4e48\u4f1a\u662fAT\uff1f"),(0,o.kt)("br",{parentName:"p"}),"\n","\u8be5\u65b9\u6cd5\u7684\u5224\u65ad\u903b\u8f91\u662f\uff1a\u53ea\u8981\u5224\u65ad\u51fa",(0,o.kt)("strong",{parentName:"p"},"\u5f53\u524d\u5904\u4e8e\u5168\u5c40\u4e8b\u52a1\u4e2d"),"\uff08\u5373\uff0c\u53ea\u8981\u6709\u5730\u65b9\u8c03\u7528\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext.bind(xid)"),"\uff09, \u5c31\u4f1a\u8fd4\u56de\u9ed8\u8ba4",(0,o.kt)("inlineCode",{parentName:"p"},"BranchType.AT")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class RootContext {\n\n    public static final String KEY_XID = "TX_XID";\n\n    private static ContextCore CONTEXT_HOLDER = ContextCoreLoader.load();\n\n    private static BranchType DEFAULT_BRANCH_TYPE;\n\n    @Nullable\n    public static BranchType getBranchType() {\n        if (inGlobalTransaction()) {\n            BranchType branchType = (BranchType) CONTEXT_HOLDER.get(KEY_BRANCH_TYPE);\n            if (branchType != null) {\n                return branchType;\n            }\n            //Returns the default branch type.\n            return DEFAULT_BRANCH_TYPE != null ? DEFAULT_BRANCH_TYPE : BranchType.AT;\n        }\n        return null;\n    }\n\n    public static boolean inGlobalTransaction() {\n        return CONTEXT_HOLDER.get(KEY_XID) != null;\n    }\n\n    public static void bind(@Nonnull String xid) {\n        if (StringUtils.isBlank(xid)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug("xid is blank, switch to unbind operation!");\n            }\n            unbind();\n        } else {\n            MDC.put(MDC_KEY_XID, xid);\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug("bind {}", xid);\n            }\n            CONTEXT_HOLDER.put(KEY_XID, xid);\n        }\n    }\n\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"RootContext.requireGlobalLock()"),"\u600e\u4e48\u5224\u65ad\u5f53\u524d\u662f\u5426\u9700\u8981\u5168\u5c40\u9501\uff1f"),(0,o.kt)("br",{parentName:"p"}),"\n","\u9700\u8981\u6709\u5730\u65b9\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext.bindGlobalLockFlag()")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class RootContext {\n\n    public static final String KEY_GLOBAL_LOCK_FLAG = "TX_LOCK";\n    public static final Boolean VALUE_GLOBAL_LOCK_FLAG = true;\n\n    private static ContextCore CONTEXT_HOLDER = ContextCoreLoader.load();\n\n    public static boolean requireGlobalLock() {\n        return CONTEXT_HOLDER.get(KEY_GLOBAL_LOCK_FLAG) != null;\n    }\n\n    public static void bindGlobalLockFlag() {\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug("Local Transaction Global Lock support enabled");\n        }\n\n        //just put something not null\n        CONTEXT_HOLDER.put(KEY_GLOBAL_LOCK_FLAG, VALUE_GLOBAL_LOCK_FLAG);\n    }\n\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionProxy.commit()"),"\u4f1a\u6839\u636econtext\u7684\u4e0d\u540c\u72b6\u6001\u533a\u5206\u5904\u7406\uff0c\u90a3",(0,o.kt)("inlineCode",{parentName:"strong"},"ConnectionContext"),"\u662f\u5982\u4f55\u5224\u65ad",(0,o.kt)("inlineCode",{parentName:"strong"},"inGlobalTransaction()")," or ",(0,o.kt)("inlineCode",{parentName:"strong"},"isGlobalLockRequire()"),"\u7684\u5462\uff1f")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"}," public class ConnectionProxy extends AbstractConnectionProxy {\n\n    private ConnectionContext context = new ConnectionContext();\n\n    private void doCommit() throws SQLException {\n        if (context.inGlobalTransaction()) {\n            processGlobalTransactionCommit();\n        } else if (context.isGlobalLockRequire()) {\n            processLocalCommitWithGlobalLocks();\n        } else {\n            targetConnection.commit();\n        }\n    }\n\n}\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5982\u4f55\u5224\u65ad",(0,o.kt)("inlineCode",{parentName:"p"},"inGlobalTransaction()"),"\uff1f\uff08\u6ce8\u610f\u4e0b\uff0c\u8fd9\u91cc\u548c\u4e0a\u9762\u63d0\u5230\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext"),"\u4e0d\u662f\u4e00\u4e2a\u4e1c\u897f\uff09"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class ConnectionContext {\n\n    private String xid;\n\n    void setXid(String xid) {\n        this.xid = xid;\n    }\n\n    public boolean inGlobalTransaction() {\n        return xid != null;\n    }\n\n    void bind(String xid) {\n        if (xid == null) {\n            throw new IllegalArgumentException("xid should not be null");\n        }\n        if (!inGlobalTransaction()) {\n            setXid(xid);\n        } else {\n            if (!this.xid.equals(xid)) {\n                throw new ShouldNeverHappenException();\n            }\n        }\n    }\n\n}\n')),(0,o.kt)("p",{parentName:"li"},"\u54ea\u91cc\u8c03\u7528\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionContext.bind(xid)"),"?"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package io.seata.rm.datasource.exec;\n\npublic abstract class BaseTransactionalExecutor<T, S extends Statement> implements Executor<T> {\n\n    @Override\n    public T execute(Object... args) throws Throwable {\n        // \u90a3\u4e48\uff0c\u8fd9\u91cc\u7684XID\u54ea\u6765\u7684\u5462\uff1f\u5f80\u540e\u770b\u5c31\u77e5\u9053\uff0c\u662f\u6765\u81ea\u5f00\u542f\u5168\u5c40\u4e8b\u52a1\u7684\u65f6\u5019\u83b7\u5f97\u7684\uff0c\u548c@GlobalTransactional\u6709\u5173\n        String xid = RootContext.getXID(); \n        if (xid != null) {\n            statementProxy.getConnectionProxy().bind(xid);\n        }\n\n        // \u8fd9\u91cc\u5c31\u662f\u8bbe\u7f6e isGlobalLockRequire\u7684\u4f4d\u7f6e\uff0c\u548c @GlobalLock\u6709\u5173\n        statementProxy.getConnectionProxy().setGlobalLockRequire(RootContext.requireGlobalLock());\n        return doExecute(args);\n    }\n\n}\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class ConnectionProxy extends AbstractConnectionProxy {\n\n   private ConnectionContext context = new ConnectionContext();\n\n    public void bind(String xid) {\n        context.bind(xid);\n    }\n\n    public void setGlobalLockRequire(boolean isLock) {\n        context.setGlobalLockRequire(isLock);\n    }\n\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5982\u4f55\u5224\u65ad",(0,o.kt)("inlineCode",{parentName:"p"},"isGlobalLockRequire()"),"\uff1f"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class ConnectionContext {\n\n    private boolean isGlobalLockRequire;\n\n    boolean isGlobalLockRequire() {\n       return isGlobalLockRequire;\n    }\n\n    void setGlobalLockRequire(boolean isGlobalLockRequire) {\n        this.isGlobalLockRequire = isGlobalLockRequire;\n    }\n\n}\n")),(0,o.kt)("p",{parentName:"li"},"\u5728\u770b\u8fc7\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u53ea\u8981\u6709\u5730\u65b9\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext"),"\u4e2d\u8bbe\u7f6e\u4e86xid\uff0c\u6216",(0,o.kt)("inlineCode",{parentName:"p"},"bindGlobalLockFlag()"),",\u5c31\u4f1a\u8bc6\u522b\u6210\u4e0d\u540c\u7684\u72b6\u6001\u3002\n\u90a3\u4e48\u54ea\u513f\u8c03\u7528\u7684\u5462\uff1f\u7b54\u6848\u5c31\u5728\u4e0b\u65b9\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalTransactionalInterceptor"),"\u4e2d\u3002"))))),(0,o.kt)("h2",{id:"globaltransactionalinterceptor\u5904\u7406\u5e26\u6709globaltransactional\u6216globallock\u7684\u65b9\u6cd5"},(0,o.kt)("strong",{parentName:"h2"},(0,o.kt)("inlineCode",{parentName:"strong"},"GlobalTransactionalInterceptor"),"\u5904\u7406\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"strong"},"@GlobalTransactional"),"\u6216",(0,o.kt)("inlineCode",{parentName:"strong"},"@GlobalLock"),"\u7684\u65b9\u6cd5")),(0,o.kt)("p",null,"\u5e26\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalTransactional"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"@GlobalLock"),"\u7684\u65b9\u6cd5\u4f1a\u88ab\u4ee3\u7406\uff0c\u4ea4\u7ed9",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalTransactionalInterceptor"),"\u5904\u7406"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class GlobalTransactionalInterceptor implements ConfigurationChangeListener, MethodInterceptor {\n\n    @Override\n    public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n        Class<?> targetClass =\n            methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis()) : null;\n        Method specificMethod = ClassUtils.getMostSpecificMethod(methodInvocation.getMethod(), targetClass);\n        if (specificMethod != null && !specificMethod.getDeclaringClass().equals(Object.class)) {\n            final Method method = BridgeMethodResolver.findBridgedMethod(specificMethod);\n            final GlobalTransactional globalTransactionalAnnotation =\n                getAnnotation(method, targetClass, GlobalTransactional.class);\n            final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n            boolean localDisable = disable || (degradeCheck && degradeNum >= degradeCheckAllowTimes);\n            if (!localDisable) {\n                if (globalTransactionalAnnotation != null) {\n                    return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);// \u5904\u7406 @GlobalTransactional\n                } else if (globalLockAnnotation != null) {\n                    return handleGlobalLock(methodInvocation, globalLockAnnotation); // \u5904\u7406 @GlobalLock\n                }\n            }\n        }\n        return methodInvocation.proceed();\n    }\n\n}\n\n")),(0,o.kt)("h3",{id:"\u5148\u770b\u5904\u7406globaltransactional"},(0,o.kt)("strong",{parentName:"h3"},"\u5148\u770b\u5904\u7406",(0,o.kt)("inlineCode",{parentName:"strong"},"@GlobalTransactional"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class GlobalTransactionalInterceptor implements ConfigurationChangeListener, MethodInterceptor {\n\n    private final TransactionalTemplate transactionalTemplate = new TransactionalTemplate();\n\n    Object handleGlobalTransaction(final MethodInvocation methodInvocation,\n        final GlobalTransactional globalTrxAnno) throws Throwable {\n        \n        //...\n        try {\n            return transactionalTemplate.execute(...);\n        } catch (TransactionalExecutor.ExecutionException e) {\n          // ...\n        } finally {\n            //...\n        }\n    }\n}\n\n")),(0,o.kt)("p",null,"\u6765\u5230\u4e86\u7ecf\u5178\u7684seata\u4e8b\u52a1\u6a21\u677f\u65b9\u6cd5\uff0c\u6211\u4eec\u8981\u5173\u6ce8\u5f00\u542f\u4e8b\u52a1\u7684\u90e8\u5206"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class TransactionalTemplate {\n\n    public Object execute(TransactionalExecutor business) throws Throwable {\n        // 1. Get transactionInfo\n        //...\n        // 1.1 Get current transaction, if not null, the tx role is 'GlobalTransactionRole.Participant'.\n        GlobalTransaction tx = GlobalTransactionContext.getCurrent();\n\n        // 1.2 Handle the transaction propagation.\n        // ...\n\n            // 1.3 If null, create new transaction with role 'GlobalTransactionRole.Launcher'.\n            if (tx == null) {\n                tx = GlobalTransactionContext.createNew();\n            }\n\n           //...\n\n            try {\n                // 2. If the tx role is 'GlobalTransactionRole.Launcher', send the request of beginTransaction to TC,\n                //    else do nothing. Of course, the hooks will still be triggered.\n                beginTransaction(txInfo, tx);\n\n                Object rs;\n                try {\n                    // Do Your Business\n                    rs = business.execute();\n                } catch (Throwable ex) {\n                    // 3. The needed business exception to rollback.\n                    completeTransactionAfterThrowing(txInfo, tx, ex);\n                    throw ex;\n                }\n\n                // 4. everything is fine, commit.\n                commitTransaction(tx);\n\n                return rs;\n            } finally {\n                //5. clear\n                //...\n            }\n        } finally {\n            // If the transaction is suspended, resume it.\n           // ...\n        }\n    }\n\n\n    private void beginTransaction(TransactionInfo txInfo, GlobalTransaction tx) throws TransactionalExecutor.ExecutionException {\n        try {\n            triggerBeforeBegin();\n            tx.begin(txInfo.getTimeOut(), txInfo.getName());\n            triggerAfterBegin();\n        } catch (TransactionException txe) {\n            throw new TransactionalExecutor.ExecutionException(tx, txe,\n                TransactionalExecutor.Code.BeginFailure);\n\n        }\n    }\n\n\n}\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class DefaultGlobalTransaction implements GlobalTransaction {\n\n    @Override\n    public void begin(int timeout, String name) throws TransactionException {\n        if (role != GlobalTransactionRole.Launcher) {\n            assertXIDNotNull();\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug("Ignore Begin(): just involved in global transaction [{}]", xid);\n            }\n            return;\n        }\n        assertXIDNull();\n        String currentXid = RootContext.getXID();\n        if (currentXid != null) {\n            throw new IllegalStateException("Global transaction already exists," +\n                " can\'t begin a new global transaction, currentXid = " + currentXid);\n        }\n        xid = transactionManager.begin(null, null, name, timeout);\n        status = GlobalStatus.Begin;\n        RootContext.bind(xid); // \u7ed1\u5b9axid\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info("Begin new global transaction [{}]", xid);\n        }\n    }\n}\n')),(0,o.kt)("p",null,"\u770b\u5230\u4e86\u5417\uff1f",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext.bind(xid);")),(0,o.kt)("h3",{id:"\u63a5\u7740\u770b\u5904\u7406globallock"},(0,o.kt)("strong",{parentName:"h3"},"\u63a5\u7740\u770b\u5904\u7406",(0,o.kt)("inlineCode",{parentName:"strong"},"@GlobalLock"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class GlobalTransactionalInterceptor implements ConfigurationChangeListener, MethodInterceptor {\n\n    private final GlobalLockTemplate globalLockTemplate = new GlobalLockTemplate();\n\n    Object handleGlobalLock(final MethodInvocation methodInvocation,\n        final GlobalLock globalLockAnno) throws Throwable {\n\n        return globalLockTemplate.execute(new GlobalLockExecutor() {...});\n    }\n}\n")),(0,o.kt)("p",null,"\u4e5f\u4f7f\u7528\u4e86\u6a21\u677f\u65b9\u6cd5\u6765\u5904\u7406GlobalLock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class GlobalLockTemplate {\n\n    public Object execute(GlobalLockExecutor executor) throws Throwable {\n        boolean alreadyInGlobalLock = RootContext.requireGlobalLock();\n        if (!alreadyInGlobalLock) {\n            RootContext.bindGlobalLockFlag();\n        }\n\n        // set my config to config holder so that it can be access in further execution\n        // for example, LockRetryController can access it with config holder\n        GlobalLockConfig myConfig = executor.getGlobalLockConfig();\n        GlobalLockConfig previousConfig = GlobalLockConfigHolder.setAndReturnPrevious(myConfig);\n\n        try {\n            return executor.execute();\n        } finally {\n            // only unbind when this is the root caller.\n            // otherwise, the outer caller would lose global lock flag\n            if (!alreadyInGlobalLock) {\n                RootContext.unbindGlobalLockFlag();\n            }\n\n            // if previous config is not null, we need to set it back\n            // so that the outer logic can still use their config\n            if (previousConfig != null) {\n                GlobalLockConfigHolder.setAndReturnPrevious(previousConfig);\n            } else {\n                GlobalLockConfigHolder.remove();\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u770b\u5230\u5417\uff0c\u4e00\u8fdb\u6a21\u677f\u65b9\u6cd5\u5c31",(0,o.kt)("inlineCode",{parentName:"p"},"RootContext.bindGlobalLockFlag();")))}d.isMDXComponent=!0},48125:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/dirty-write-e87d2b06d84c820fd786932b58583404.png"},37034:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/prevent-dirty-read-ce251ac833cb2ea643757c1816ab9903.png"},55208:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/prevent-dirty-write-by-GlobalLock-2371e8e82186fce823044f836a2e02c2.png"},82311:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/prevent-dirty-write-by-GlobalTransaction-7a7b3233283a355ca3a609e67841e43c.png"}}]);