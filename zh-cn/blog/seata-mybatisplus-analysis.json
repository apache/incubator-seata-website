{
  "filename": "seata-mybatisplus-analysis.md",
  "__html": "<h1>透过源码解决SeataAT模式整合Mybatis-Plus失去MP特性的问题</h1>\n<p>项目地址：<a href=\"https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata\">https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata</a></p>\n<p>本文作者：FUNKYE(陈健斌),杭州某互联网公司主程。</p>\n<h1>介绍</h1>\n<p>Mybatis-Plus：<a href=\"https://github.com/baomidou/mybatis-plus\">MyBatis-Plus</a>（简称 MP）是一个 <a href=\"http://www.mybatis.org/mybatis-3/\">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p>MP配置：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"sqlSessionFactory\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>Seata：Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>\n<p>AT模式机制：</p>\n<ul>\n<li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li>\n<li>二阶段：\n<ul>\n<li>提交异步化，非常快速地完成。</li>\n<li>回滚通过一阶段的回滚日志进行反向补偿。</li>\n</ul>\n</li>\n</ul>\n<h2>分析原因</h2>\n<p>​\t1.首先我们通过介绍，可以看到，mp是需要注册sqlSessionFactory，注入数据源，而Seata是通过代理数据源来保证事务的正常回滚跟提交。</p>\n<p>​\t2.我们来看基于seata的官方demo提供的SeataAutoConfig的代码</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n \n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource; \n \n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Primary;\n \n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;\n \n<span class=\"hljs-keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;\n<span class=\"hljs-keyword\">import</span> io.seata.spring.annotation.GlobalTransactionScanner;\n \n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SeataAutoConfig</span> </span>{\n\t<span class=\"hljs-meta\">@Autowired</span>(required = <span class=\"hljs-keyword\">true</span>)\n\t<span class=\"hljs-keyword\">private</span> DataSourceProperties dataSourceProperties;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(SeataAutoConfig.class);\n \n\t<span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"dataSource\"</span>) <span class=\"hljs-comment\">// 声明其为Bean实例</span>\n\t<span class=\"hljs-meta\">@Primary</span> <span class=\"hljs-comment\">// 在同样的DataSource中，首先使用被标注的DataSource</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">druidDataSource</span><span class=\"hljs-params\">()</span> </span>{\n\t\tDruidDataSource druidDataSource = <span class=\"hljs-keyword\">new</span> DruidDataSource();\n\t\tlogger.info(<span class=\"hljs-string\">\"dataSourceProperties.getUrl():{}\"</span>,dataSourceProperties.getUrl());\n\t\tdruidDataSource.setUrl(dataSourceProperties.getUrl());\n\t\tdruidDataSource.setUsername(dataSourceProperties.getUsername());\n\t\tdruidDataSource.setPassword(dataSourceProperties.getPassword());\n\t\tdruidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());\n\t\tdruidDataSource.setInitialSize(<span class=\"hljs-number\">0</span>);\n\t\tdruidDataSource.setMaxActive(<span class=\"hljs-number\">180</span>);\n\t\tdruidDataSource.setMaxWait(<span class=\"hljs-number\">60000</span>);\n\t\tdruidDataSource.setMinIdle(<span class=\"hljs-number\">0</span>);\n\t\tdruidDataSource.setValidationQuery(<span class=\"hljs-string\">\"Select 1 from DUAL\"</span>);\n\t\tdruidDataSource.setTestOnBorrow(<span class=\"hljs-keyword\">false</span>);\n\t\tdruidDataSource.setTestOnReturn(<span class=\"hljs-keyword\">false</span>);\n\t\tdruidDataSource.setTestWhileIdle(<span class=\"hljs-keyword\">true</span>);\n\t\tdruidDataSource.setTimeBetweenEvictionRunsMillis(<span class=\"hljs-number\">60000</span>);\n\t\tdruidDataSource.setMinEvictableIdleTimeMillis(<span class=\"hljs-number\">25200000</span>);\n\t\tdruidDataSource.setRemoveAbandoned(<span class=\"hljs-keyword\">true</span>);\n\t\tdruidDataSource.setRemoveAbandonedTimeout(<span class=\"hljs-number\">1800</span>);\n\t\tdruidDataSource.setLogAbandoned(<span class=\"hljs-keyword\">true</span>);\n\t\tlogger.info(<span class=\"hljs-string\">\"装载dataSource........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> druidDataSource;\n\t}\n \n\t<span class=\"hljs-comment\">/**\n\t * init datasource proxy\n\t * \n\t * <span class=\"hljs-doctag\">@Param</span>: druidDataSource datasource bean instance\n\t * <span class=\"hljs-doctag\">@Return</span>: DataSourceProxy datasource proxy\n\t */</span>\n\t<span class=\"hljs-meta\">@Bean</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSourceProxy <span class=\"hljs-title\">dataSourceProxy</span><span class=\"hljs-params\">(DataSource dataSource)</span> </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"代理dataSource........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DataSourceProxy(dataSource);\n\t}\n \n\t<span class=\"hljs-meta\">@Bean</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactory <span class=\"hljs-title\">sqlSessionFactory</span><span class=\"hljs-params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n\t\tMybatisSqlSessionFactoryBean factory = <span class=\"hljs-keyword\">new</span> MybatisSqlSessionFactoryBean();\n\t\tfactory.setDataSource(dataSourceProxy);\n        factory.setMapperLocations(<span class=\"hljs-keyword\">new</span> PathMatchingResourcePatternResolver()\n            .getResources(<span class=\"hljs-string\">\"classpath*:/mapper/*.xml\"</span>));\n\t\t<span class=\"hljs-keyword\">return</span> factory.getObject();\n\t}\n \n\t<span class=\"hljs-comment\">/**\n\t * init global transaction scanner\n\t *\n\t * <span class=\"hljs-doctag\">@Return</span>: GlobalTransactionScanner\n\t */</span>\n\t<span class=\"hljs-meta\">@Bean</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalTransactionScanner <span class=\"hljs-title\">globalTransactionScanner</span><span class=\"hljs-params\">()</span> </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"配置seata........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> GlobalTransactionScanner(<span class=\"hljs-string\">\"test-service\"</span>, <span class=\"hljs-string\">\"test-group\"</span>);\n\t}\n}\n\n</code></pre>\n<p>首先看到我们的seata配置数据源的类里,我们配置了一个数据源,然后又配置了一个seata代理datasource的bean,这时候.</p>\n<p>然后我们如果直接启动mp整合seata的项目会发现,分页之类的插件会直接失效,连扫描mapper都得从代码上写,这是为什么呢?</p>\n<p>通过阅读以上代码,是因为我们另外的配置了一个sqlSessionFactory,导致mp的sqlSessionFactory失效了,这时候我们发现了问题的所在了，即使我们不配置sqlSessionFactoryl，也会因为mp所使用的数据源不是被seata代理过后的数据源，导致分布式事务失效.但是如何解决这个问题呢?</p>\n<p>这时候我们需要去阅读mp的源码,找到他的启动类,一看便知</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/*\n * Copyright (c) 2011-2020, baomidou (jobob@qq.com).\n * &lt;p&gt;\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * &lt;p&gt;\n * https://www.apache.org/licenses/LICENSE-2.0\n * &lt;p&gt;\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */</span>\n<span class=\"hljs-keyword\">package</span> com.baomidou.mybatisplus.autoconfigure;\n \n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.MybatisConfiguration;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.config.GlobalConfig;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.incrementer.IKeyGenerator;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.annotations.Mapper;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.mapping.DatabaseIdProvider;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.plugin.Interceptor;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.scripting.LanguageDriver;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.ExecutorType;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.type.TypeHandler;\n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionFactoryBean;\n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionTemplate;\n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.mapper.MapperFactoryBean;\n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapper;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapperImpl;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.BeanFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.BeanFactoryAware;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.InitializingBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.ObjectProvider;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigurationPackages;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Import;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.io.Resource;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.io.ResourceLoader;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.type.AnnotationMetadata;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.Assert;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.ObjectUtils;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.StringUtils;\n \n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Optional;\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\n \n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> EnableAutoConfiguration Auto-Configuration} for Mybatis. Contributes a\n * {<span class=\"hljs-doctag\">@link</span> SqlSessionFactory} and a {<span class=\"hljs-doctag\">@link</span> SqlSessionTemplate}.\n * &lt;p&gt;\n * If {<span class=\"hljs-doctag\">@link</span> org.mybatis.spring.annotation.MapperScan} is used, or a\n * configuration file is specified as a property, those will be considered,\n * otherwise this auto-configuration will attempt to register mappers based on\n * the interface definitions in or under the root auto-configuration package.\n * &lt;/p&gt;\n * &lt;p&gt; copy from {<span class=\"hljs-doctag\">@link</span> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration}&lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> Eddú Meléndez\n * <span class=\"hljs-doctag\">@author</span> Josh Long\n * <span class=\"hljs-doctag\">@author</span> Kazuki Shimizu\n * <span class=\"hljs-doctag\">@author</span> Eduardo Macarrón\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@ConditionalOnClass</span>({SqlSessionFactory.class, SqlSessionFactoryBean.class})\n<span class=\"hljs-meta\">@ConditionalOnSingleCandidate</span>(DataSource.class)\n<span class=\"hljs-meta\">@EnableConfigurationProperties</span>(MybatisPlusProperties.class)\n<span class=\"hljs-meta\">@AutoConfigureAfter</span>(DataSourceAutoConfiguration.class)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MybatisPlusAutoConfiguration</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">InitializingBean</span> </span>{\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(MybatisPlusAutoConfiguration.class);\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> MybatisPlusProperties properties;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Interceptor[] interceptors;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> TypeHandler[] typeHandlers;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> LanguageDriver[] languageDrivers;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ResourceLoader resourceLoader;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DatabaseIdProvider databaseIdProvider;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;ConfigurationCustomizer&gt; configurationCustomizers;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;MybatisPlusPropertiesCustomizer&gt; mybatisPlusPropertiesCustomizers;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ApplicationContext applicationContext;\n \n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MybatisPlusAutoConfiguration</span><span class=\"hljs-params\">(MybatisPlusProperties properties,\n                                        ObjectProvider&lt;Interceptor[]&gt; interceptorsProvider,\n                                        ObjectProvider&lt;TypeHandler[]&gt; typeHandlersProvider,\n                                        ObjectProvider&lt;LanguageDriver[]&gt; languageDriversProvider,\n                                        ResourceLoader resourceLoader,\n                                        ObjectProvider&lt;DatabaseIdProvider&gt; databaseIdProvider,\n                                        ObjectProvider&lt;List&lt;ConfigurationCustomizer&gt;&gt; configurationCustomizersProvider,\n                                        ObjectProvider&lt;List&lt;MybatisPlusPropertiesCustomizer&gt;&gt; mybatisPlusPropertiesCustomizerProvider,\n                                        ApplicationContext applicationContext)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.properties = properties;\n        <span class=\"hljs-keyword\">this</span>.interceptors = interceptorsProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.typeHandlers = typeHandlersProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.languageDrivers = languageDriversProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.resourceLoader = resourceLoader;\n        <span class=\"hljs-keyword\">this</span>.databaseIdProvider = databaseIdProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.mybatisPlusPropertiesCustomizers = mybatisPlusPropertiesCustomizerProvider.getIfAvailable();\n        <span class=\"hljs-keyword\">this</span>.applicationContext = applicationContext;\n    }\n \n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterPropertiesSet</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(mybatisPlusPropertiesCustomizers)) {\n            mybatisPlusPropertiesCustomizers.forEach(i -&gt; i.customize(properties));\n        }\n        checkConfigFileExists();\n    }\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkConfigFileExists</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.properties.isCheckConfigLocation() &amp;&amp; StringUtils.hasText(<span class=\"hljs-keyword\">this</span>.properties.getConfigLocation())) {\n            Resource resource = <span class=\"hljs-keyword\">this</span>.resourceLoader.getResource(<span class=\"hljs-keyword\">this</span>.properties.getConfigLocation());\n            Assert.state(resource.exists(),\n                <span class=\"hljs-string\">\"Cannot find config location: \"</span> + resource + <span class=\"hljs-string\">\" (please add config file or check your Mybatis configuration)\"</span>);\n        }\n    }\n \n    <span class=\"hljs-meta\">@SuppressWarnings</span>(<span class=\"hljs-string\">\"SpringJavaInjectionPointsAutowiringInspection\"</span>)\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@ConditionalOnMissingBean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionFactory <span class=\"hljs-title\">sqlSessionFactory</span><span class=\"hljs-params\">(DataSource dataSource)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        <span class=\"hljs-comment\">// TODO 使用 MybatisSqlSessionFactoryBean 而不是 SqlSessionFactoryBean</span>\n        MybatisSqlSessionFactoryBean factory = <span class=\"hljs-keyword\">new</span> MybatisSqlSessionFactoryBean();\n        factory.setDataSource(dataSource);\n        factory.setVfs(SpringBootVFS.class);\n        <span class=\"hljs-keyword\">if</span> (StringUtils.hasText(<span class=\"hljs-keyword\">this</span>.properties.getConfigLocation())) {\n            factory.setConfigLocation(<span class=\"hljs-keyword\">this</span>.resourceLoader.getResource(<span class=\"hljs-keyword\">this</span>.properties.getConfigLocation()));\n        }\n        applyConfiguration(factory);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.properties.getConfigurationProperties() != <span class=\"hljs-keyword\">null</span>) {\n            factory.setConfigurationProperties(<span class=\"hljs-keyword\">this</span>.properties.getConfigurationProperties());\n        }\n        <span class=\"hljs-keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"hljs-keyword\">this</span>.interceptors)) {\n            factory.setPlugins(<span class=\"hljs-keyword\">this</span>.interceptors);\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.databaseIdProvider != <span class=\"hljs-keyword\">null</span>) {\n            factory.setDatabaseIdProvider(<span class=\"hljs-keyword\">this</span>.databaseIdProvider);\n        }\n        <span class=\"hljs-keyword\">if</span> (StringUtils.hasLength(<span class=\"hljs-keyword\">this</span>.properties.getTypeAliasesPackage())) {\n            factory.setTypeAliasesPackage(<span class=\"hljs-keyword\">this</span>.properties.getTypeAliasesPackage());\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.properties.getTypeAliasesSuperType() != <span class=\"hljs-keyword\">null</span>) {\n            factory.setTypeAliasesSuperType(<span class=\"hljs-keyword\">this</span>.properties.getTypeAliasesSuperType());\n        }\n        <span class=\"hljs-keyword\">if</span> (StringUtils.hasLength(<span class=\"hljs-keyword\">this</span>.properties.getTypeHandlersPackage())) {\n            factory.setTypeHandlersPackage(<span class=\"hljs-keyword\">this</span>.properties.getTypeHandlersPackage());\n        }\n        <span class=\"hljs-keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"hljs-keyword\">this</span>.typeHandlers)) {\n            factory.setTypeHandlers(<span class=\"hljs-keyword\">this</span>.typeHandlers);\n        }\n        <span class=\"hljs-keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"hljs-keyword\">this</span>.properties.resolveMapperLocations())) {\n            factory.setMapperLocations(<span class=\"hljs-keyword\">this</span>.properties.resolveMapperLocations());\n        }\n \n        <span class=\"hljs-comment\">// TODO 对源码做了一定的修改(因为源码适配了老旧的mybatis版本,但我们不需要适配)</span>\n        Class&lt;? extends LanguageDriver&gt; defaultLanguageDriver = <span class=\"hljs-keyword\">this</span>.properties.getDefaultScriptingLanguageDriver();\n        <span class=\"hljs-keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"hljs-keyword\">this</span>.languageDrivers)) {\n            factory.setScriptingLanguageDrivers(<span class=\"hljs-keyword\">this</span>.languageDrivers);\n        }\n        Optional.ofNullable(defaultLanguageDriver).ifPresent(factory::setDefaultScriptingLanguageDriver);\n \n        <span class=\"hljs-comment\">// TODO 自定义枚举包</span>\n        <span class=\"hljs-keyword\">if</span> (StringUtils.hasLength(<span class=\"hljs-keyword\">this</span>.properties.getTypeEnumsPackage())) {\n            factory.setTypeEnumsPackage(<span class=\"hljs-keyword\">this</span>.properties.getTypeEnumsPackage());\n        }\n        <span class=\"hljs-comment\">// TODO 此处必为非 NULL</span>\n        GlobalConfig globalConfig = <span class=\"hljs-keyword\">this</span>.properties.getGlobalConfig();\n        <span class=\"hljs-comment\">// TODO 注入填充器</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.applicationContext.getBeanNamesForType(MetaObjectHandler.class,\n            <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">false</span>).length &gt; <span class=\"hljs-number\">0</span>) {\n            MetaObjectHandler metaObjectHandler = <span class=\"hljs-keyword\">this</span>.applicationContext.getBean(MetaObjectHandler.class);\n            globalConfig.setMetaObjectHandler(metaObjectHandler);\n        }\n        <span class=\"hljs-comment\">// TODO 注入主键生成器</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.applicationContext.getBeanNamesForType(IKeyGenerator.class, <span class=\"hljs-keyword\">false</span>,\n            <span class=\"hljs-keyword\">false</span>).length &gt; <span class=\"hljs-number\">0</span>) {\n            IKeyGenerator keyGenerator = <span class=\"hljs-keyword\">this</span>.applicationContext.getBean(IKeyGenerator.class);\n            globalConfig.getDbConfig().setKeyGenerator(keyGenerator);\n        }\n        <span class=\"hljs-comment\">// TODO 注入sql注入器</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.applicationContext.getBeanNamesForType(ISqlInjector.class, <span class=\"hljs-keyword\">false</span>,\n            <span class=\"hljs-keyword\">false</span>).length &gt; <span class=\"hljs-number\">0</span>) {\n            ISqlInjector iSqlInjector = <span class=\"hljs-keyword\">this</span>.applicationContext.getBean(ISqlInjector.class);\n            globalConfig.setSqlInjector(iSqlInjector);\n        }\n        <span class=\"hljs-comment\">// TODO 设置 GlobalConfig 到 MybatisSqlSessionFactoryBean</span>\n        factory.setGlobalConfig(globalConfig);\n        <span class=\"hljs-keyword\">return</span> factory.getObject();\n    }\n \n    <span class=\"hljs-comment\">// TODO 入参使用 MybatisSqlSessionFactoryBean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">applyConfiguration</span><span class=\"hljs-params\">(MybatisSqlSessionFactoryBean factory)</span> </span>{\n        <span class=\"hljs-comment\">// TODO 使用 MybatisConfiguration</span>\n        MybatisConfiguration configuration = <span class=\"hljs-keyword\">this</span>.properties.getConfiguration();\n        <span class=\"hljs-keyword\">if</span> (configuration == <span class=\"hljs-keyword\">null</span> &amp;&amp; !StringUtils.hasText(<span class=\"hljs-keyword\">this</span>.properties.getConfigLocation())) {\n            configuration = <span class=\"hljs-keyword\">new</span> MybatisConfiguration();\n        }\n        <span class=\"hljs-keyword\">if</span> (configuration != <span class=\"hljs-keyword\">null</span> &amp;&amp; !CollectionUtils.isEmpty(<span class=\"hljs-keyword\">this</span>.configurationCustomizers)) {\n            <span class=\"hljs-keyword\">for</span> (ConfigurationCustomizer customizer : <span class=\"hljs-keyword\">this</span>.configurationCustomizers) {\n                customizer.customize(configuration);\n            }\n        }\n        factory.setConfiguration(configuration);\n    }\n \n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@ConditionalOnMissingBean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SqlSessionTemplate <span class=\"hljs-title\">sqlSessionTemplate</span><span class=\"hljs-params\">(SqlSessionFactory sqlSessionFactory)</span> </span>{\n        ExecutorType executorType = <span class=\"hljs-keyword\">this</span>.properties.getExecutorType();\n        <span class=\"hljs-keyword\">if</span> (executorType != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SqlSessionTemplate(sqlSessionFactory, executorType);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * This will just scan the same base package as Spring Boot does. If you want more power, you can explicitly use\n     * {<span class=\"hljs-doctag\">@link</span> org.mybatis.spring.annotation.MapperScan} but this will get typed mappers working correctly, out-of-the-box,\n     * similar to using Spring Data JPA repositories.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AutoConfiguredMapperScannerRegistrar</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BeanFactoryAware</span>, <span class=\"hljs-title\">ImportBeanDefinitionRegistrar</span> </span>{\n \n        <span class=\"hljs-keyword\">private</span> BeanFactory beanFactory;\n \n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerBeanDefinitions</span><span class=\"hljs-params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>{\n \n            <span class=\"hljs-keyword\">if</span> (!AutoConfigurationPackages.has(<span class=\"hljs-keyword\">this</span>.beanFactory)) {\n                logger.debug(<span class=\"hljs-string\">\"Could not determine auto-configuration package, automatic mapper scanning disabled.\"</span>);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n \n            logger.debug(<span class=\"hljs-string\">\"Searching for mappers annotated with @Mapper\"</span>);\n \n            List&lt;String&gt; packages = AutoConfigurationPackages.get(<span class=\"hljs-keyword\">this</span>.beanFactory);\n            <span class=\"hljs-keyword\">if</span> (logger.isDebugEnabled()) {\n                packages.forEach(pkg -&gt; logger.debug(<span class=\"hljs-string\">\"Using auto-configuration base package '{}'\"</span>, pkg));\n            }\n \n            BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);\n            builder.addPropertyValue(<span class=\"hljs-string\">\"processPropertyPlaceHolders\"</span>, <span class=\"hljs-keyword\">true</span>);\n            builder.addPropertyValue(<span class=\"hljs-string\">\"annotationClass\"</span>, Mapper.class);\n            builder.addPropertyValue(<span class=\"hljs-string\">\"basePackage\"</span>, StringUtils.collectionToCommaDelimitedString(packages));\n            BeanWrapper beanWrapper = <span class=\"hljs-keyword\">new</span> BeanWrapperImpl(MapperScannerConfigurer.class);\n            Stream.of(beanWrapper.getPropertyDescriptors())\n                <span class=\"hljs-comment\">// Need to mybatis-spring 2.0.2+</span>\n                .filter(x -&gt; x.getName().equals(<span class=\"hljs-string\">\"lazyInitialization\"</span>)).findAny()\n                .ifPresent(x -&gt; builder.addPropertyValue(<span class=\"hljs-string\">\"lazyInitialization\"</span>, <span class=\"hljs-string\">\"${mybatis.lazy-initialization:false}\"</span>));\n            registry.registerBeanDefinition(MapperScannerConfigurer.class.getName(), builder.getBeanDefinition());\n        }\n \n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBeanFactory</span><span class=\"hljs-params\">(BeanFactory beanFactory)</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.beanFactory = beanFactory;\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * If mapper registering configuration or mapper scanning configuration not present, this configuration allow to scan\n     * mappers based on the same component-scanning path as Spring Boot itself.\n     */</span>\n    <span class=\"hljs-meta\">@Configuration</span>\n    <span class=\"hljs-meta\">@Import</span>(AutoConfiguredMapperScannerRegistrar.class)\n    <span class=\"hljs-meta\">@ConditionalOnMissingBean</span>({MapperFactoryBean.class, MapperScannerConfigurer.class})\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MapperScannerRegistrarNotFoundConfiguration</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">InitializingBean</span> </span>{\n \n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterPropertiesSet</span><span class=\"hljs-params\">()</span> </span>{\n            logger.debug(\n                <span class=\"hljs-string\">\"Not found configuration for registering mapper bean using @MapperScan, MapperFactoryBean and MapperScannerConfigurer.\"</span>);\n        }\n    }\n}\n\n</code></pre>\n<p>看到mp启动类里的sqlSessionFactory方法了吗,他也是一样的注入一个数据源,这时候大家应该都知道解决方法了吧?</p>\n<p>没错,就是把被代理过的数据源给放到mp的sqlSessionFactory中.</p>\n<p>很简单,我们需要稍微改动一下我们的seata配置类就行了</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n\n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.annotation.MapperScan;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Primary;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n\n<span class=\"hljs-keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;\n<span class=\"hljs-keyword\">import</span> io.seata.spring.annotation.GlobalTransactionScanner;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@MapperScan</span>(<span class=\"hljs-string\">\"com.baomidou.springboot.mapper*\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SeataAutoConfig</span> </span>{\n    <span class=\"hljs-meta\">@Autowired</span>(required = <span class=\"hljs-keyword\">true</span>)\n    <span class=\"hljs-keyword\">private</span> DataSourceProperties dataSourceProperties;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(SeataAutoConfig.class);\n    <span class=\"hljs-keyword\">private</span> DataSourceProxy dataSourceProxy;\n\n    <span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"dataSource\"</span>) <span class=\"hljs-comment\">// 声明其为Bean实例</span>\n    <span class=\"hljs-meta\">@Primary</span> <span class=\"hljs-comment\">// 在同样的DataSource中，首先使用被标注的DataSource</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">druidDataSource</span><span class=\"hljs-params\">()</span> </span>{\n        DruidDataSource druidDataSource = <span class=\"hljs-keyword\">new</span> DruidDataSource();\n        logger.info(<span class=\"hljs-string\">\"dataSourceProperties.getUrl():{}\"</span>, dataSourceProperties.getUrl());\n        druidDataSource.setUrl(dataSourceProperties.getUrl());\n        druidDataSource.setUsername(dataSourceProperties.getUsername());\n        druidDataSource.setPassword(dataSourceProperties.getPassword());\n        druidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());\n        druidDataSource.setInitialSize(<span class=\"hljs-number\">0</span>);\n        druidDataSource.setMaxActive(<span class=\"hljs-number\">180</span>);\n        druidDataSource.setMaxWait(<span class=\"hljs-number\">60000</span>);\n        druidDataSource.setMinIdle(<span class=\"hljs-number\">0</span>);\n        druidDataSource.setValidationQuery(<span class=\"hljs-string\">\"Select 1 from DUAL\"</span>);\n        druidDataSource.setTestOnBorrow(<span class=\"hljs-keyword\">false</span>);\n        druidDataSource.setTestOnReturn(<span class=\"hljs-keyword\">false</span>);\n        druidDataSource.setTestWhileIdle(<span class=\"hljs-keyword\">true</span>);\n        druidDataSource.setTimeBetweenEvictionRunsMillis(<span class=\"hljs-number\">60000</span>);\n        druidDataSource.setMinEvictableIdleTimeMillis(<span class=\"hljs-number\">25200000</span>);\n        druidDataSource.setRemoveAbandoned(<span class=\"hljs-keyword\">true</span>);\n        druidDataSource.setRemoveAbandonedTimeout(<span class=\"hljs-number\">1800</span>);\n        druidDataSource.setLogAbandoned(<span class=\"hljs-keyword\">true</span>);\n        logger.info(<span class=\"hljs-string\">\"装载dataSource........\"</span>);\n        dataSourceProxy = <span class=\"hljs-keyword\">new</span> DataSourceProxy(druidDataSource);\n        <span class=\"hljs-keyword\">return</span> dataSourceProxy;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * init datasource proxy\n     * \n     * <span class=\"hljs-doctag\">@Param</span>: druidDataSource datasource bean instance\n     * <span class=\"hljs-doctag\">@Return</span>: DataSourceProxy datasource proxy\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSourceProxy <span class=\"hljs-title\">dataSourceProxy</span><span class=\"hljs-params\">()</span> </span>{\n        logger.info(<span class=\"hljs-string\">\"代理dataSource........\"</span>);\n        <span class=\"hljs-keyword\">return</span> dataSourceProxy;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * init global transaction scanner\n     *\n     * <span class=\"hljs-doctag\">@Return</span>: GlobalTransactionScanner\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalTransactionScanner <span class=\"hljs-title\">globalTransactionScanner</span><span class=\"hljs-params\">()</span> </span>{\n        logger.info(<span class=\"hljs-string\">\"配置seata........\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> GlobalTransactionScanner(<span class=\"hljs-string\">\"test-service\"</span>, <span class=\"hljs-string\">\"test-group\"</span>);\n    }\n}\n\n</code></pre>\n<p>看代码,我们去掉了自己配置的sqlSessionFactory,直接让DataSource bean返回的是一个被代理过的bean,并且我们加入了@Primary,导致mp优先使用我们配置的数据源,这样就解决了mp因为seata代理了数据源跟创建了新的sqlSessionFactory,导致mp的插件,组件失效的bug了!</p>\n<h1>总结</h1>\n<p>踩到坑不可怕，主要又耐心的顺着每个组件实现的原理，再去思考，查找对应冲突的代码块，你一定能找到个兼容二者的方法。</p>\n",
  "link": "/zh-cn/blog/seata-mybatisplus-analysis.html",
  "meta": {
    "title": "透过源码解决SeataAT模式整合Mybatis-Plus失去MP特性的问题",
    "keywords": "Seata,Mybatis-Plus,分布式事务",
    "description": "本文讲述如何透过源码解决Seata整合Mybatis-Plus失去MP特性的问题",
    "author": "FUNKYE",
    "date": "2019/11/30"
  }
}