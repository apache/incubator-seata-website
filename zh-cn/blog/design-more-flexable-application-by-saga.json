{
  "filename": "design-more-flexable-application-by-saga.md",
  "__html": "<h1>基于 Seata Saga 设计更有弹性的金融应用</h1>\n<p>Seata 意为：Simple Extensible Autonomous Transaction Architecture，是一套一站式分布式事务解决方案，提供了 AT、TCC、Saga 和 XA 事务模式，本文详解其中的 Saga 模式。<br />项目地址：<a href=\"https://github.com/seata/seata\">https://github.com/seata/seata</a></p>\n<p>本文作者：屹远（陈龙），蚂蚁金服分布式事务核心研发，Seata Committer。</p>\n<p><a name=\"uTwja\"></a></p>\n<h1>金融分布式应用开发的痛点</h1>\n<p>分布式系统有一个比较明显的问题就是，一个业务流程需要组合一组服务。这样的事情在微服务下就更为明显了，因为这需要业务上的一致性的保证。也就是说，如果一个步骤失败了，那么要么回滚到以前的服务调用，要么不断重试保证所有的步骤都成功。---《左耳听风-弹力设计之“补偿事务”》</p>\n<p>而在金融领域微服务架构下的业务流程往往会更复杂，流程很长，比如一个互联网微贷业务流程调十几个服务很正常，再加上异常处理的流程那就更复杂了，做过金融业务开发的同学会很有体感。</p>\n<p>所以在金融分布式应用开发过程中我们面临一些痛点：</p>\n<ul>\n<li><strong>业务一致性难以保障</strong><br /></li>\n</ul>\n<p>我们接触到的大多数业务（比如在渠道层、产品层、集成层的系统），为了保障业务最终一致性，往往会采用“补偿”的方式来做，如果没有一个协调器来支持，开发难度是比较大的，每一步都要在 catch 里去处理前面所有的“回滚”操作，这将会形成“箭头形”的代码，可读性及维护性差。或者重试异常的操作，如果重试不成功可能要转异步重试，甚至最后转人工处理。这些都给开发人员带来极大的负担，开发效率低，且容易出错。</p>\n<ul>\n<li><strong>业务状态难以管理</strong><br /></li>\n</ul>\n<p>业务实体很多、实体的状态也很多，往往做完一个业务活动后就将实体的状态更新到了数据库里，没有一个状态机来管理整个状态的变迁过程，不直观，容易出错，造成业务进入一个不正确的状态。</p>\n<ul>\n<li><strong>幂等性难以保障</strong><br /></li>\n</ul>\n<p>服务的幂等性是分布式环境下的基本要求，为了保证服务的幂等性往往需要服务开发者逐个去设计，有用数据库唯一键实现的，有用分布式缓存实现的，没有一个统一的方案，开发人员负担大，也容易遗漏，从而造成资损。</p>\n<ul>\n<li><strong>业务监控运维难，缺乏统一的差错守护能力</strong><br /></li>\n</ul>\n<p>业务的执行情况监控一般通过打印日志，再基于日志监控平台查看，大多数情况是没有问题的，但是如果业务出错，这些监控缺乏当时的业务上下文，对排查问题不友好，往往需要再去数据库里查。同时日志的打印也依赖于开发，容易遗漏。对于补偿事务往往需要有“差错守护触发补偿”、“工人触发补偿”操作，没有统一的差错守护和处理规范，这些都要开发者逐个开发，负担沉重。</p>\n<p><a name=\"hvEU6\"></a></p>\n<h1>理论基础</h1>\n<p>一些场景下，我们对数据有强一致性的需求时，会采用在业务层上需要使用“两阶段提交”这样的分布式事务方案。而在另外一些场景下，我们并不需要这么强的一致性，那就只需要保证最终一致性就可以了。</p>\n<p>例如蚂蚁金服目前在金融核心系统使用的就是 TCC 模式，金融核心系统的特点是一致性要求高（业务上的隔离性）、短流程、并发高。</p>\n<p>而在很多金融核心以上的业务（比如在渠道层、产品层、集成层的系统），这些系统的特点是最终一致即可、流程多、流程长、还可能要调用其它公司的服务（如金融网络）。这是如果每个服务都开发 Try、Confirm、Cancel 三个方法成本高。如果事务中有其它公司的服务，也无法要求其它公司的服务也遵循 TCC 这种开发模式。同时流程长，事务边界太长会影响性能。</p>\n<p>对于事务我们都知道 ACID，也很熟悉 CAP 理论最多只能满足其中两个，所以，为了提高性能，出现了 ACID 的一个变种 BASE。ACID 强调的是一致性（CAP 中的 C），而 BASE 强调的是可用性（CAP 中的 A）。我们知道，在很多情况下，我们是无法做到强一致性的 ACID 的。特别是我们需要跨多个系统的时候，而且这些系统还不是由一个公司所提供的。BASE 的系统倾向于设计出更加有弹力的系统，在短时间内，就算是有数据不同步的风险，我们也应该允许新的交易可以发生，而后面我们在业务上将可能出现问题的事务通过补偿的方式处理掉，以保证最终的一致性。</p>\n<p>所以我们在实际开发中会进行取舍，对于更多的金融核心以上的业务系统可以采用补偿事务，补偿事务处理方面在30年前就提出了 Saga 理论，随着微服务的发展，近些年才逐步受到大家的关注。目前业界比较也公认 Saga 是作为长事务的解决方案。</p>\n<blockquote>\n<p><a href=\"https://github.com/aphyr/dist-sagas/blob/master/sagas.pdf\">https://github.com/aphyr/dist-sagas/blob/master/sagas.pdf</a>[1]\n<a href=\"http://microservices.io/patterns/data/saga.html\">http://microservices.io/patterns/data/saga.html</a>[2]</p>\n</blockquote>\n<p><a name=\"k8kbY\"></a></p>\n<h1>社区和业界的方案</h1>\n<p><a name=\"Oc5Er\"></a></p>\n<h2>Apache Camel Saga</h2>\n<p>Camel 是实现 EIP（Enterprise Integration Patterns）企业集成模式的一款开源产品，它基于事件驱动的架构，有着良好的性能和吞吐量，它在2.21版本新增加了 Saga EIP。</p>\n<p>Saga EIP 提供了一种方式可以通过 camel route 定义一系列有关联关系的 Action，这些 Action 要么都执行成功，要么都回滚，Saga 可以协调任何通讯协议的分布式服务或本地服务，并达到全局的最终一致性。Saga 不要求整个处理在短时间内完成，因为它不占用任何数据库锁，它可以支持需要长时间处理的请求，从几秒到几天，Camel 的 Saga EIP 是基于 <a href=\"https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA\">Microprofile 的 LRA</a>[3]（Long Running Action），同样也是支持协调任何通讯协议任何语言实现的分布式服务。</p>\n<p>Saga 的实现不会对数据进行加锁，而是在给操作定义它的“补偿操作”，当正常流程执行出错的时候触发那些已经执行过的操作的“补偿操作”，将流程回滚掉。“补偿操作”可以在 Camel route 上用 Java 或 XML DSL（Definition Specific Language）来定义。</p>\n<p>下面是一个 Java DSL 示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// action</span>\nfrom(<span class=\"hljs-string\">\"direct:reserveCredit\"</span>)\n  .bean(idService, <span class=\"hljs-string\">\"generateCustomId\"</span>) <span class=\"hljs-comment\">// generate a custom Id and set it in the body</span>\n  .to(<span class=\"hljs-string\">\"direct:creditReservation\"</span>)\n\n<span class=\"hljs-comment\">// delegate action</span>\nfrom(<span class=\"hljs-string\">\"direct:creditReservation\"</span>)\n  .saga()\n  .propagation(SagaPropagation.SUPPORTS)\n  .option(<span class=\"hljs-string\">\"CreditId\"</span>, body()) <span class=\"hljs-comment\">// mark the current body as needed in the compensating action</span>\n  .compensation(<span class=\"hljs-string\">\"direct:creditRefund\"</span>)\n    .bean(creditService, <span class=\"hljs-string\">\"reserveCredit\"</span>)\n    .log(<span class=\"hljs-string\">\"Credit ${header.amount} reserved. Custom Id used is ${body}\"</span>);\n\n<span class=\"hljs-comment\">// called only if the saga is cancelled</span>\nfrom(<span class=\"hljs-string\">\"direct:creditRefund\"</span>)\n  .transform(header(<span class=\"hljs-string\">\"CreditId\"</span>)) <span class=\"hljs-comment\">// retrieve the CreditId option from headers</span>\n  .bean(creditService, <span class=\"hljs-string\">\"refundCredit\"</span>)\n  .log(<span class=\"hljs-string\">\"Credit for Custom Id ${body} refunded\"</span>);\n</code></pre>\n<p>XML DSL 示例：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">route</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">from</span> <span class=\"hljs-attr\">uri</span>=<span class=\"hljs-string\">\"direct:start\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">saga</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">compensation</span> <span class=\"hljs-attr\">uri</span>=<span class=\"hljs-string\">\"direct:compensation\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">completion</span> <span class=\"hljs-attr\">uri</span>=<span class=\"hljs-string\">\"direct:completion\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">optionName</span>=<span class=\"hljs-string\">\"myOptionKey\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constant</span>&gt;</span>myOptionValue<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">constant</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">optionName</span>=<span class=\"hljs-string\">\"myOptionKey2\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constant</span>&gt;</span>myOptionValue2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">constant</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">saga</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">to</span> <span class=\"hljs-attr\">uri</span>=<span class=\"hljs-string\">\"direct:action1\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">to</span> <span class=\"hljs-attr\">uri</span>=<span class=\"hljs-string\">\"direct:action2\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">route</span>&gt;</span>\n</code></pre>\n<p><a name=\"pQWuF\"></a></p>\n<h2>Eventuate Tram Saga</h2>\n<p><a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas\">Eventuate Tram Saga</a>[4] 框架是使用 JDBC / JPA 的 Java 微服务的一个 Saga 框架。它也和 Camel Saga 一样采用了 Java DSL 来定义补偿操作：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateOrderSaga</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">SimpleSaga</span>&lt;<span class=\"hljs-title\">CreateOrderSagaData</span>&gt; </span>{\n\n  <span class=\"hljs-keyword\">private</span> SagaDefinition&lt;CreateOrderSagaData&gt; sagaDefinition =\n          step()\n            .withCompensation(<span class=\"hljs-keyword\">this</span>::reject)\n          .step()\n            .invokeParticipant(<span class=\"hljs-keyword\">this</span>::reserveCredit)\n          .step()\n            .invokeParticipant(<span class=\"hljs-keyword\">this</span>::approve)\n          .build();\n\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SagaDefinition&lt;CreateOrderSagaData&gt; <span class=\"hljs-title\">getSagaDefinition</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.sagaDefinition;\n  }\n\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> CommandWithDestination <span class=\"hljs-title\">reserveCredit</span><span class=\"hljs-params\">(CreateOrderSagaData data)</span> </span>{\n    <span class=\"hljs-keyword\">long</span> orderId = data.getOrderId();\n    Long customerId = data.getOrderDetails().getCustomerId();\n    Money orderTotal = data.getOrderDetails().getOrderTotal();\n    <span class=\"hljs-keyword\">return</span> send(<span class=\"hljs-keyword\">new</span> ReserveCreditCommand(customerId, orderId, orderTotal))\n            .to(<span class=\"hljs-string\">\"customerService\"</span>)\n            .build();\n\n...\n</code></pre>\n<p><a name=\"scN9h\"></a></p>\n<h2>Apache ServiceComb Saga</h2>\n<p><a href=\"https://github.com/apache/incubator-servicecomb-saga\">ServiceComb Saga</a>[5] 也是一个微服务应用的数据最终一致性解决方案。相对于 <a href=\"http://design.inf.usi.ch/sites/default/files/biblio/rest-tcc.pdf\">TCC</a> 而言，在 try 阶段，Saga 会直接提交事务，后续 rollback 阶段则通过反向的补偿操作来完成。与前面两种不同是它是采用 Java 注解+拦截器的方式来进行“补偿”服务的定义。<br /></p>\n<p><a name=\"ouwrmp\"></a></p>\n<h4>架构：</h4>\n<p>Saga 是由 <strong>alpha</strong> 和 **omega **组成，其中：</p>\n<ul>\n<li>alpha 充当协调者的角色，主要负责对事务进行管理和协调；<br /></li>\n<li>omega 是微服务中内嵌的一个 agent，负责对网络请求进行拦截并向 alpha 上报事务事件；<br /></li>\n</ul>\n<p>下图展示了 alpha，omega 以及微服务三者的关系：<br />\n<img src=\"/img/saga/service-comb-saga.png?raw=true\" alt=\"ServiceComb Saga\"></p>\n<p><a name=\"ggflbq\"></a></p>\n<h4>使用示例：</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServiceA</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbsService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">IServiceA</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n  <span class=\"hljs-meta\">@Autowired</span>\n  <span class=\"hljs-keyword\">private</span> IServiceB serviceB;\n\n  <span class=\"hljs-meta\">@Autowired</span>\n  <span class=\"hljs-keyword\">private</span> IServiceC serviceC;\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getServiceName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"servicea\"</span>;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getTableName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"testa\"</span>;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-meta\">@SagaStart</span>\n  <span class=\"hljs-meta\">@Compensable</span>(compensationMethod = <span class=\"hljs-string\">\"cancelRun\"</span>)\n  <span class=\"hljs-meta\">@Transactional</span>(rollbackFor = Exception.class)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(InvokeContext invokeContext)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    LOG.info(<span class=\"hljs-string\">\"A.run called\"</span>);\n    doRunBusi();\n    <span class=\"hljs-keyword\">if</span> (invokeContext.isInvokeB(getServiceName())) {\n      serviceB.run(invokeContext);\n    }\n    <span class=\"hljs-keyword\">if</span> (invokeContext.isInvokeC(getServiceName())) {\n      serviceC.run(invokeContext);\n    }\n    <span class=\"hljs-keyword\">if</span> (invokeContext.isException(getServiceName())) {\n      LOG.info(<span class=\"hljs-string\">\"A.run exception\"</span>);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Exception(<span class=\"hljs-string\">\"A.run exception\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">cancelRun</span><span class=\"hljs-params\">(InvokeContext invokeContext)</span> </span>{\n    LOG.info(<span class=\"hljs-string\">\"A.cancel called\"</span>);\n    doCancelBusi();\n  }\n</code></pre>\n<p><a name=\"CnD8r\"></a></p>\n<h2>蚂蚁金服的实践</h2>\n<p>蚂蚁金服内部大规模在使用 TCC 模式分布式事务，主要用于金融核心等对一致性要求高、性能要求高的场景。在更上层的业务系统因为流程多流程长，开发 TCC 成本比较高，大都会权衡采用 Saga 模式来到达业务最终一致性，由于历史的原因不同的 BU 有自己的一套“补偿”事务的方案，基本上是两种：</p>\n<ul>\n<li>一种是当一个服务在失败时需要“重试”或“补偿”时，在执行服务前在数据库插入一条记录，记录状态，当异常时通过定时任务去查询数据库记录并进行“重试”或“补偿”，当业务流程执行成功则删除记录；</li>\n<li>另一种是设计一个状态机引擎和简单的 DSL，编排业务流程和记录业务状态，状态机引擎可以定义“补偿服务”，当异常时由状态机引擎反向调用“补偿服务”进行回滚，同时还会有一个“差错守护”平台，监控那些执行失败或补偿失败的业务流水，并不断进行“补偿”或“重试”；</li>\n</ul>\n<p><a name=\"MAZEu\"></a></p>\n<h2>方案对比</h2>\n<p>社区和业界的解决方案一般是两种，一种基本状态机或流程引擎通过 DSL 方式编排流程程和补偿定义，一种是基于 Java 注解+拦截器实现补偿，那么这两种方案有什么优缺点呢？</p>\n<table>\n<thead>\n<tr>\n<th><strong>方式</strong></th>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>状态机+DSL</td>\n<td><br />- 可以用可视化工具来定义业务流程，标准化，可读性高，可实现服务编排的功能<br />- 提高业务分析人员与程序开发人员的沟通效率<br />- 业务状态管理：流程本质就是一个状态机，可以很好的反映业务状态的流转<br />- 提高异常处理灵活性：可以实现宕机恢复后的“向前重试”或“向后补偿”<br />- 天然可以使用 Actor 模型或 SEDA 架构等异步处理引擎来执行，提高整体吞吐量<br /></td>\n<td><br />- 业务流程实际是由 JAVA 程序与 DSL 配置组成，程序与配置分离，开发起来比较繁琐<br />- 如果是改造现有业务，对业务侵入性高<br />- 引擎实现成本高<br /></td>\n</tr>\n<tr>\n<td>拦截器+java 注解</td>\n<td><br />- 程序与注解是在一起的，开发简单，学习成本低<br />- 方便接入现有业务<br />- 基于动态代理拦截器，框架实现成本低<br /></td>\n<td><br />- 框架无法提供 Actor 模型或 SEDA 架构等异步处理模式来提高系统吞吐量<br />- 框架无法提供业务状态管理<br />- 难以实现宕机恢复后的“向前重试”，因为无法恢复线程上下文<br /></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"EKm6f\"></a></p>\n<h1></h1>\n<p><a name=\"tw6CG\"></a></p>\n<h1>Seata Saga 的方案</h1>\n<p>Seata Saga 的简介可以看一下<a href=\"http://seata.io/zh-cn/docs/user/saga.html\">《Seata Saga 官网文档》</a>[6]。</p>\n<p>Seata Saga 采用了状态机+DSL 方案来实现，原因有以下几个：</p>\n<ul>\n<li>状态机+DSL 方案在实际生产中应用更广泛；</li>\n<li>可以使用 Actor 模型或 SEDA 架构等异步处理引擎来执行，提高整体吞吐量；</li>\n<li>通常在核心系统以上层的业务系统会伴随有“服务编排”的需求，而服务编排又有事务最终一致性要求，两者很难分割开，状态机+DSL 方案可以同时满足这两个需求；</li>\n<li>由于 Saga 模式在理论上是不保证隔离性的，在极端情况下可能由于脏写无法完成回滚操作，比如举一个极端的例子, 分布式事务内先给用户 A 充值，然后给用户 B 扣减余额，如果在给A用户充值成功，在事务提交以前，A 用户把线消费掉了，如果事务发生回滚，这时则没有办法进行补偿了，有些业务场景可以允许让业务最终成功，在回滚不了的情况下可以继续重试完成后面的流程，状态机+DSL的方案可以实现“向前”恢复上下文继续执行的能力, 让业务最终执行成功，达到最终一致性的目的。</li>\n</ul>\n<blockquote>\n<p>在不保证隔离性的情况下：业务流程设计时要遵循“宁可长款, 不可短款”的原则，长款意思是客户少了线机构多了钱，以机构信誉可以给客户退款，反之则是短款，少的线可能追不回来了。所以在业务流程设计上一定是先扣款。</p>\n</blockquote>\n<p><a name=\"4yL9U\"></a></p>\n<h3>状态定义语言(Seata State Language)</h3>\n<ol>\n<li>通过状态图来定义服务调用的流程并生成 json 状态语言定义文件；</li>\n<li>状态图中一个节点可以是调用一个服务，节点可以配置它的补偿节点；</li>\n<li>状态图 json 由状态机引擎驱动执行，当出现异常时状态引擎反向执行已成功节点对应的补偿节点将事务回滚；</li>\n</ol>\n<blockquote>\n<p>注意: 异常发生时是否进行补偿也可由用户自定义决定</p>\n</blockquote>\n<ol start=\"4\">\n<li>可以实现服务编排需求，支持单项选择、并发、异步、子状态机、参数转换、参数映射、服务执行状态判断、异常捕获等功能；</li>\n</ol>\n<p>假设有一个业务流程要调两个服务，先调库存扣减（InventoryService），再调余额扣减（BalanceService），保证在一个分布式内要么同时成功，要么同时回滚。两个参与者服务都有一个 reduce 方法，表示库存扣减或余额扣减，还有一个 compensateReduce 方法，表示补偿扣减操作。以 InventoryService 为例看一下它的接口定义：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">InventoryService</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * reduce\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> amount\n     * <span class=\"hljs-doctag\">@param</span> params\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">reduce</span><span class=\"hljs-params\">(String businessKey, BigDecimal amount, Map&lt;String, Object&gt; params)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * compensateReduce\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> params\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">compensateReduce</span><span class=\"hljs-params\">(String businessKey, Map&lt;String, Object&gt; params)</span></span>;\n}\n</code></pre>\n<p>这个业务流程对应的状态图：</p>\n<p><img src=\"/img/saga/demo_statelang.png?raw=true\" alt=\"示例状态图\">\n<br />对应的 JSON</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">\"Name\"</span>: <span class=\"hljs-string\">\"reduceInventoryAndBalance\"</span>,\n    <span class=\"hljs-attr\">\"Comment\"</span>: <span class=\"hljs-string\">\"reduce inventory then reduce balance in a transaction\"</span>,\n    <span class=\"hljs-attr\">\"StartState\"</span>: <span class=\"hljs-string\">\"ReduceInventory\"</span>,\n    <span class=\"hljs-attr\">\"Version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"States\"</span>: {\n        <span class=\"hljs-attr\">\"ReduceInventory\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"inventoryAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"reduce\"</span>,\n            <span class=\"hljs-attr\">\"CompensateState\"</span>: <span class=\"hljs-string\">\"CompensateReduceInventory\"</span>,\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"ChoiceState\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>,\n                <span class=\"hljs-string\">\"$.[count]\"</span>\n            ],\n            <span class=\"hljs-attr\">\"Output\"</span>: {\n                <span class=\"hljs-attr\">\"reduceInventoryResult\"</span>: <span class=\"hljs-string\">\"$.#root\"</span>\n            },\n            <span class=\"hljs-attr\">\"Status\"</span>: {\n                <span class=\"hljs-attr\">\"#root == true\"</span>: <span class=\"hljs-string\">\"SU\"</span>,\n                <span class=\"hljs-attr\">\"#root == false\"</span>: <span class=\"hljs-string\">\"FA\"</span>,\n                <span class=\"hljs-attr\">\"$Exception{java.lang.Throwable}\"</span>: <span class=\"hljs-string\">\"UN\"</span>\n            }\n        },\n        <span class=\"hljs-attr\">\"ChoiceState\"</span>:{\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"Choice\"</span>,\n            <span class=\"hljs-attr\">\"Choices\"</span>:[\n                {\n                    <span class=\"hljs-attr\">\"Expression\"</span>:<span class=\"hljs-string\">\"[reduceInventoryResult] == true\"</span>,\n                    <span class=\"hljs-attr\">\"Next\"</span>:<span class=\"hljs-string\">\"ReduceBalance\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Default\"</span>:<span class=\"hljs-string\">\"Fail\"</span>\n        },\n        <span class=\"hljs-attr\">\"ReduceBalance\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"balanceAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"reduce\"</span>,\n            <span class=\"hljs-attr\">\"CompensateState\"</span>: <span class=\"hljs-string\">\"CompensateReduceBalance\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>,\n                <span class=\"hljs-string\">\"$.[amount]\"</span>,\n                {\n                    <span class=\"hljs-attr\">\"throwException\"</span> : <span class=\"hljs-string\">\"$.[mockReduceBalanceFail]\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Output\"</span>: {\n                <span class=\"hljs-attr\">\"compensateReduceBalanceResult\"</span>: <span class=\"hljs-string\">\"$.#root\"</span>\n            },\n            <span class=\"hljs-attr\">\"Status\"</span>: {\n                <span class=\"hljs-attr\">\"#root == true\"</span>: <span class=\"hljs-string\">\"SU\"</span>,\n                <span class=\"hljs-attr\">\"#root == false\"</span>: <span class=\"hljs-string\">\"FA\"</span>,\n                <span class=\"hljs-attr\">\"$Exception{java.lang.Throwable}\"</span>: <span class=\"hljs-string\">\"UN\"</span>\n            },\n            <span class=\"hljs-attr\">\"Catch\"</span>: [\n                {\n                    <span class=\"hljs-attr\">\"Exceptions\"</span>: [\n                        <span class=\"hljs-string\">\"java.lang.Throwable\"</span>\n                    ],\n                    <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"CompensationTrigger\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"Succeed\"</span>\n        },\n        <span class=\"hljs-attr\">\"CompensateReduceInventory\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"inventoryAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"compensateReduce\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>\n            ]\n        },\n        <span class=\"hljs-attr\">\"CompensateReduceBalance\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"balanceAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"compensateReduce\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>\n            ]\n        },\n        <span class=\"hljs-attr\">\"CompensationTrigger\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"CompensationTrigger\"</span>,\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"Fail\"</span>\n        },\n        <span class=\"hljs-attr\">\"Succeed\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>:<span class=\"hljs-string\">\"Succeed\"</span>\n        },\n        <span class=\"hljs-attr\">\"Fail\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>:<span class=\"hljs-string\">\"Fail\"</span>,\n            <span class=\"hljs-attr\">\"ErrorCode\"</span>: <span class=\"hljs-string\">\"PURCHASE_FAILED\"</span>,\n            <span class=\"hljs-attr\">\"Message\"</span>: <span class=\"hljs-string\">\"purchase failed\"</span>\n        }\n    }\n}\n</code></pre>\n<p>状态语言在一定程度上参考了 <a href=\"https://docs.aws.amazon.com/zh_cn/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html\">AWS Step Functions</a>[7]。</p>\n<p><a name=\"2de9b28a\"></a></p>\n<h4>&quot;状态机&quot; 属性简介:</h4>\n<ul>\n<li>Name: 表示状态机的名称，必须唯一；</li>\n<li>Comment: 状态机的描述；</li>\n<li>Version: 状态机定义版本；</li>\n<li>StartState: 启动时运行的第一个&quot;状态&quot;；</li>\n<li>States: 状态列表，是一个 map 结构，key 是&quot;状态&quot;的名称，在状态机内必须唯一；</li>\n</ul>\n<p><a name=\"2b956670\"></a></p>\n<h4>&quot;状态&quot; 属性简介:</h4>\n<ul>\n<li>Type：&quot;状态&quot; 的类型，比如有：\n<ul>\n<li>ServiceTask: 执行调用服务任务；</li>\n<li>Choice: 单条件选择路由；</li>\n<li>CompensationTrigger: 触发补偿流程；</li>\n<li>Succeed: 状态机正常结束；</li>\n<li>Fail: 状态机异常结束；</li>\n<li>SubStateMachine: 调用子状态机；</li>\n</ul>\n</li>\n<li>ServiceName: 服务名称，通常是服务的beanId；</li>\n<li>ServiceMethod: 服务方法名称；</li>\n<li>CompensateState: 该&quot;状态&quot;的补偿&quot;状态&quot;；</li>\n<li>Input: 调用服务的输入参数列表，是一个数组，对应于服务方法的参数列表， $.表示使用表达式从状态机上下文中取参数，表达使用的 <a href=\"https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html\">SpringEL</a>[8]， 如果是常量直接写值即可；</li>\n<li>Output: 将服务返回的参数赋值到状态机上下文中，是一个 map 结构，key 为放入到状态机上文时的 key（状态机上下文也是一个 map），value 中 $. 是表示 SpringEL 表达式，表示从服务的返回参数中取值，#root 表示服务的整个返回参数；</li>\n<li>Status: 服务执行状态映射，框架定义了三个状态，SU 成功、FA 失败、UN 未知，我们需要把服务执行的状态映射成这三个状态，帮助框架判断整个事务的一致性，是一个 map 结构，key 是条件表达式，一般是取服务的返回值或抛出的异常进行判断，默认是 SpringEL 表达式判断服务返回参数，带 $Exception{开头表示判断异常类型，value 是当这个条件表达式成立时则将服务执行状态映射成这个值；</li>\n<li>Catch: 捕获到异常后的路由；</li>\n<li>Next: 服务执行完成后下一个执行的&quot;状态&quot;；</li>\n<li>Choices: Choice 类型的&quot;状态&quot;里, 可选的分支列表, 分支中的 Expression 为 SpringEL 表达式，Next 为当表达式成立时执行的下一个&quot;状态&quot;；</li>\n<li>ErrorCode: Fail 类型&quot;状态&quot;的错误码；</li>\n<li>Message: Fail 类型&quot;状态&quot;的错误信息；</li>\n</ul>\n<p>更多详细的状态语言解释请看<a href=\"http://seata.io/zh-cn/docs/user/saga.html\">《Seata Saga 官网文档》</a>[6<a href=\"http://seata.io/zh-cn/docs/user/saga.html\">http://seata.io/zh-cn/docs/user/saga.html</a>]。</p>\n<p><a name=\"209f0e37\"></a></p>\n<h3>状态机引擎原理:</h3>\n<p><img src=\"/img/saga/saga_engine_mechanism.png?raw=true\" alt=\"状态机引擎原理\"></p>\n<ul>\n<li>图中的状态图是先执行 stateA, 再执行 stataB，然后执行 stateC；</li>\n<li>&quot;状态&quot;的执行是基于事件驱动的模型，stataA 执行完成后，会产生路由消息放入 EventQueue，事件消费端从 EventQueue 取出消息，执行 stateB；</li>\n<li>在整个状态机启动时会调用 Seata Server 开启分布式事务，并生产 xid, 然后记录&quot;状态机实例&quot;启动事件到本地数据库；</li>\n<li>当执行到一个&quot;状态&quot;时会调用 Seata Server 注册分支事务，并生产 branchId, 然后记录&quot;状态实例&quot;开始执行事件到本地数据库；</li>\n<li>当一个&quot;状态&quot;执行完成后会记录&quot;状态实例&quot;执行结束事件到本地数据库, 然后调用 Seata Server 上报分支事务的状态；</li>\n<li>当整个状态机执行完成，会记录&quot;状态机实例&quot;执行完成事件到本地数据库, 然后调用 Seata Server 提交或回滚分布式事务；</li>\n</ul>\n<p><a name=\"808e95dc\"></a></p>\n<h3>状态机引擎设计:</h3>\n<p><img src=\"/img/saga/saga_engine.png?raw=true\" alt=\"状态机引擎设计\"></p>\n<p>状态机引擎的设计主要分成三层, 上层依赖下层，从下往上分别是：</p>\n<ul>\n<li>\n<p>Eventing 层：</p>\n<ul>\n<li>实现事件驱动架构, 可以压入事件, 并由消费端消费事件, 本层不关心事件是什么消费端执行什么，由上层实现；</li>\n</ul>\n</li>\n<li>\n<p>ProcessController 层：</p>\n<ul>\n<li>由于上层的 Eventing 驱动一个“空”流程执行的执行，&quot;state&quot;的行为和路由都未实现，由上层实现；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>基于以上两层理论上可以自定义扩展任何&quot;流程&quot;引擎。这两层的设计是参考了内部金融网络平台的设计。</p>\n</blockquote>\n<ul>\n<li>StateMachineEngine 层：\n<ul>\n<li>实现状态机引擎每种 state 的行为和路由逻辑；</li>\n<li>提供 API、状态机语言仓库；</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"73a9fddd\"></a></p>\n<h3>Saga 模式下服务设计的实践经验</h3>\n<p>下面是实践中总结的在 Saga 模式下微服务设计的一些经验，当然这是推荐做法，并不是说一定要 100% 遵循，没有遵循也有“绕过”方案。</p>\n<blockquote>\n<p>好消息：Seata Saga 模式对微服务的接口参数没有任务要求，这使得 Saga 模式可用于集成遗留系统或外部机构的服务。</p>\n</blockquote>\n<p><a name=\"d64c5051\"></a></p>\n<h4>允许空补偿</h4>\n<ul>\n<li>空补偿：原服务未执行，补偿服务执行了；</li>\n<li>出现原因：\n<ul>\n<li>原服务 超时（丢包）；</li>\n<li>Saga 事务触发 回滚；</li>\n<li>未收到原服务请求，先收到补偿请求；</li>\n</ul>\n</li>\n</ul>\n<p>所以服务设计时需要允许空补偿，即没有找到要补偿的业务主键时返回补偿成功并将原业务主键记录下来。</p>\n<p><a name=\"88a92b17\"></a></p>\n<h4>防悬挂控制</h4>\n<ul>\n<li>悬挂：补偿服务 比 原服务 先执行；</li>\n<li>出现原因：\n<ul>\n<li>原服务 超时（拥堵）；</li>\n<li>Saga 事务回滚，触发 回滚；</li>\n<li>拥堵的原服务到达；</li>\n</ul>\n</li>\n</ul>\n<p>所以要检查当前业务主键是否已经在空补偿记录下来的业务主键中存在，如果存在则要拒绝服务的执行。</p>\n<p><a name=\"ce766631\"></a></p>\n<h4>幂等控制</h4>\n<ul>\n<li>原服务与补偿服务都需要保证幂等性, 由于网络可能超时，可以设置重试策略，重试发生时要通过幂等控制避免业务数据重复更新。</li>\n</ul>\n<p><a name=\"FO5YS\"></a></p>\n<h1>总结</h1>\n<p>很多时候我们不需要强调强一性，我们基于 BASE 和 Saga 理论去设计更有弹性的系统，在分布式架构下获得更好的性能和容错能力。分布式架构没有银弹，只有适合特定场景的方案，事实上 Seata Saga 是一个具备“服务编排”和“Saga 分布式事务”能力的产品，总结下来它的适用场景是：</p>\n<ul>\n<li>适用于微服务架构下的“长事务”处理；</li>\n<li>适用于微服务架构下的“服务编排”需求；</li>\n<li>适用于金融核心系统以上的有大量组合服务的业务系统（比如在渠道层、产品层、集成层的系统）；</li>\n<li>适用于业务流程中需要集成遗留系统或外部机构提供的服务的场景（这些服务不可变不能对其提出改造要求）。</li>\n</ul>\n<p><a name=\"3X7vO\"></a></p>\n<h2>文中涉及相关链接</h2>\n<p>[1]<a href=\"https://github.com/aphyr/dist-sagas/blob/master/sagas.pdf\">https://github.com/aphyr/dist-sagas/blob/master/sagas.pdf</a><br />[2]<a href=\"http://microservices.io/patterns/data/saga.html\">http://microservices.io/patterns/data/saga.html</a><br />[3]<a href=\"https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA\">Microprofile 的 LRA</a>：<a href=\"https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA\">https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA</a><br />[4]<a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas\">Eventuate Tram Saga</a>：<a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas\">https://github.com/eventuate-tram/eventuate-tram-sagas</a><br />[5]<a href=\"https://github.com/apache/incubator-servicecomb-saga\">ServiceComb Saga</a>：<a href=\"https://github.com/apache/servicecomb-pack\">https://github.com/apache/servicecomb-pack</a><br />[6]<a href=\"http://seata.io/zh-cn/docs/user/saga.html\">Seata Saga 官网文档</a>：<a href=\"http://seata.io/zh-cn/docs/user/saga.html\">http://seata.io/zh-cn/docs/user/saga.html</a><br />[7]<a href=\"https://docs.aws.amazon.com/zh_cn/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html\">AWS Step Functions</a>：<a href=\"https://docs.aws.amazon.com/zh_cn/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html\">https://docs.aws.amazon.com/zh_cn/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html</a><br />[8]<a href=\"https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html\">SpringEL</a>：<a href=\"https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html\">https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html</a><br /></p>\n",
  "link": "/zh-cn/blog/design-more-flexable-application-by-saga.html",
  "meta": {
    "title": "基于 Seata Saga 设计更有弹性的金融应用",
    "keywords": "Saga,Seata,一致性,金融,弹性,分布式,事务",
    "description": "本文从金融分布式应用开发的一些痛点出发，结合理论和实践对社区和行业的解决方案进行了分析，并讲解了如何基于Seata saga设计更有弹性的金融应用",
    "author": "long187",
    "date": "2019-11-04"
  }
}