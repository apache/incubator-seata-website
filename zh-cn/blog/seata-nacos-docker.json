{
  "filename": "seata-nacos-docker.md",
  "__html": "<h1>Docker部署Seata与Nacos整合</h1>\n<p>运行所使用的demo<a href=\"https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata\">项目地址</a></p>\n<p>本文作者：FUNKYE(陈健斌),杭州某互联网公司主程。</p>\n<h1>前言</h1>\n<p>直连方式的Seata配置<a href=\"http://seata.io/zh-cn/blog/springboot-dubbo-mybatisplus-seata.html\">博客</a></p>\n<p>Seata整合Nacos配置<a href=\"http://seata.io/zh-cn/blog/seata-nacos-analysis.html\">博客</a></p>\n<p>我们接着前几篇篇的基础上去配置nacos做配置中心跟dubbo注册中心.</p>\n<h2>准备工作</h2>\n<p>​\t1.安装docker</p>\n<pre><code class=\"language-shell\">yum -y install docker\n</code></pre>\n<p>​\t2.拉取nacos以及seata镜像并运行</p>\n<pre><code class=\"language-shell\">docker run -d --name nacos -p 8848:8848 -e MODE=standalone -e MYSQL_MASTER_SERVICE_HOST=你的mysql所在ip -e MYSQL_MASTER_SERVICE_DB_NAME=nacos -e MYSQL_MASTER_SERVICE_USER=root -e MYSQL_MASTER_SERVICE_PASSWORD=mysql密码 -e MYSQL_SLAVE_SERVICE_HOST=你的mysql所在ip -e SPRING_DATASOURCE_PLATFORM=mysql -e MYSQL_DATABASE_NUM=1 nacos/nacos-server:latest\n</code></pre>\n<pre><code class=\"language-shell\">docker run -d --name seata -p 8091:8091 -e SEATA_IP=你想指定的ip -e SEATA_PORT=8091 seataio/seata-server:latest\n</code></pre>\n<h2>Seata配置</h2>\n<p>​\t1.由于seata容器内没有内置vim,我们可以直接将要文件夹cp到宿主机外来编辑好了,再cp回去</p>\n<pre><code>docker cp 容器id:seata-server/resources 你想放置的目录\n</code></pre>\n<p>​\t2.使用如下代码获取两个容器的ip地址</p>\n<pre><code>docker inspect --format='{{.NetworkSettings.IPAddress}}' ID/NAMES\n</code></pre>\n<p>​\t3.nacos-config.txt编辑为如下内容</p>\n<pre><code>transport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.thread-factory.boss-thread-prefix=NettyBoss\ntransport.thread-factory.worker-thread-prefix=NettyServerNIOWorker\ntransport.thread-factory.server-executor-thread-prefix=NettyServerBizHandler\ntransport.thread-factory.share-boss-worker=false\ntransport.thread-factory.client-selector-thread-prefix=NettyClientSelector\ntransport.thread-factory.client-selector-thread-size=1\ntransport.thread-factory.client-worker-thread-prefix=NettyClientWorkerThread\ntransport.thread-factory.boss-thread-size=1\ntransport.thread-factory.worker-thread-size=8\ntransport.shutdown.wait=3\nservice.vgroup_mapping.你的事务组名=default\nservice.enableDegrade=false\nservice.disable=false\nclient.rm.async.commit.buffer.limit=10000\nclient.rm.lock.retry.internal=10\nclient.rm.lock.retry.times=30\nclient.rm.report.retry.count=5\nclient.rm.lock.retry.policy.branch-rollback-on-conflict=true\nclient.rm.table.meta.check.enable=true\nclient.rm.report.success.enable=true\nclient.tm.commit.retry.count=5\nclient.tm.rollback.retry.count=5\nstore.mode=file\nstore.file.dir=file_store/data\nstore.file.max-branch-session-size=16384\nstore.file.max-global-session-size=512\nstore.file.file-write-buffer-cache-size=16384\nstore.file.flush-disk-mode=async\nstore.file.session.reload.read_size=100\nstore.db.datasource=dbcp\nstore.db.db-type=mysql\nstore.db.driver-class-name=com.mysql.jdbc.Driver\nstore.db.url=jdbc:mysql://你的mysql所在ip:3306/seata?useUnicode=true\nstore.db.user=mysql帐号\nstore.db.password=mysql密码\nstore.db.min-conn=1\nstore.db.max-conn=3\nstore.db.global.table=global_table\nstore.db.branch.table=branch_table\nstore.db.query-limit=100\nstore.db.lock-table=lock_table\nserver.recovery.committing-retry-period=1000\nserver.recovery.asyn-committing-retry-period=1000\nserver.recovery.rollbacking-retry-period=1000\nserver.recovery.timeout-retry-period=1000\nserver.max.commit.retry.timeout=-1\nserver.max.rollback.retry.timeout=-1\nclient.undo.data.validation=true\nclient.undo.log.serialization=jackson\nserver.undo.log.save.days=7\nserver.undo.log.delete.period=86400000\nclient.undo.log.table=undo_log\ntransport.serialization=seata\ntransport.compressor=none\nmetrics.enabled=false\nmetrics.registry-type=compact\nmetrics.exporter-list=prometheus\nmetrics.exporter-prometheus-port=9898\nclient.support.spring.datasource.autoproxy=false\n</code></pre>\n<p>详细参数配置请点<a href=\"http://seata.io/zh-cn/docs/user/configurations.html\">此处</a></p>\n<p>​\t4.registry.conf编辑为如下内容</p>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;\n\n  nacos {\n    serverAddr = &quot;nacos容器ip:8848&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n  eureka {\n    serviceUrl = &quot;http://localhost:8761/eureka&quot;\n    application = &quot;default&quot;\n    weight = &quot;1&quot;\n  }\n  redis {\n    serverAddr = &quot;localhost:6379&quot;\n    db = &quot;0&quot;\n  }\n  zk {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;127.0.0.1:2181&quot;\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  consul {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;127.0.0.1:8500&quot;\n  }\n  etcd3 {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;http://localhost:2379&quot;\n  }\n  sofa {\n    serverAddr = &quot;127.0.0.1:9603&quot;\n    application = &quot;default&quot;\n    region = &quot;DEFAULT_ZONE&quot;\n    datacenter = &quot;DefaultDataCenter&quot;\n    cluster = &quot;default&quot;\n    group = &quot;SEATA_GROUP&quot;\n    addressWaitTime = &quot;3000&quot;\n  }\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;\n\n  nacos {\n    serverAddr = &quot;nacos容器ip:8848&quot;\n    namespace = &quot;&quot;\n  }\n  consul {\n    serverAddr = &quot;127.0.0.1:8500&quot;\n  }\n  apollo {\n    app.id = &quot;seata-server&quot;\n    apollo.meta = &quot;http://192.168.1.204:8801&quot;\n  }\n  zk {\n    serverAddr = &quot;127.0.0.1:2181&quot;\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  etcd3 {\n    serverAddr = &quot;http://localhost:2379&quot;\n  }\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n</code></pre>\n<p>​\t5.配置完成后使用如下命令,把修改完成的registry.conf复制到容器中,并重启查看日志运行</p>\n<pre><code class=\"language-shell\">docker cp /home/seata/resources/registry.conf seata:seata-server/resources/\ndocker restart seata\ndocker logs -f seata\n</code></pre>\n<p>​\t<a href=\"http://6.xn--nacos-config-w19s089u.sh\">6.修改nacos-config.sh</a></p>\n<pre><code>for line in $(cat nacos-config.txt)\n\ndo\n\nkey=${line%%=*}\nvalue=${line#*=}\necho &quot;\\r\\n set &quot;${key}&quot; = &quot;${value}\n\nresult=`curl -X POST &quot;http://nacos容器的ip:8848/nacos/v1/cs/configs?dataId=$key&amp;group=SEATA_GROUP&amp;content=$value&quot;`\n\nif [ &quot;$result&quot;x == &quot;true&quot;x ]; then\n\n  echo &quot;\\033[42;37m $result \\033[0m&quot;\n\nelse\n\n  echo &quot;\\033[41;37 $result \\033[0m&quot;\n  let error++\n\nfi\n\ndone\n\n\nif [ $error -eq 0 ]; then\n\necho  &quot;\\r\\n\\033[42;37m init nacos config finished, please start seata-server. \\033[0m&quot;\n\nelse\n\necho  &quot;\\r\\n\\033[41;33m init nacos config fail. \\033[0m&quot;\n\nfi\n</code></pre>\n<p>​\t7.运行nacos-config.sh将配置上传的nacos中,登录nacos控制中心查看</p>\n<p><img src=\"/img/blog/20191202205912.png\" alt=\"20191202205912\"></p>\n<p>​\t如图所示便是成功了.</p>\n<h1>进行调试</h1>\n<p>​\t1.拉取博文中所示的项目,修改test-service的application.yml与registry.conf</p>\n<pre><code>registry {\n  type = &quot;nacos&quot;\n  file {\n    name = &quot;file.conf&quot;\n  }\n  nacos {\n    serverAddr = &quot;宿主机ip:8848&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n}\nconfig {\n  type = &quot;nacos&quot;\n  file {\n    name = &quot;file.conf&quot;\n  }\n  zk {\n    serverAddr = &quot;127.0.0.1:2181&quot;\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  nacos {\n    serverAddr = &quot;宿主机ip:8848&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n}\n\n</code></pre>\n<pre><code>server:\n  port: 38888\nspring:\n  application: \n      name: test-service\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    url: jdbc:mysql://mysqlip:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: 123456\ndubbo:\n  protocol:\n    threadpool: cached\n  scan:\n    base-packages: com.example\n  application:\n    qos-enable: false\n    name: testserver\n  registry:\n    id: my-registry\n    address:  nacos://宿主机ip:8848\nmybatis-plus:\n  mapper-locations: classpath:/mapper/*Mapper.xml\n  typeAliasesPackage: org.test.entity\n  global-config:\n    db-config:\n      field-strategy: not-empty\n      id-type: auto\n      db-type: mysql\n  configuration:\n    map-underscore-to-camel-case: true\n    cache-enabled: true\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    auto-mapping-unknown-column-behavior: none\n</code></pre>\n<p>​\t2.把修改完成的registry.conf复制到test-client-resources中,并修改application</p>\n<pre><code>spring:\n  application:\n     name: test\n  datasource:\n     driver-class-name: com.mysql.cj.jdbc.Driver\n     url: jdbc:mysql://mysqlIp:3306/test?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=Asia/Shanghai\n     username: root\n     password: 123456\n  mvc:\n    servlet:\n      load-on-startup: 1\n  http:\n    encoding:\n            force: true\n            charset: utf-8\n            enabled: true\n    multipart:\n      max-file-size: 10MB\n      max-request-size: 10MB\ndubbo:\n  registry:\n    id: my-registry\n    address:  nacos://宿主机ip:8848\n  application:\n    name: dubbo-demo-client\n    qos-enable: false\nserver:\n  port: 28888\n  max-http-header-size: 8192\n  address: 0.0.0.0\n  tomcat:\n    max-http-post-size: 104857600\n</code></pre>\n<p>​\t4.依次运行test-service,test-client.</p>\n<p>​\t5.查看nacos中服务列表是否如下图所示</p>\n<p><img src=\"/img/blog/20191203132351.png\" alt=\"20191203132351\"></p>\n<h1>总结</h1>\n<p>关于nacos与seata的docker部署已经完成了,更详细的内容希望希望大家访问以下地址阅读详细文档</p>\n<p><a href=\"https://nacos.io/zh-cn/index.html\">nacos官网</a></p>\n<p><a href=\"http://dubbo.apache.org/en-us/\">dubbo官网</a></p>\n<p><a href=\"http://seata.io/zh-cn/\">seata官网</a></p>\n<p><a href=\"https://www.docker.com/\">docker官网</a></p>\n",
  "link": "/zh-cn/blog/seata-nacos-docker.html",
  "meta": {
    "title": "Docker部署Seata与Nacos整合",
    "keywords": "Seata,Nacos,分布式事务",
    "description": "本文讲述如何使用Seata整合Nacos配置的Docker部署",
    "author": "FUNKYE",
    "date": "2019/12/03"
  }
}