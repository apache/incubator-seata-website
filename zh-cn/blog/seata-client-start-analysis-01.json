{
  "filename": "seata-client-start-analysis-01.md",
  "__html": "<blockquote>\n<p>“刚上手Seata，对其各个模块了解还不够深入？ <br>\n想深入研究Seata源码，却还未付诸实践？<br>\n想探究下在集成Seata后，自己的应用在启动过程中“偷偷”干了些啥？<br>\n想学习Seata作为一款优秀开源框架蕴含的设计理念和最佳实践？<br>\n如果你有上述任何想法之一，那么今天这篇文章，就是为你量身打造的~</p>\n</blockquote>\n<h2>前言</h2>\n<p>看过官网README的第一张图片的同学都应该清楚，Seata协调分布式事务的原理便在于通过其<strong>协调器侧</strong>的TC，来与<strong>应用侧</strong>的TM、RM进行各种通信与交互，来保证分布式事务中，多个事务参与者的数据一致性。那么Seata的协调器侧与应用侧之间，是如何建立连接并进行通信的呢？</p>\n<p>没错，答案就是Netty，Netty作为一款高性能的RPC通信框架，保证了TC与RM之间的高效通信，关于Netty的详细介绍，本文不再展开，今天我们探究的重点，在于<strong>应用侧在启动过程中，如何通过一系列Seata关键模块之间的协作（如RPC、Config/Registry Center等），来建立与协调器侧之间的通信</strong></p>\n<h2>从GlobalTransactionScanner说起</h2>\n<p>我们知道Seata提供了多个开发期注解，比如用于开启分布式事务的@GlobalTransactional、用于声明TCC两阶段服务的@TwoPhraseBusinessAction等，它们都是基于Spring AOP机制，对使用了注解的Bean方法分配对应的拦截器进行增强，来完成对应的处理逻辑。而GlobalTransactionScanner这个Spring Bean，就承载着为各个注解分配对应的拦截器的职责，从其Scanner的命名，我们也不难推断出，它是为了在Spring应用启动过程中，对与全局事务（GlobalTransactionScanner）相关的Bean进行扫描、处理的。</p>\n<p>除此之外，应用侧RPC客户端（TMClient、RMClient）初始化、与TC建立连接的流程，也是在GlobalTransactionScanner#afterPropertiesSet()中发起的：</p>\n<pre><code class=\"language-js\">    <span class=\"hljs-comment\">/**\n     * package：io.seata.spring.annotation\n     * class：GlobalTransactionScanner\n     */</span>\n    @Override\n    public <span class=\"hljs-keyword\">void</span> afterPropertiesSet() {\n        <span class=\"hljs-keyword\">if</span> (disableGlobalTransaction) {\n            <span class=\"hljs-keyword\">if</span> (LOGGER.isInfoEnabled()) {\n                LOGGER.info(<span class=\"hljs-string\">\"Global transaction is disabled.\"</span>);\n            }\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-comment\">//在Bean属性初始化之后，执行TM、RM的初始化</span>\n        initClient();\n\n    }\n</code></pre>\n<h2>RM &amp; TM 的初始化与连接过程</h2>\n<p>这里，我们以RMClient.init()为例说明，TMClient的初始化过程亦同理。</p>\n<h3>类关系的设计</h3>\n<p>查看RMClient#init()的源码，我们发现，RMClient先<strong>构造</strong>了一个RmNettyRemotingClient，然后执行其<strong>初始化</strong>init()方法。而RmNettyRemotingClient的<strong>构造器</strong>和<strong>初始化</strong>方法，都会逐层调用父类的构造器与初始化方法</p>\n<pre><code class=\"language-js\">    <span class=\"hljs-comment\">/**\n     * RMClient的初始化逻辑\n     * package：io.seata.rm\n     * class：RMClient\n     */</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> init(<span class=\"hljs-built_in\">String</span> applicationId, <span class=\"hljs-built_in\">String</span> transactionServiceGroup) {\n        <span class=\"hljs-comment\">//① 首先从RmNettyRemotingClient类开始，依次调用父类的构造器        </span>\n        RmNettyRemotingClient rmNettyRemotingClient = RmNettyRemotingClient.getInstance(applicationId, transactionServiceGroup);\n        rmNettyRemotingClient.setResourceManager(DefaultResourceManager.get());\n        rmNettyRemotingClient.setTransactionMessageHandler(DefaultRMHandler.get());\n        <span class=\"hljs-comment\">//② 然后从RmNettyRemotingClient类开始，依次调用父类的init()</span>\n        rmNettyRemotingClient.init();\n    }\n</code></pre>\n<p>上述RMClient系列各类之间的关系以及调用构造器和init()初始化方法的过程如下图示意：\n<img src=\"http://booogu.top/img/in-post/rmclient_relation.jpg\" alt=\"RMClient.init简化版流程与主要类之间的关系\"></p>\n<p>那么为何要将RMClient设计成这样较为复杂的继承关系呢？其实是为了将各层的职责、边界划分清楚，使得各层可以专注于特定逻辑处理，实现更好的扩展性，这部分的详细设计思路，可参考Seata RPC模块重构PR的操刀者乘辉兄的文章<a href=\"https://mp.weixin.qq.com/s/PCSZ4a8cgmyZNhbUrO-BZQ\">Seata-RPC重构之路</a>）</p>\n<h3>初始化的完整流程</h3>\n<p>各类的构造器与初始化方法中的主要逻辑，大家可以借助下面这个能表意的序列图来梳理下，此图大家也可先跳过不看，在下面我们分析过几个重点类后，再回头来看这些类是何时登场、如何交互的协作的。\n<img src=\"http://booogu.top/img/in-post/rmclient_initialization.png\" alt=\"RMClient的初始化流程\"></p>\n<h3>抓住核心——Channel的创建</h3>\n<p>首先我们需要知道，应用侧与协调器侧的通信是借助Netty的Channel（网络通道）来完成的，因此<strong>通信过程的关键在于Channel的创建</strong>，在Seata中，通过池化的方式（借助了common-pool中的对象池）方式来创建、管理Channel。</p>\n<p>这里我们有必要简要介绍下对象池的简单概念及其在Seata中的实现：\n涉及到的common-pool中的主要类：</p>\n<ul>\n<li><strong>GenericKeydObjectPool&lt;K, V&gt;</strong>：KV泛型对象池，提供对所有对象的存取管理，而对象的创建由其内部的工厂类来完成</li>\n<li><strong>KeyedPoolableObjectFactory&lt;K, V&gt;</strong>：KV泛型对象工厂，负责池化对象的创建，被对象池持有</li>\n</ul>\n<p>涉及到的Seata中对象池实现相关的主要类：</p>\n<ul>\n<li>首先，被池化管理的对象就是<strong>Channel</strong>，对应common-pool中的泛型V</li>\n<li><strong>NettyPoolKey</strong>：Channel对应的Key，对应common-pool中的泛型K，NettyPoolKey主要包含两个信息：\n<ul>\n<li><em>address</em>:创建Channel时，对应的TC Server地址</li>\n<li><em>message</em>:创建Channel时，向TC Server发送的RPC消息体</li>\n</ul>\n</li>\n<li><strong>GenericKeydObjectPool&lt;NettyPoolKey,Channel&gt;</strong>：Channel对象池</li>\n<li><strong>NettyPoolableFactory</strong>：创建Channel的工厂类</li>\n</ul>\n<p>认识了上述对象池相关的主要类之后，我们再来看看Seata中涉及Channel管理以及与RPC相关的几个主要类：</p>\n<ul>\n<li>NettyClientChannelManager：\n<ul>\n<li>持有Channel对象池</li>\n<li>与Channel对象池交互，对应用侧Channel进行管理（获取、释放、销毁、缓存等）</li>\n</ul>\n</li>\n<li>RpcClientBootstrap：RPC客户端核心引导类，持有Netty框架的Bootstrap对象，具备启停能力；具有根据连接地址来获取新Channel的能力，供Channel工厂类调用</li>\n<li>AbstractNettyRemotingClient：\n<ul>\n<li>初始化并持有RpcClientBootstrap</li>\n<li>应用侧Netty客户端的顶层抽象，抽象了应用侧RM/TM取得各自Channel对应的NettyPoolKey的能力，供NettyClientChannelManager调用</li>\n<li>初始化NettyPoolableFactory</li>\n</ul>\n</li>\n</ul>\n<p>了解上述概念后，我们可以把Seata中创建Channel的过程简化如下：\n<img src=\"http://booogu.top/img/in-post/create_channel.jpg\" alt=\"创建Channel对象过程\"></p>\n<p>看到这里，大家可以回过头再看看上面的<strong>RMClient的初始化序列图</strong>，应该会对图中各类的职责、关系，以及整个初始化过程的意图有一个比较清晰的理解了。</p>\n<h3>建立连接的时机与流程</h3>\n<p>那么，RMClient是何时与Server建立连接的呢？</p>\n<p>在RMClient初始化的过程中，大家会发现，很多init()方法都设定了一些定时任务，而Seata应用侧与协调器的重连（连接）机制，就是通过定时任务来实现的：</p>\n<pre><code class=\"language-js\">    <span class=\"hljs-comment\">/**\n     * package：io.seata.core.rpcn.netty\n     * class：AbstractNettyRemotingClient\n     */</span>\n    public <span class=\"hljs-keyword\">void</span> init() {\n        <span class=\"hljs-comment\">//设置定时器，定时重连TC Server</span>\n        timerExecutor.scheduleAtFixedRate(<span class=\"hljs-keyword\">new</span> Runnable() {\n            @Override\n            public <span class=\"hljs-keyword\">void</span> run() {\n                clientChannelManager.reconnect(getTransactionServiceGroup());\n            }\n        }, SCHEDULE_DELAY_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.MILLISECONDS);\n        <span class=\"hljs-keyword\">if</span> (NettyClientConfig.isEnableClientBatchSendRequest()) {\n            mergeSendExecutorService = <span class=\"hljs-keyword\">new</span> ThreadPoolExecutor(MAX_MERGE_SEND_THREAD,\n                MAX_MERGE_SEND_THREAD,\n                KEEP_ALIVE_TIME, TimeUnit.MILLISECONDS,\n                <span class=\"hljs-keyword\">new</span> LinkedBlockingQueue&lt;&gt;(),\n                <span class=\"hljs-keyword\">new</span> NamedThreadFactory(getThreadPrefix(), MAX_MERGE_SEND_THREAD));\n            mergeSendExecutorService.submit(<span class=\"hljs-keyword\">new</span> MergedSendRunnable());\n        }\n        <span class=\"hljs-keyword\">super</span>.init();\n        clientBootstrap.start();\n    }\n</code></pre>\n<p>我们通过跟踪一次reconnect的执行，看看上面探究的几个类之间是如何协作，完成RMClient与TC的连接的（实际上首次连接可能发生在registerResource的过程中，但流程一致）\n<img src=\"http://booogu.top/img/in-post/rmclient_connect_tcserver.png\" alt=\"RMClient与TC Server连接过程\"></p>\n<p>这个图中，大家可以重点关注这几个点：</p>\n<ul>\n<li>NettyClientChannelManager执行具体AbstractNettyRemotingClient中，获取NettyPoolKey的回调函数（getPoolKeyFunction()）：应用侧的不同Client（RMClient与TMClient），在创建Channel时使用的Key不同，使<strong>两者在重连TC Server时，发送的注册消息不同</strong>，这也是由两者在Seata中扮演的角色不同而决定的：\n<ul>\n<li>TMClient：扮演事务管理器角色，创建Channel时，仅向TC发送TM注册请求（RegisterTMRequest）即可</li>\n<li>RMClient：扮演资源管理器角色，需要管理应用侧所有的事务资源，因此在创建Channel时，需要在发送RM注册请求（RegesterRMRequest）前，获取应用侧所有事务资源（Resource）信息，注册至TC Server</li>\n</ul>\n</li>\n<li>在Channel对象工厂NettyPoolableFactory的makeObject（制造Channel）方法中，使用NettyPoolKey中的两项信息，完成了两项任务：\n<ul>\n<li>使用NettyPoolKey的address创建新的Channel</li>\n<li>使用NettyPoolKey的message以及新的Channel向TC Server发送注册请求，这就是Client向TC Server的连接（首次执行）或重连（非首次，由定时任务驱动执行）请求</li>\n</ul>\n</li>\n</ul>\n<p>以上内容，就是关于Seata应用侧的初始化及其与TC Server协调器侧建立连接的全过程分析。</p>\n<p>更深层次的细节，建议大家再根据本文梳理的脉络和提到的几个重点，细致地阅读下源码，相信定会有更深层次的理解和全新的收获！</p>\n<blockquote>\n<p>后记：考虑到篇幅以及保持一篇源码分析文章较为合适的信息量，本文前言中所说的<strong>配置、注册等模块协作配合</strong>并没有在文章中展开和体现。<br>\n在下篇源码剖析中，我会以<strong>配置中心</strong>和<strong>注册中心</strong>为重点，为大家分析，在RMClient/TM Client与TC Server建立连接之前，Seata应用侧是<strong>如何通过服务发现</strong>找到TC Server、如何<strong>从配置模块获取各种信息</strong>的。</p>\n</blockquote>\n",
  "link": "/zh-cn/blog/seata-client-start-analysis-01.html",
  "meta": {
    "layout": "post",
    "comments": "true",
    "title": "Seata应用侧启动过程剖析——RM & TM如何与TC建立连接",
    "date": "2021-02-28 21:08:00",
    "author": "\"booogu\"",
    "catalog": "true",
    "tags": "",
    "- Seata": ""
  }
}