{
  "filename": "manual-transaction-mode.md",
  "__html": "<h1>Manual Transaction 模式</h1>\n<p>回顾总览中的描述：一个分布式的全局事务，整体是 <strong>两阶段提交</strong> 的模型。全局事务是由若干分支事务组成的，分支事务要满足 <strong>两阶段提交</strong> 的模型要求，即需要每个分支事务都具备自己的：</p>\n<ul>\n<li>一阶段 prepare 行为</li>\n<li>二阶段 commit 或 rollback 行为</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/4420767-e48f0284a037d1df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Overview of a global transaction\"></p>\n<p>根据两阶段行为模式的不同，我们将分支事务划分为 <strong>Automatic (Branch) Transaction Mode</strong> 和 <strong>Manual (Branch) Transaction Mode</strong>.</p>\n<p>AT 模式（<a href=\"\">参考链接 TBD</a>）基于 <strong>支持本地 ACID 事务</strong> 的 <strong>关系型数据库</strong>：</p>\n<ul>\n<li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li>\n<li>二阶段 commit 行为：马上成功结束，<strong>自动</strong> 异步批量清理回滚日志。</li>\n<li>二阶段 rollback 行为：通过回滚日志，<strong>自动</strong> 生成补偿操作，完成数据回滚。</li>\n</ul>\n<p>相应的，MT 模式，不依赖于底层数据资源的事务支持：</p>\n<ul>\n<li>一阶段 prepare 行为：调用 <strong>自定义</strong> 的 prepare 逻辑。</li>\n<li>二阶段 commit 行为：调用 <strong>自定义</strong> 的 commit 逻辑。</li>\n<li>二阶段 rollback 行为：调用 <strong>自定义</strong> 的 rollback 逻辑。</li>\n</ul>\n<p>所谓 MT 模式，是指支持把 <strong>自定义</strong> 的分支事务纳入到全局事务的管理中。</p>\n",
  "link": "/zh-cn/blog/manual-transaction-mode.html",
  "meta": {
    "title": "MT 模式",
    "keywords": "MT 模式",
    "description": "介绍 MT 模式",
    "author": "kmmshmily",
    "date": "2019-02-13"
  }
}