{
  "filename": "springboot-dubbo-mybatisplus-seata.md",
  "__html": "<h1>SpringBoot+Dubbo+MybatisPlus整合Seata分布式事务</h1>\n<p><a href=\"https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata\">项目地址</a></p>\n<p>本文作者：FUNKYE(陈健斌),杭州某互联网公司主程。</p>\n<h1>前言</h1>\n<p>​    <strong>事务</strong>：事务是由一组操作构成的可靠的独立的工作单元，事务具备ACID的特性，即原子性、一致性、隔离性和持久性。\n​    <strong>分布式事务</strong>:当一个操作牵涉到多个服务,多台数据库协力完成时(比如分表分库后,业务拆分),多个服务中，本地的Transaction已经无法应对这个情况了,为了保证数据一致性，就需要用到分布式事务。\n​    <strong>Seata</strong> ：是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。\n​    <strong>本文目的</strong>：现如今微服务越来越流行，而市面上的分布式事务的方案可谓不少，参差不齐，比较流行的以MQ代表的保证的是消息最终一致性的解决方案（消费确认，消息回查，消息补偿机制等），以及TX-LCN的LCN模式协调本地事务来保证事务统一提交或回滚（已经停止更新，对Dubbo2.7不兼容）。而MQ的分布式事务太过复杂，TX-LCN断更，这时候需要一个高效可靠及易上手的分布式事务解决方案，Seata脱颖而出，本文要介绍的就是如何快速搭建一个整合Seata的Demo项目，一起来吧！</p>\n<h1>准备工作</h1>\n<p>1.首先安装mysql,eclipse之类常用的工具,这不展开了.</p>\n<p>2.访问seata下载中心<a href=\"http://seata.io/zh-cn/blog/download.html\">地址</a>我们使用的0.9.0版本</p>\n<p>3.下载并解压seata-server</p>\n<h2>建库建表</h2>\n<p>1.首先我们链接mysql创建一个名为seata的数据库,然后运行一下建表sql,这个在seata-server的conf文件夹内的db_store.sql就是我的所需要使用的sql了.</p>\n<pre><code class=\"language-mysql\">/*\nNavicat MySQL Data Transfer\nSource Server         : mysql\nSource Server Version : 50721\nSource Host           : localhost:3306\nSource Database       : seata\nTarget Server Type    : MYSQL\nTarget Server Version : 50721\nFile Encoding         : 65001\nDate: 2019-11-23 22:03:18\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n\n-- Table structure for branch_table\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `branch_table`;\nCREATE TABLE `branch_table` (\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(128) NOT NULL,\n  `transaction_id` bigint(20) DEFAULT NULL,\n  `resource_group_id` varchar(32) DEFAULT NULL,\n  `resource_id` varchar(256) DEFAULT NULL,\n  `lock_key` varchar(128) DEFAULT NULL,\n  `branch_type` varchar(8) DEFAULT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  `client_id` varchar(64) DEFAULT NULL,\n  `application_data` varchar(2000) DEFAULT NULL,\n  `gmt_create` datetime DEFAULT NULL,\n  `gmt_modified` datetime DEFAULT NULL,\n  PRIMARY KEY (`branch_id`),\n  KEY `idx_xid` (`xid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n\n-- Records of branch_table\n\n-- ----------------------------\n\n-- ----------------------------\n\n-- Table structure for global_table\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `global_table`;\nCREATE TABLE `global_table` (\n  `xid` varchar(128) NOT NULL,\n  `transaction_id` bigint(20) DEFAULT NULL,\n  `status` tinyint(4) NOT NULL,\n  `application_id` varchar(32) DEFAULT NULL,\n  `transaction_service_group` varchar(32) DEFAULT NULL,\n  `transaction_name` varchar(128) DEFAULT NULL,\n  `timeout` int(11) DEFAULT NULL,\n  `begin_time` bigint(20) DEFAULT NULL,\n  `application_data` varchar(2000) DEFAULT NULL,\n  `gmt_create` datetime DEFAULT NULL,\n  `gmt_modified` datetime DEFAULT NULL,\n  PRIMARY KEY (`xid`),\n  KEY `idx_gmt_modified_status` (`gmt_modified`,`status`),\n  KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n\n-- Records of global_table\n\n-- ----------------------------\n\n-- ----------------------------\n\n-- Table structure for lock_table\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `lock_table`;\nCREATE TABLE `lock_table` (\n  `row_key` varchar(128) NOT NULL,\n  `xid` varchar(96) DEFAULT NULL,\n  `transaction_id` mediumtext,\n  `branch_id` mediumtext,\n  `resource_id` varchar(256) DEFAULT NULL,\n  `table_name` varchar(32) DEFAULT NULL,\n  `pk` varchar(36) DEFAULT NULL,\n  `gmt_create` datetime DEFAULT NULL,\n  `gmt_modified` datetime DEFAULT NULL,\n  PRIMARY KEY (`row_key`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n\n-- Records of lock_table\n\n-- ----------------------------\n\n-- ----------------------------\n\n-- Table structure for undo_log\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n\n-- Records of undo_log\n</code></pre>\n<p>2.运行完上面的seata所需要的数据库后,我们进行搭建我们所需要写的demo的库,创建一个名为test的数据库,然后执行以下sql代码:</p>\n<pre><code class=\"language-mysql\">/*\nNavicat MySQL Data Transfer\nSource Server         : mysql\nSource Server Version : 50721\nSource Host           : localhost:3306\nSource Database       : test\nTarget Server Type    : MYSQL\nTarget Server Version : 50721\nFile Encoding         : 65001\nDate: 2019-11-23 22:03:24\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n\n-- Table structure for test\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `test`;\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `one` varchar(255) DEFAULT NULL,\n  `two` varchar(255) DEFAULT NULL,\n  `createTime` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n\n-- Records of test\n\n-- ----------------------------\n\nINSERT INTO `test` VALUES ('1', '1', '2', '2019-11-23 16:07:34');\n\n-- ----------------------------\n\n-- Table structure for undo_log\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n\n-- Records of undo_log\n</code></pre>\n<p>3.我们找到seata-server/conf 文件夹内的file编辑它:<img src=\"/img/blog/20191129132933.png\" alt=\"20191129132933\"></p>\n<p>4.再次找到其中的db配置方法块,更改方法如下图:<img src=\"/img/blog/20191129133111.png\" alt=\"\"></p>\n<p>好了,可以到bin目录去./seata-server.bat 运行看看了</p>\n<h1>创建项目</h1>\n<p>​\t首先我们使用的是eclipse,当然你也可以用idea之类的工具,详细请按下面步骤来运行</p>\n<p>​\t1.创建一个新的maven项目,并删除多余文件夹:<img src=\"/img/blog/20191129133354.png\" alt=\"20191129133354\"><img src=\"/img/blog/20191129133441.png\" alt=\"20191129133441\" style=\"zoom:150%;\" /></p>\n<p>​\t2.打开项目的pom.xml,加入以下依赖:</p>\n<pre><code class=\"language-java\">\t&lt;properties&gt;\n\t\t&lt;webVersion&gt;3.1&lt;/webVersion&gt;\n\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n\t\t&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n\t\t&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n\t\t&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n\t\t&lt;HikariCP.version&gt;3.2.0&lt;/HikariCP.version&gt;\n\t\t&lt;mybatis-plus-boot-starter.version&gt;3.2.0&lt;/mybatis-plus-boot-starter.version&gt;\n\t&lt;/properties&gt;\n\t&lt;parent&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n\t\t&lt;version&gt;2.1.8.RELEASE&lt;/version&gt;\n\t&lt;/parent&gt;\n\t&lt;dependencies&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;4.2.0&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;4.2.0&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.7.4.1&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n\t\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.2.60&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;7.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.9.2&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.9.2&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n \n\t\t&lt;!-- mybatis-plus begin --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;${mybatis-plus-boot-starter.version}&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- mybatis-plus end --&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;provided&lt;/scope&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.seata&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;seata-all&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;0.9.0.1&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- Zookeeper --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.4.9&lt;/version&gt;\n\t\t\t&lt;exclusions&gt;\n\t\t\t\t&lt;exclusion&gt;\n\t\t\t\t\t&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t\t\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n\t\t\t\t&lt;/exclusion&gt;\n\t\t\t&lt;/exclusions&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;2.5.4&lt;/version&gt; &lt;/dependency&gt; --&gt;\n \n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.freemarker&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;freemarker&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.1.20&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- 加上这个才能辨认到log4j2.yml文件 --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;jackson-dataformat-yaml&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt; &lt;!-- 引入log4j2依赖 --&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;mysql&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n\t\t\t&lt;exclusions&gt;\n\t\t\t\t&lt;exclusion&gt;\n\t\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t\t\t&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;\n\t\t\t\t&lt;/exclusion&gt;\n\t\t\t\t&lt;exclusion&gt;\n\t\t\t\t\t&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t\t\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n\t\t\t\t&lt;/exclusion&gt;\n\t\t\t&lt;/exclusions&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;test&lt;/scope&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.scala-lang&lt;/groupId&gt; &lt;artifactId&gt;scala-library&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;2.11.0&lt;/version&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n\t\t\t&lt;optional&gt;true&lt;/optional&gt;\n\t\t&lt;/dependency&gt;\n\t&lt;/dependencies&gt;\n\n</code></pre>\n<p>​\t3.再切换父项目为pom模式,还是pom文件,切换为 overview ,做如图操作:<img src=\"/img/blog/20191129134127.png\" alt=\"20191129134127\"></p>\n<p>4.创建我们的demo子项目,test-service:<img src=\"/img/blog/20191129135935.png\" alt=\"20191129135935\"></p>\n<p>​\t目录如下:</p>\n<img src=\"/img/blog/20191129140048.png\" alt=\"20191129140048\" style=\"zoom:200%;\" />\n<pre><code>创建EmbeddedZooKeeper.java文件,跟 ProviderApplication.java,代码如下:\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test;\n \n<span class=\"hljs-keyword\">import</span> java.io.File;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\n<span class=\"hljs-keyword\">import</span> java.util.UUID;\n \n<span class=\"hljs-keyword\">import</span> org.apache.zookeeper.server.ServerConfig;\n<span class=\"hljs-keyword\">import</span> org.apache.zookeeper.server.ZooKeeperServerMain;\n<span class=\"hljs-keyword\">import</span> org.apache.zookeeper.server.quorum.QuorumPeerConfig;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.SmartLifecycle;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.ErrorHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.util.SocketUtils;\n \n<span class=\"hljs-comment\">/**\n * from:\n * https://github.com/spring-projects/spring-xd/blob/v1.3.1.RELEASE/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/zookeeper/ZooKeeperUtils.java\n * \n * Helper class to start an embedded instance of standalone (non clustered) ZooKeeper.\n * \n * <span class=\"hljs-doctag\">NOTE:</span> at least an external standalone server (if not an ensemble) are recommended, even for\n * {<span class=\"hljs-doctag\">@link</span> org.springframework.xd.dirt.server.singlenode.SingleNodeApplication}\n * \n * <span class=\"hljs-doctag\">@author</span> Patrick Peralta\n * <span class=\"hljs-doctag\">@author</span> Mark Fisher\n * <span class=\"hljs-doctag\">@author</span> David Turanski\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EmbeddedZooKeeper</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">SmartLifecycle</span> </span>{\n \n    <span class=\"hljs-comment\">/**\n     * Logger.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(EmbeddedZooKeeper.class);\n \n    <span class=\"hljs-comment\">/**\n     * ZooKeeper client port. This will be determined dynamically upon startup.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> clientPort;\n \n    <span class=\"hljs-comment\">/**\n     * Whether to auto-start. Default is true.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> autoStartup = <span class=\"hljs-keyword\">true</span>;\n \n    <span class=\"hljs-comment\">/**\n     * Lifecycle phase. Default is 0.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> phase = <span class=\"hljs-number\">0</span>;\n \n    <span class=\"hljs-comment\">/**\n     * Thread for running the ZooKeeper server.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> Thread zkServerThread;\n \n    <span class=\"hljs-comment\">/**\n     * ZooKeeper server.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> ZooKeeperServerMain zkServer;\n \n    <span class=\"hljs-comment\">/**\n     * {<span class=\"hljs-doctag\">@link</span> ErrorHandler} to be invoked if an Exception is thrown from the ZooKeeper server thread.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> ErrorHandler errorHandler;\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> daemon = <span class=\"hljs-keyword\">true</span>;\n \n    <span class=\"hljs-comment\">/**\n     * Construct an EmbeddedZooKeeper with a random port.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">EmbeddedZooKeeper</span><span class=\"hljs-params\">()</span> </span>{\n        clientPort = SocketUtils.findAvailableTcpPort();\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Construct an EmbeddedZooKeeper with the provided port.\n     *\n     * <span class=\"hljs-doctag\">@param</span> clientPort\n     *            port for ZooKeeper server to bind to\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">EmbeddedZooKeeper</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> clientPort, <span class=\"hljs-keyword\">boolean</span> daemon)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.clientPort = clientPort;\n        <span class=\"hljs-keyword\">this</span>.daemon = daemon;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Returns the port that clients should use to connect to this embedded server.\n     * \n     * <span class=\"hljs-doctag\">@return</span> dynamically determined client port\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getClientPort</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.clientPort;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Specify whether to start automatically. Default is true.\n     * \n     * <span class=\"hljs-doctag\">@param</span> autoStartup\n     *            whether to start automatically\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAutoStartup</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> autoStartup)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.autoStartup = autoStartup;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * {<span class=\"hljs-doctag\">@inheritDoc</span>}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAutoStartup</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.autoStartup;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Specify the lifecycle phase for the embedded server.\n     * \n     * <span class=\"hljs-doctag\">@param</span> phase\n     *            the lifecycle phase\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPhase</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> phase)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.phase = phase;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * {<span class=\"hljs-doctag\">@inheritDoc</span>}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getPhase</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.phase;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * {<span class=\"hljs-doctag\">@inheritDoc</span>}\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isRunning</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> (zkServerThread != <span class=\"hljs-keyword\">null</span>);\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Start the ZooKeeper server in a background thread.\n     * &lt;p&gt;\n     * Register an error handler via {<span class=\"hljs-doctag\">@link</span> #setErrorHandler} in order to handle any exceptions thrown during startup or\n     * execution.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (zkServerThread == <span class=\"hljs-keyword\">null</span>) {\n            zkServerThread = <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> ServerRunnable(), <span class=\"hljs-string\">\"ZooKeeper Server Starter\"</span>);\n            zkServerThread.setDaemon(daemon);\n            zkServerThread.start();\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Shutdown the ZooKeeper server.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (zkServerThread != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-comment\">// The shutdown method is protected...thus this hack to invoke it.</span>\n            <span class=\"hljs-comment\">// This will log an exception on shutdown; see</span>\n            <span class=\"hljs-comment\">// https://issues.apache.org/jira/browse/ZOOKEEPER-1873 for details.</span>\n            <span class=\"hljs-keyword\">try</span> {\n                Method shutdown = ZooKeeperServerMain.class.getDeclaredMethod(<span class=\"hljs-string\">\"shutdown\"</span>);\n                shutdown.setAccessible(<span class=\"hljs-keyword\">true</span>);\n                shutdown.invoke(zkServer);\n            }\n \n            <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(e);\n            }\n \n            <span class=\"hljs-comment\">// It is expected that the thread will exit after</span>\n            <span class=\"hljs-comment\">// the server is shutdown; this will block until</span>\n            <span class=\"hljs-comment\">// the shutdown is complete.</span>\n            <span class=\"hljs-keyword\">try</span> {\n                zkServerThread.join(<span class=\"hljs-number\">5000</span>);\n                zkServerThread = <span class=\"hljs-keyword\">null</span>;\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                logger.warn(<span class=\"hljs-string\">\"Interrupted while waiting for embedded ZooKeeper to exit\"</span>);\n                <span class=\"hljs-comment\">// abandoning zk thread</span>\n                zkServerThread = <span class=\"hljs-keyword\">null</span>;\n            }\n        }\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Stop the server if running and invoke the callback when complete.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">(Runnable callback)</span> </span>{\n        stop();\n        callback.run();\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Provide an {<span class=\"hljs-doctag\">@link</span> ErrorHandler} to be invoked if an Exception is thrown from the ZooKeeper server thread. If none\n     * is provided, only error-level logging will occur.\n     * \n     * <span class=\"hljs-doctag\">@param</span> errorHandler\n     *            the {<span class=\"hljs-doctag\">@link</span> ErrorHandler} to be invoked\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setErrorHandler</span><span class=\"hljs-params\">(ErrorHandler errorHandler)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.errorHandler = errorHandler;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * Runnable implementation that starts the ZooKeeper server.\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServerRunnable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>{\n \n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">try</span> {\n                Properties properties = <span class=\"hljs-keyword\">new</span> Properties();\n                File file = <span class=\"hljs-keyword\">new</span> File(System.getProperty(<span class=\"hljs-string\">\"java.io.tmpdir\"</span>) + File.separator + UUID.randomUUID());\n                file.deleteOnExit();\n                properties.setProperty(<span class=\"hljs-string\">\"dataDir\"</span>, file.getAbsolutePath());\n                properties.setProperty(<span class=\"hljs-string\">\"clientPort\"</span>, String.valueOf(clientPort));\n \n                QuorumPeerConfig quorumPeerConfig = <span class=\"hljs-keyword\">new</span> QuorumPeerConfig();\n                quorumPeerConfig.parseProperties(properties);\n \n                zkServer = <span class=\"hljs-keyword\">new</span> ZooKeeperServerMain();\n                ServerConfig configuration = <span class=\"hljs-keyword\">new</span> ServerConfig();\n                configuration.readFrom(quorumPeerConfig);\n \n                zkServer.runFromConfig(configuration);\n            } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                <span class=\"hljs-keyword\">if</span> (errorHandler != <span class=\"hljs-keyword\">null</span>) {\n                    errorHandler.handleError(e);\n                } <span class=\"hljs-keyword\">else</span> {\n                    logger.error(<span class=\"hljs-string\">\"Exception running embedded ZooKeeper\"</span>, e);\n                }\n            }\n        }\n    }\n \n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;\n<span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;\n \n<span class=\"hljs-comment\">/**\n * \n * <span class=\"hljs-doctag\">@author</span> cjb\n * <span class=\"hljs-doctag\">@date</span> 2019/10/24\n */</span>\n<span class=\"hljs-meta\">@EnableTransactionManagement</span>\n<span class=\"hljs-meta\">@ComponentScan</span>(basePackages = {<span class=\"hljs-string\">\"org.test.config\"</span>, <span class=\"hljs-string\">\"org.test.service.impl\"</span>})\n<span class=\"hljs-meta\">@DubboComponentScan</span>(basePackages = <span class=\"hljs-string\">\"org.test.service.impl\"</span>)\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderApplication</span> </span>{\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">new</span> EmbeddedZooKeeper(<span class=\"hljs-number\">2181</span>, <span class=\"hljs-keyword\">false</span>).start();\n        SpringApplication app = <span class=\"hljs-keyword\">new</span> SpringApplication(ProviderApplication.class);\n        app.run(args);\n    }\n \n}\n\n</code></pre>\n<pre><code>创建实体包 org.test.entity以及创建实体类Test 用到了lombok,详细百度一下,eclipse装lombok插件\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.entity;\n \n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n<span class=\"hljs-keyword\">import</span> java.time.LocalDateTime;\n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.TableField;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;\n \n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiModel;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiModelProperty;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> lombok.EqualsAndHashCode;\n<span class=\"hljs-keyword\">import</span> lombok.experimental.Accessors;\n \n<span class=\"hljs-comment\">/**\n * &lt;p&gt;\n * 功能\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> Funkye\n * <span class=\"hljs-doctag\">@since</span> 2019-04-23\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"hljs-keyword\">false</span>)\n<span class=\"hljs-meta\">@Accessors</span>(chain = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-meta\">@ApiModel</span>(value = <span class=\"hljs-string\">\"test对象\"</span>, description = <span class=\"hljs-string\">\"功能\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n \n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"主键\"</span>)\n    <span class=\"hljs-meta\">@TableId</span>(value = <span class=\"hljs-string\">\"id\"</span>, type = IdType.AUTO)\n    <span class=\"hljs-keyword\">private</span> Integer id;\n \n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"one\"</span>)\n    <span class=\"hljs-meta\">@TableField</span>(<span class=\"hljs-string\">\"one\"</span>)\n    <span class=\"hljs-keyword\">private</span> String one;\n \n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"two\"</span>)\n    <span class=\"hljs-meta\">@TableField</span>(<span class=\"hljs-string\">\"two\"</span>)\n    <span class=\"hljs-keyword\">private</span> String two;\n \n    <span class=\"hljs-meta\">@ApiModelProperty</span>(value = <span class=\"hljs-string\">\"createTime\"</span>)\n    <span class=\"hljs-meta\">@TableField</span>(<span class=\"hljs-string\">\"createTime\"</span>)\n    <span class=\"hljs-keyword\">private</span> LocalDateTime createTime;\n \n}\n\n</code></pre>\n<p>​\t创建service,service.impl,mapper等包,依次创建ITestservice,以及实现类,mapper</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.service;\n \n<span class=\"hljs-keyword\">import</span> org.test.entity.Test;\n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService; \n \n<span class=\"hljs-comment\">/**\n * &lt;p&gt;\n * 功能 服务类\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> Funkye\n * <span class=\"hljs-doctag\">@since</span> 2019-04-10\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITestService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">IService</span>&lt;<span class=\"hljs-title\">Test</span>&gt; </span>{\n \n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.service.impl;\n \n \n \n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.annotation.Service;\n<span class=\"hljs-keyword\">import</span> org.test.entity.Test;\n<span class=\"hljs-keyword\">import</span> org.test.mapper.TestMapper;\n<span class=\"hljs-keyword\">import</span> org.test.service.ITestService;\n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n \n<span class=\"hljs-meta\">@Service</span>(version = <span class=\"hljs-string\">\"1.0.0\"</span>,interfaceClass =ITestService.class )\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestServiceImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ServiceImpl</span>&lt;<span class=\"hljs-title\">TestMapper</span>, <span class=\"hljs-title\">Test</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITestService</span> </span>{\n \n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.mapper;\n \n<span class=\"hljs-keyword\">import</span> org.test.entity.Test; \n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;\n \n<span class=\"hljs-comment\">/**\n * &lt;p&gt;\n * 功能 Mapper 接口\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> Funkye\n * <span class=\"hljs-doctag\">@since</span> 2019-04-10\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TestMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseMapper</span>&lt;<span class=\"hljs-title\">Test</span>&gt; </span>{\n \n}\n\n</code></pre>\n<pre><code>创建org.test.config包,创建SeataAutoConfig.java,配置信息都在此处,主要作用为代理数据,连接事务服务分组 \n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Primary;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n\n<span class=\"hljs-keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;\n<span class=\"hljs-keyword\">import</span> io.seata.spring.annotation.GlobalTransactionScanner;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SeataAutoConfig</span> </span>{\n\t<span class=\"hljs-meta\">@Autowired</span>(required = <span class=\"hljs-keyword\">true</span>)\n\t<span class=\"hljs-keyword\">private</span> DataSourceProperties dataSourceProperties;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(SeataAutoConfig.class);\n\n\t<span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"druidDataSource\"</span>) <span class=\"hljs-comment\">// 声明其为Bean实例</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">druidDataSource</span><span class=\"hljs-params\">()</span> </span>{\n\t\tDruidDataSource druidDataSource = <span class=\"hljs-keyword\">new</span> DruidDataSource();\n\t\tlogger.info(<span class=\"hljs-string\">\"dataSourceProperties.getUrl():{}\"</span>, dataSourceProperties.getUrl());\n\t\tdruidDataSource.setUrl(dataSourceProperties.getUrl());\n\t\tdruidDataSource.setUsername(dataSourceProperties.getUsername());\n\t\tdruidDataSource.setPassword(dataSourceProperties.getPassword());\n\t\tdruidDataSource.setDriverClassName(dataSourceProperties.getDriverClassName());\n\t\tdruidDataSource.setInitialSize(<span class=\"hljs-number\">0</span>);\n\t\tdruidDataSource.setMaxActive(<span class=\"hljs-number\">180</span>);\n\t\tdruidDataSource.setMaxWait(<span class=\"hljs-number\">60000</span>);\n\t\tdruidDataSource.setMinIdle(<span class=\"hljs-number\">0</span>);\n\t\tdruidDataSource.setValidationQuery(<span class=\"hljs-string\">\"Select 1 from DUAL\"</span>);\n\t\tdruidDataSource.setTestOnBorrow(<span class=\"hljs-keyword\">false</span>);\n\t\tdruidDataSource.setTestOnReturn(<span class=\"hljs-keyword\">false</span>);\n\t\tdruidDataSource.setTestWhileIdle(<span class=\"hljs-keyword\">true</span>);\n\t\tdruidDataSource.setTimeBetweenEvictionRunsMillis(<span class=\"hljs-number\">60000</span>);\n\t\tdruidDataSource.setMinEvictableIdleTimeMillis(<span class=\"hljs-number\">25200000</span>);\n\t\tdruidDataSource.setRemoveAbandoned(<span class=\"hljs-keyword\">true</span>);\n\t\tdruidDataSource.setRemoveAbandonedTimeout(<span class=\"hljs-number\">1800</span>);\n\t\tdruidDataSource.setLogAbandoned(<span class=\"hljs-keyword\">true</span>);\n\t\tlogger.info(<span class=\"hljs-string\">\"装载dataSource........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> druidDataSource;\n\t}\n\n\t<span class=\"hljs-comment\">/**\n\t * init datasource proxy\n\t * \n\t * <span class=\"hljs-doctag\">@Param</span>: druidDataSource datasource bean instance\n\t * <span class=\"hljs-doctag\">@Return</span>: DataSourceProxy datasource proxy\n\t */</span>\n\t<span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"dataSource\"</span>)\n\t<span class=\"hljs-meta\">@Primary</span> <span class=\"hljs-comment\">// 在同样的DataSource中，首先使用被标注的DataSource</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSourceProxy <span class=\"hljs-title\">dataSourceProxy</span><span class=\"hljs-params\">(@Qualifier(value = <span class=\"hljs-string\">\"druidDataSource\"</span>)</span> DruidDataSource druidDataSource) </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"代理dataSource........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DataSourceProxy(druidDataSource);\n\t}\n\n\t<span class=\"hljs-comment\">/**\n\t * init global transaction scanner\n\t *\n\t * <span class=\"hljs-doctag\">@Return</span>: GlobalTransactionScanner\n\t */</span>\n\t<span class=\"hljs-meta\">@Bean</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalTransactionScanner <span class=\"hljs-title\">globalTransactionScanner</span><span class=\"hljs-params\">()</span> </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"配置seata........\"</span>);\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> GlobalTransactionScanner(<span class=\"hljs-string\">\"test-service\"</span>, <span class=\"hljs-string\">\"test-group\"</span>);\n\t}\n}\n</code></pre>\n<pre><code>再创建mybatisplus所需的配置文件MybatisPlusConfig  \n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n \n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n \n<span class=\"hljs-keyword\">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.parser.ISqlParser;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser;\n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;\n \n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-comment\">// @MapperScan(\"com.baomidou.springboot.mapper*\")//这个注解，作用相当于下面的@Bean</span>\n<span class=\"hljs-comment\">// MapperScannerConfigurer，2者配置1份即可</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MybatisPlusConfig</span> </span>{\n \n    <span class=\"hljs-comment\">/**\n     * mybatis-plus分页插件&lt;br&gt;\n     * 文档：http://mp.baomidou.com&lt;br&gt;\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PaginationInterceptor <span class=\"hljs-title\">paginationInterceptor</span><span class=\"hljs-params\">()</span> </span>{\n        PaginationInterceptor paginationInterceptor = <span class=\"hljs-keyword\">new</span> PaginationInterceptor();\n        List&lt;ISqlParser&gt; sqlParserList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;ISqlParser&gt;();\n        <span class=\"hljs-comment\">// 攻击 SQL 阻断解析器、加入解析链</span>\n        sqlParserList.add(<span class=\"hljs-keyword\">new</span> BlockAttackSqlParser());\n        paginationInterceptor.setSqlParserList(sqlParserList);\n        <span class=\"hljs-keyword\">return</span> paginationInterceptor;\n    }\n \n    <span class=\"hljs-comment\">/**\n     * 相当于顶部的： {<span class=\"hljs-doctag\">@code</span> <span class=\"hljs-doctag\">@MapperScan</span>(\"com.baomidou.springboot.mapper*\")} 这里可以扩展，比如使用配置文件来配置扫描Mapper的路径\n     */</span>\n \n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MapperScannerConfigurer <span class=\"hljs-title\">mapperScannerConfigurer</span><span class=\"hljs-params\">()</span> </span>{\n        MapperScannerConfigurer scannerConfigurer = <span class=\"hljs-keyword\">new</span> MapperScannerConfigurer();\n        scannerConfigurer.setBasePackage(<span class=\"hljs-string\">\"org.test.mapper\"</span>);\n        <span class=\"hljs-keyword\">return</span> scannerConfigurer;\n    }\n \n}\n\n</code></pre>\n<p>​\t 再创建<strong>resources目录,创建mapper文件夹,application.yml等文件</strong></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n<span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">38888</span>\n<span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  application:</span> \n<span class=\"hljs-attr\">      name:</span> <span class=\"hljs-string\">test-service</span>\n<span class=\"hljs-attr\">  datasource:</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span>\n<span class=\"hljs-attr\">    driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-attr\">    username:</span> <span class=\"hljs-string\">root</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-number\">123456</span>\n<span class=\"hljs-attr\">dubbo:</span>\n<span class=\"hljs-attr\">  protocol:</span>\n<span class=\"hljs-attr\">    loadbalance:</span> <span class=\"hljs-string\">leastactive</span>\n<span class=\"hljs-attr\">    threadpool:</span> <span class=\"hljs-string\">cached</span>\n<span class=\"hljs-attr\">  scan:</span>\n<span class=\"hljs-attr\">    base-packages:</span> <span class=\"hljs-string\">org。test.service</span>\n<span class=\"hljs-attr\">  application:</span>\n<span class=\"hljs-attr\">    qos-enable:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">testserver</span>\n<span class=\"hljs-attr\">  registry:</span>\n<span class=\"hljs-attr\">    id:</span> <span class=\"hljs-string\">my-registry</span>\n<span class=\"hljs-attr\">    address:</span>  <span class=\"hljs-attr\">zookeeper://127.0.0.1:2181?client=curator</span>\n<span class=\"hljs-attr\">mybatis-plus:</span>\n<span class=\"hljs-attr\">  mapper-locations:</span> <span class=\"hljs-attr\">classpath:/mapper/*Mapper.xml</span>\n<span class=\"hljs-attr\">  typeAliasesPackage:</span> <span class=\"hljs-string\">org.test.entity</span>\n<span class=\"hljs-attr\">  global-config:</span>\n<span class=\"hljs-attr\">    db-config:</span>\n<span class=\"hljs-attr\">      field-strategy:</span> <span class=\"hljs-string\">not-empty</span>\n<span class=\"hljs-attr\">      id-type:</span> <span class=\"hljs-string\">auto</span>\n<span class=\"hljs-attr\">      db-type:</span> <span class=\"hljs-string\">mysql</span>\n<span class=\"hljs-attr\">  configuration:</span>\n<span class=\"hljs-attr\">    map-underscore-to-camel-case:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    cache-enabled:</span> <span class=\"hljs-literal\">true</span>      \n<span class=\"hljs-attr\">    auto-mapping-unknown-column-behavior:</span> <span class=\"hljs-string\">none</span>\n\n</code></pre>\n<p>​\t 创建file.conf,此处的service 内的vgroup_mapping.你的事务分组,比如上<strong>面SeataAutoConfig内配置了test-group,那么这里也要改为test-group</strong>,然后下面ip端口都是seata运行的ip跟端口就行了</p>\n<pre><code class=\"language-java\">transport {\n  type = <span class=\"hljs-string\">\"TCP\"</span>\n  server = <span class=\"hljs-string\">\"NIO\"</span>\n  heartbeat = <span class=\"hljs-keyword\">true</span>\n  thread-factory {\n    boss-thread-prefix = <span class=\"hljs-string\">\"NettyBoss\"</span>\n    worker-thread-prefix = <span class=\"hljs-string\">\"NettyServerNIOWorker\"</span>\n    server-executor-thread-prefix = <span class=\"hljs-string\">\"NettyServerBizHandler\"</span>\n    share-boss-worker = <span class=\"hljs-keyword\">false</span>\n    client-selector-thread-prefix = <span class=\"hljs-string\">\"NettyClientSelector\"</span>\n    client-selector-thread-size = <span class=\"hljs-number\">1</span>\n    client-worker-thread-prefix = <span class=\"hljs-string\">\"NettyClientWorkerThread\"</span>\n    boss-thread-size = <span class=\"hljs-number\">1</span>\n    worker-thread-size = <span class=\"hljs-number\">8</span>\n  }\n  shutdown {\n    wait = <span class=\"hljs-number\">3</span>\n  }\n  serialization = <span class=\"hljs-string\">\"seata\"</span>\n  compressor = <span class=\"hljs-string\">\"none\"</span>\n}\nservice {\n  vgroup_mapping.test-group = <span class=\"hljs-string\">\"default\"</span>\n  <span class=\"hljs-keyword\">default</span>.grouplist = <span class=\"hljs-string\">\"127.0.0.1:8091\"</span>\n  enableDegrade = <span class=\"hljs-keyword\">false</span>\n  disable = <span class=\"hljs-keyword\">false</span>\n  max.commit.retry.timeout = <span class=\"hljs-string\">\"-1\"</span>\n  max.rollback.retry.timeout = <span class=\"hljs-string\">\"-1\"</span>\n}\n \nclient {\n  async.commit.buffer.limit = <span class=\"hljs-number\">10000</span>\n  lock {\n    retry.internal = <span class=\"hljs-number\">10</span>\n    retry.times = <span class=\"hljs-number\">30</span>\n  }\n  report.retry.count = <span class=\"hljs-number\">5</span>\n  tm.commit.retry.count = <span class=\"hljs-number\">1</span>\n  tm.rollback.retry.count = <span class=\"hljs-number\">1</span>\n  undo.log.table = <span class=\"hljs-string\">\"undo_log\"</span>\n}\n \nrecovery {\n  committing-retry-period = <span class=\"hljs-number\">1000</span>\n  asyn-committing-retry-period = <span class=\"hljs-number\">1000</span>\n  rollbacking-retry-period = <span class=\"hljs-number\">1000</span>\n  timeout-retry-period = <span class=\"hljs-number\">1000</span>\n}\n \ntransaction {\n  undo.data.validation = <span class=\"hljs-keyword\">true</span>\n  undo.log.serialization = <span class=\"hljs-string\">\"jackson\"</span>\n  undo.log.save.days = <span class=\"hljs-number\">7</span>\n  undo.log.delete.period = <span class=\"hljs-number\">86400000</span>\n  undo.log.table = <span class=\"hljs-string\">\"undo_log\"</span>\n}\n \nmetrics {\n  enabled = <span class=\"hljs-keyword\">false</span>\n  registry-type = <span class=\"hljs-string\">\"compact\"</span>\n  exporter-list = <span class=\"hljs-string\">\"prometheus\"</span>\n  exporter-prometheus-port = <span class=\"hljs-number\">9898</span>\n}\n \nsupport {\n  spring {\n    datasource.autoproxy = <span class=\"hljs-keyword\">false</span>\n  }\n}\n\n</code></pre>\n<p>创建registry.conf,来指定file,zk的ip端口之类的配置</p>\n<pre><code class=\"language-java\">registry {\n  type = <span class=\"hljs-string\">\"file\"</span>\n  file {\n    name = <span class=\"hljs-string\">\"file.conf\"</span>\n  }\n}\nconfig {\n  type = <span class=\"hljs-string\">\"file\"</span>\n  file {\n    name = <span class=\"hljs-string\">\"file.conf\"</span>\n  }\n  zk {\n    serverAddr = <span class=\"hljs-string\">\"127.0.0.1:2181\"</span>\n    session.timeout = <span class=\"hljs-number\">6000</span>\n    connect.timeout = <span class=\"hljs-number\">2000</span>\n  }\n}\n\n</code></pre>\n<p>​\t 大功告成,可以直接运行啦,这时候观察seata-server<img src=\"/img/blog/20191129142115.png\" alt=\"20191129142115\"></p>\n<p>​\t接下来我们创建test-client项目项目,这里就不赘述了,跟上面的test-service一样的创建方式</p>\n<p>​\t接下来我们复制test-service内的service跟实体过去,当然你嫌麻烦,可以单独搞个子项目放通用的service跟实体,一些工具类等等,我这边为了快速搭建这个demo,就选择复制黏贴的方式了.</p>\n<p>目录结构:<img src=\"/img/blog/20191129142349.png\" alt=\"\"></p>\n<pre><code>然后我们创建ClientApplication:\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test;\n \n<span class=\"hljs-keyword\">import</span> java.util.TimeZone;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.Executor;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.EnableAsync;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.EnableScheduling;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n<span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration;\n \n<span class=\"hljs-meta\">@SpringBootApplication</span>(exclude = {DataSourceAutoConfiguration.class, MybatisPlusAutoConfiguration.class})\n<span class=\"hljs-meta\">@EnableScheduling</span>\n<span class=\"hljs-meta\">@EnableAsync</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>(scanBasePackages = {<span class=\"hljs-string\">\"org.test.service\"</span>})\n<span class=\"hljs-meta\">@ComponentScan</span>(basePackages = {<span class=\"hljs-string\">\"org.test.service\"</span>, <span class=\"hljs-string\">\"org.test.controller\"</span>, <span class=\"hljs-string\">\"org.test.config\"</span>})\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClientApplication</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        TimeZone.setDefault(TimeZone.getTimeZone(<span class=\"hljs-string\">\"Asia/Shanghai\"</span>));\n        SpringApplication app = <span class=\"hljs-keyword\">new</span> SpringApplication(ClientApplication.class);\n        app.run(args);\n    }\n \n    <span class=\"hljs-meta\">@Bean</span>(name = <span class=\"hljs-string\">\"threadPoolTaskExecutor\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">threadPoolTaskExecutor</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ThreadPoolTaskExecutor();\n    }\n}\n\n</code></pre>\n<p>再到config包内创建SwaggerConfig :</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n \n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n \n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n \n<span class=\"hljs-keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.builders.PathSelectors;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.service.ApiInfo;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.service.Contact;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.service.Parameter;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.spi.DocumentationType;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;\n<span class=\"hljs-keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;\n \n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableSwagger</span>2\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwaggerConfig</span> </span>{\n    <span class=\"hljs-comment\">// swagger2的配置文件，这里可以配置swagger2的一些基本的内容，比如扫描的包等等</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">createRestApi</span><span class=\"hljs-params\">()</span> </span>{\n        List&lt;Parameter&gt; pars = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Parameter&gt;();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()\n            <span class=\"hljs-comment\">// 为当前包路径</span>\n            .apis(RequestHandlerSelectors.basePackage(<span class=\"hljs-string\">\"org.test.controller\"</span>)).paths(PathSelectors.any()).build()\n            .globalOperationParameters(pars);\n    }\n \n    <span class=\"hljs-comment\">// 构建 api文档的详细信息函数,注意这里的注解引用的是哪个</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ApiInfo <span class=\"hljs-title\">apiInfo</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ApiInfoBuilder()\n            <span class=\"hljs-comment\">// 页面标题</span>\n            .title(<span class=\"hljs-string\">\"项目接口\"</span>)\n            <span class=\"hljs-comment\">// 创建人</span>\n            .contact(<span class=\"hljs-keyword\">new</span> Contact(<span class=\"hljs-string\">\"FUNKYE\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>))\n            <span class=\"hljs-comment\">// 版本号</span>\n            .version(<span class=\"hljs-string\">\"1.0\"</span>)\n            <span class=\"hljs-comment\">// 描述</span>\n            .description(<span class=\"hljs-string\">\"API 描述\"</span>).build();\n    }\n}\n\n</code></pre>\n<p>​\t再创建SpringMvcConfigure,再里面放入seata的配置,我为了偷懒直接集成在mvc配置的类里了,大家规范点可以另外创建个配置seata的类,大家可以发现下面还是有个组名称,我把两个项目都分配到一个组去,貌似另外取一个也没事的.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n \n<span class=\"hljs-keyword\">import</span> java.nio.charset.Charset; \n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.Ordered;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.MediaType;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.StringHttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.cors.CorsConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.filter.CorsFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;\n \n<span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;\n<span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> com.google.common.collect.Maps;\n \n<span class=\"hljs-keyword\">import</span> io.seata.spring.annotation.GlobalTransactionScanner;\n \n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpringMvcConfigure</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">WebMvcConfigurer</span> </span>{\n \n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> FilterRegistrationBean <span class=\"hljs-title\">corsFilter</span><span class=\"hljs-params\">()</span> </span>{\n        UrlBasedCorsConfigurationSource source = <span class=\"hljs-keyword\">new</span> UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = <span class=\"hljs-keyword\">new</span> CorsConfiguration();\n        config.setAllowCredentials(<span class=\"hljs-keyword\">true</span>);\n        config.addAllowedOrigin(<span class=\"hljs-string\">\"*\"</span>);\n        config.addAllowedHeader(CorsConfiguration.ALL);\n        config.addAllowedMethod(CorsConfiguration.ALL);\n        source.registerCorsConfiguration(<span class=\"hljs-string\">\"/**\"</span>, config);\n        FilterRegistrationBean filterRegistrationBean = <span class=\"hljs-keyword\">new</span> FilterRegistrationBean(<span class=\"hljs-keyword\">new</span> CorsFilter(source));\n        filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);\n        filterRegistrationBean.setOrder(<span class=\"hljs-number\">1</span>);\n        filterRegistrationBean.setEnabled(<span class=\"hljs-keyword\">true</span>);\n        filterRegistrationBean.addUrlPatterns(<span class=\"hljs-string\">\"/**\"</span>);\n        Map&lt;String, String&gt; initParameters = Maps.newHashMap();\n        initParameters.put(<span class=\"hljs-string\">\"excludes\"</span>, <span class=\"hljs-string\">\"/favicon.ico,/img/*,/js/*,/css/*\"</span>);\n        initParameters.put(<span class=\"hljs-string\">\"isIncludeRichText\"</span>, <span class=\"hljs-string\">\"true\"</span>);\n        filterRegistrationBean.setInitParameters(initParameters);\n        <span class=\"hljs-keyword\">return</span> filterRegistrationBean;\n    }\n \n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> InternalResourceViewResolver <span class=\"hljs-title\">viewResolver</span><span class=\"hljs-params\">()</span> </span>{\n        InternalResourceViewResolver viewResolver = <span class=\"hljs-keyword\">new</span> InternalResourceViewResolver();\n        viewResolver.setPrefix(<span class=\"hljs-string\">\"/WEB-INF/jsp/\"</span>);\n        viewResolver.setSuffix(<span class=\"hljs-string\">\".jsp\"</span>);\n        <span class=\"hljs-comment\">// viewResolver.setViewClass(JstlView.class);</span>\n        <span class=\"hljs-comment\">// 这个属性通常并不需要手动配置，高版本的Spring会自动检测</span>\n        <span class=\"hljs-keyword\">return</span> viewResolver;\n    }\n \n \n \n    <span class=\"hljs-comment\">/**\n     * 替换框架json为fastjson\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureMessageConverters</span><span class=\"hljs-params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\n        FastJsonHttpMessageConverter fastConverter = <span class=\"hljs-keyword\">new</span> FastJsonHttpMessageConverter();\n        FastJsonConfig fastJsonConfig = <span class=\"hljs-keyword\">new</span> FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue,\n            SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.DisableCircularReferenceDetect);\n        <span class=\"hljs-comment\">// 处理中文乱码问题</span>\n        List&lt;MediaType&gt; fastMediaTypes = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);\n        fastConverter.setSupportedMediaTypes(fastMediaTypes);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        <span class=\"hljs-comment\">// 处理字符串, 避免直接返回字符串的时候被添加了引号</span>\n        StringHttpMessageConverter smc = <span class=\"hljs-keyword\">new</span> StringHttpMessageConverter(Charset.forName(<span class=\"hljs-string\">\"UTF-8\"</span>));\n        converters.add(smc);\n        converters.add(fastConverter);\n    }\n \n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> GlobalTransactionScanner <span class=\"hljs-title\">globalTransactionScanner</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> GlobalTransactionScanner(<span class=\"hljs-string\">\"test-client\"</span>, <span class=\"hljs-string\">\"test-group\"</span>);\n    }\n \n}\n\n</code></pre>\n<p>再创建c<strong>ontroller包,再包下创建TestController</strong> :</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.controller;\n \n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Lazy;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;\n<span class=\"hljs-keyword\">import</span> org.test.service.DemoService;\n \n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.Api;\n<span class=\"hljs-keyword\">import</span> io.swagger.annotations.ApiOperation;\n \n<span class=\"hljs-comment\">/**\n * &lt;p&gt;\n * 文件表 前端控制器\n * &lt;/p&gt;\n *\n * <span class=\"hljs-doctag\">@author</span> funkye\n * <span class=\"hljs-doctag\">@since</span> 2019-03-20\n */</span>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/test\"</span>)\n<span class=\"hljs-meta\">@Api</span>(tags = <span class=\"hljs-string\">\"测试接口\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestController</span> </span>{\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(TestController.class);\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-meta\">@Lazy</span>\n    DemoService demoService;\n \n    <span class=\"hljs-meta\">@GetMapping</span>(value = <span class=\"hljs-string\">\"testSeataOne\"</span>)\n    <span class=\"hljs-meta\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"测试手动回滚分布式事务接口\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">testSeataOne</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> demoService.One();\n    }\n \n    <span class=\"hljs-meta\">@GetMapping</span>(value = <span class=\"hljs-string\">\"testSeataTwo\"</span>)\n    <span class=\"hljs-meta\">@ApiOperation</span>(value = <span class=\"hljs-string\">\"测试异常回滚分布式事务接口\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">testSeataTwo</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> demoService.Two();\n    }\n \n}\n\n</code></pre>\n<p>再到service去创建需要依赖的DemoService</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.service;\n \n<span class=\"hljs-keyword\">import</span> java.time.LocalDateTime;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> org.test.controller.TestController;\n<span class=\"hljs-keyword\">import</span> org.test.entity.Test;\n \n<span class=\"hljs-keyword\">import</span> io.seata.core.context.RootContext;\n<span class=\"hljs-keyword\">import</span> io.seata.core.exception.TransactionException;\n<span class=\"hljs-keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;\n<span class=\"hljs-keyword\">import</span> io.seata.tm.api.GlobalTransactionContext;\n \n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\t<span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"1.0.0\"</span>, timeout = <span class=\"hljs-number\">60000</span>)\n\t<span class=\"hljs-keyword\">private</span> ITestService testService;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(DemoService.class);\n \n\t<span class=\"hljs-comment\">/**\n\t * 手动回滚示例\n\t * \n\t * <span class=\"hljs-doctag\">@return</span>\n\t */</span>\n\t<span class=\"hljs-meta\">@GlobalTransactional</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">One</span><span class=\"hljs-params\">()</span> </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"seata分布式事务Id:{}\"</span>, RootContext.getXID());\n\t\tTest t = <span class=\"hljs-keyword\">new</span> Test();\n\t\tt.setOne(<span class=\"hljs-string\">\"1\"</span>);\n\t\tt.setTwo(<span class=\"hljs-string\">\"2\"</span>);\n\t\tt.setCreateTime(LocalDateTime.now());\n\t\ttestService.save(t);\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">0</span>;\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t\t} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n\t\t\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> handle exception</span>\n\t\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t\tlogger.info(<span class=\"hljs-string\">\"载入事务id进行回滚\"</span>);\n\t\t\t\tGlobalTransactionContext.reload(RootContext.getXID()).rollback();\n\t\t\t} <span class=\"hljs-keyword\">catch</span> (TransactionException e1) {\n\t\t\t\t<span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\t}\n \n\t<span class=\"hljs-comment\">/**\n\t * 抛出异常进行回滚示例\n\t * \n\t * <span class=\"hljs-doctag\">@return</span>\n\t */</span>\n\t<span class=\"hljs-meta\">@GlobalTransactional</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">Two</span><span class=\"hljs-params\">()</span> </span>{\n\t\tlogger.info(<span class=\"hljs-string\">\"seata分布式事务Id:{}\"</span>, RootContext.getXID());\n\t\tTest t = <span class=\"hljs-keyword\">new</span> Test();\n\t\tt.setOne(<span class=\"hljs-string\">\"1\"</span>);\n\t\tt.setTwo(<span class=\"hljs-string\">\"2\"</span>);\n\t\tt.setCreateTime(LocalDateTime.now());\n\t\ttestService.save(t);\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\t<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">0</span>;\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n\t\t} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n\t\t\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> handle exception</span>\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException();\n\t\t}\n\t}\n}\n\n</code></pre>\n<p>一样创建resources文件夹,先创建常用的<strong>application.yml</strong></p>\n<pre><code class=\"language-java\">spring:\n  application:\n     name: test\n  datasource:\n     driver-class-name: com.mysql.cj.jdbc.Driver\n     url: jdbc:mysql://127.0.0.1:3306/test?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=Asia/Shanghai\n     username: root\n     password: 123456\n  mvc:\n    servlet:\n      load-on-startup: 1\n  http:\n    encoding:\n            force: true\n            charset: utf-8\n            enabled: true\n    multipart:\n      max-file-size: 10MB\n      max-request-size: 10MB\ndubbo:\n  registry:\n    id: my-registry\n    address:  zookeeper://127.0.0.1:2181?client=curator\n#    address:  zookeeper://127.0.0.1:2181?client=curator\n  application:\n    name: dubbo-demo-client\n    qos-enable: false\nserver:\n  port: 28888\n  max-http-header-size: 8192\n  address: 0.0.0.0\n  tomcat:\n    max-http-post-size: 104857600\n\n</code></pre>\n<p>再把之前service配置好的file跟registry文件复制来,如果你的client组名称再配置类里修改了,那么这里的file文件内的组名称一样需要更改.</p>\n<p><img src=\"/img/blog/20191129142851.png\" alt=\"\"></p>\n<p>完整的目录结构如上,这时候可以启动test-service后,再启动test-client,到swagger里测试咯</p>\n<p>​\t4.访问127.0.0.1:28888/swagger-ui.html做最后的收尾\t\t<img src=\"/img/blog/20191129143041.png\" alt=\"\"></p>\n<p><img src=\"/img/blog/20191129143124.png\" alt=\"20191129143124\"></p>\n<p>这里数据我已经存了一条记录了,我们看看会不会成功回滚:</p>\n<p><img src=\"/img/blog/20191129143252.png\" alt=\"20191129143252\"></p>\n<p>刷新数据库,发现还是只有一条数据:</p>\n<p><img src=\"/img/blog/20191129143124.png\" alt=\"20191129143124\"></p>\n<p>再查看日志:</p>\n<p><img src=\"/img/blog/20191129143407.png\" alt=\"20191129143407\"></p>\n<p>显示已经回滚,我们再看看seata-server的日志:</p>\n<img src=\"/img/blog/20191129143419.png\" style=\"zoom:200%;\" />\n<p>显示回滚成功,事务id也是一致的,这下我们的分布式事务就跑通咯,通过打断点方式,大家可以查看undo_log,会发现再事务提交前,会存入一条事务信息的数据,如果回滚成功,该信息就会被删除.</p>\n<h1>总结</h1>\n<p>seata的整合还是比较简单易入手,稍微用心一些你肯定写的比我更好!</p>\n<p>欢迎大家也多去阅读seata,dubbo之类的源代码,能解决业务中遇到的大量的坑哦!</p>\n",
  "link": "/zh-cn/blog/springboot-dubbo-mybatisplus-seata.html",
  "meta": {
    "title": "SpringBoot+Dubbo+MybatisPlus整合seata分布式事务",
    "keywords": "Seata,dubbo,mybatis,分布式事务",
    "description": "本文讲述如何将springboot+dubbo+mybatisplus整合seata直连方式搭建",
    "author": "FUNKYE",
    "date": "2019/11/29"
  }
}