{
  "filename": "seata-at-demo-in-mac.md",
  "__html": "<h1>Mac下的Seata Demo环境搭建（AT模式）</h1>\n<h2>前言</h2>\n<p>最近因为工作需要，研究学习了Seata分布式事务框架，本文把自己学习的知识记录一下</p>\n<h2>Seata总览</h2>\n<h3>cloc代码统计</h3>\n<p>先看一下seata项目cloc代码统计（截止到2020-07-20）</p>\n<p><img src=\"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/cloc-seata.png?raw=true\" alt=\"cloc-seata\"></p>\n<p>Java代码行数大约是 97K</p>\n<h3>代码质量</h3>\n<p>单元测试覆盖率50%</p>\n<p><img src=\"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/coverage.png?raw=true\" alt=\"cloc-seata\"></p>\n<h3>Demo代码</h3>\n<p>本文讲的Demo代码是seata-samples项目下的seata-samples-dubbo模块，地址如下：</p>\n<p><a href=\"https://github.com/seata/seata-samples/tree/master/dubbo\">https://github.com/seata/seata-samples/tree/master/dubbo</a></p>\n<h2>解决的核心问题</h2>\n<p>AT模式的Demo例子给出了一个典型的分布式事务场景：</p>\n<ul>\n<li>在一个采购交易中，需要：</li>\n</ul>\n<ol>\n<li>扣减商品库存</li>\n<li>扣减用户账号余额</li>\n<li>生成采购订单</li>\n</ol>\n<ul>\n<li>很明显，以上3个步骤必须：要么全部成功，要么全部失败，否则系统的数据会错乱</li>\n<li>而现在流行的微服务架构，一般来说，库存，账号余额，订单是3个独立的系统</li>\n<li>每个微服务有自己的数据库，相互独立</li>\n</ul>\n<p>这里就是分布式事务的场景。</p>\n<p><img src=\"http://seata.io/img/architecture.png\" alt=\"设计图\"></p>\n<h2>解决方案</h2>\n<p>AT模式解决这个问题的思路其实很简单，一句话概括就是：</p>\n<p>在分布式事务过程中，记录待修改的数据修改前和修改后的值到undo_log表，万一交易中出现异常，通过这个里的数据做回滚</p>\n<p>当然，具体代码实现起来，我相信很多细节远没这么简单。</p>\n<h2>Demo代码结构</h2>\n<p>从github上clone最新的代码</p>\n<pre><code class=\"language-sh\">git <span class=\"hljs-built_in\">clone</span> git@github.com:seata/seata-samples.git\n</code></pre>\n<p>阅读Demo代码结构</p>\n<pre><code class=\"language-sh\">$ <span class=\"hljs-built_in\">cd</span> seata-samples/dubbo/\n$ tree -C  -I <span class=\"hljs-string\">'target'</span> .\n.\n├── README.md\n├── pom.xml\n├── seata-samples-dubbo.iml\n└── src\n    └── main\n        ├── java\n        │   └── io\n        │       └── seata\n        │           └── samples\n        │               └── dubbo\n        │                   ├── ApplicationKeeper.java\n        │                   ├── Order.java\n        │                   ├── service\n        │                   │   ├── AccountService.java\n        │                   │   ├── BusinessService.java\n        │                   │   ├── OrderService.java\n        │                   │   ├── StorageService.java\n        │                   │   └── impl\n        │                   │       ├── AccountServiceImpl.java\n        │                   │       ├── BusinessServiceImpl.java\n        │                   │       ├── OrderServiceImpl.java\n        │                   │       └── StorageServiceImpl.java\n        │                   └── starter\n        │                       ├── DubboAccountServiceStarter.java\n        │                       ├── DubboBusinessTester.java\n        │                       ├── DubboOrderServiceStarter.java\n        │                       └── DubboStorageServiceStarter.java\n        └── resources\n            ├── file.conf\n            ├── jdbc.properties\n            ├── log4j.properties\n            ├── registry.conf\n            ├── spring\n            │   ├── dubbo-account-service.xml\n            │   ├── dubbo-business.xml\n            │   ├── dubbo-order-service.xml\n            │   └── dubbo-storage-service.xml\n            └── sql\n                ├── dubbo_biz.sql\n                └── undo_log.sql\n\n13 directories, 27 files\n</code></pre>\n<ul>\n<li>\n<p>在io.seata.samples.dubbo.starter包下的4个*Starter类，分别模拟上面所述的4个微服务</p>\n<ul>\n<li>Account</li>\n<li>Business</li>\n<li>Order</li>\n<li>Storage</li>\n</ul>\n</li>\n<li>\n<p>4个服务都是标准的dubbo服务，配置文件在seata-samples/dubbo/src/main/resources/spring目录下</p>\n</li>\n<li>\n<p>运行demo需要把这4个服务都启动起来，Business最后启动</p>\n</li>\n<li>\n<p>主要的逻辑在io.seata.samples.dubbo.service，4个实现类分别对应4个微服务的业务逻辑</p>\n</li>\n<li>\n<p>数据库信息的配置文件：src/main/resources/jdbc.properties</p>\n</li>\n</ul>\n<h3>时序图</h3>\n<p><img src=\"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/timing-diagram.png?raw=true\" alt=\"cloc-seata\"></p>\n<p>Ok, 赶紧动手, Make It Happen!</p>\n<h2>运行Demo</h2>\n<h3>MySQL</h3>\n<h3>建表</h3>\n<p>执行seata-samples/dubbo/src/main/resources/sql的脚本dubbo_biz.sql和undo_log.sql</p>\n<pre><code class=\"language-sh\">mysql&gt; show tables;\n+-----------------+\n| Tables_in_seata |\n+-----------------+\n| account_tbl     |\n| order_tbl       |\n| storage_tbl     |\n| undo_log        |\n+-----------------+\n4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)\n</code></pre>\n<p>执行完之后，数据库里应该有4个表</p>\n<p>修改seata-samples/dubbo/src/main/resources/jdbc.properties文件</p>\n<p>根据你MySQL运行的环境修改变量的值</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">jdbc.account.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/seata</span>\n<span class=\"hljs-meta\">jdbc.account.username</span>=<span class=\"hljs-string\">your_username</span>\n<span class=\"hljs-meta\">jdbc.account.password</span>=<span class=\"hljs-string\">your_password</span>\n<span class=\"hljs-meta\">jdbc.account.driver</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n<span class=\"hljs-comment\"># storage db config</span>\n<span class=\"hljs-meta\">jdbc.storage.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/seata</span>\n<span class=\"hljs-meta\">jdbc.storage.username</span>=<span class=\"hljs-string\">your_username</span>\n<span class=\"hljs-meta\">jdbc.storage.password</span>=<span class=\"hljs-string\">your_password</span>\n<span class=\"hljs-meta\">jdbc.storage.driver</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n<span class=\"hljs-comment\"># order db config</span>\n<span class=\"hljs-meta\">jdbc.order.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/seata</span>\n<span class=\"hljs-meta\">jdbc.order.username</span>=<span class=\"hljs-string\">your_username</span>\n<span class=\"hljs-meta\">jdbc.order.password</span>=<span class=\"hljs-string\">your_password</span>\n<span class=\"hljs-meta\">jdbc.order.driver</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n</code></pre>\n<h3>ZooKeeper</h3>\n<p>启动ZooKeeper，我的本地的Mac是使用Homebrew安装启动的</p>\n<pre><code class=\"language-sh\">$ brew services start zookeeper \n==&gt; Successfully started `zookeeper` (label: homebrew.m\n\n$ brew services list           \nName              Status  User    Plist\ndocker-machine    stopped         \nelasticsearch     stopped         \nkafka             stopped         \nkibana            stopped         \nmysql             started portman /Users/portman/Librar\ny/LaunchAgents/homebrew.mxcl.mysql.plist\nnginx             stopped         \npostgresql        stopped         \nredis             stopped         \nzookeeper         started portman /Users/portman/Librar\ny/LaunchAgents/homebrew.mxcl.zookeeper.plist\n</code></pre>\n<h3>启动TC事务协调器</h3>\n<p>在这个<a href=\"https://github.com/seata/seata/releases\">链接</a>里页面中，下载对应版本的seata-server程序，我本地下载的是1.2.0版本</p>\n<ol>\n<li>进入文件所在目录并解压文件</li>\n<li>进入seata目录</li>\n<li>执行启动脚本</li>\n</ol>\n<pre><code class=\"language-sh\">$ tar -zxvf seata-server-1.2.0.tar.gz\n$ <span class=\"hljs-built_in\">cd</span> seata\n$ bin/seata-server.sh\n</code></pre>\n<p>观察启动日志是否有报错信息，如果一切正常，并看到了以下的Server started的信息，说明启动成功了。</p>\n<pre><code class=\"language-sh\">2020-07-23 13:45:13.810 INFO [main]io.seata.core.rpc.netty.RpcServerBootstrap.start:155 -Server started ...\n</code></pre>\n<h3>IDE中启动模拟的微服务</h3>\n<ol>\n<li>首先要把seata-samples项目导入到本地IDE中，这里我用的是IntelliJ IDEA</li>\n<li>刷新Maven的工程依赖</li>\n<li>先启动Account，Order，Storage这个3个服务，然后Business才能去调用，对应的启动类分别是：</li>\n</ol>\n<pre><code class=\"language-java\">io.seata.samples.dubbo.starter.DubboStorageServiceStarter\nio.seata.samples.dubbo.starter.DubboOrderServiceStarter\nio.seata.samples.dubbo.starter.DubboStorageServiceStarter\n</code></pre>\n<p>每个服务启动完之后，看到这句提示信息，说明服务启动成功了</p>\n<pre><code class=\"language-sh\">Application is keep running ...\n</code></pre>\n<p><img src=\"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/service-boot.png?raw=true\" alt=\"cloc-seata\"></p>\n<p>启动成功后，account_tbl，storage_tbl表会有两条初始化的数据，分别是账户余额和商品库存</p>\n<pre><code class=\"language-sh\">mysql&gt; SELECT * FROM account_tbl; SELECT * FROM storage_tbl;\n+----+---------+-------+\n| id | user_id | money |\n+----+---------+-------+\n|  1 | U100001 |   999 |\n+----+---------+-------+\n1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)\n\n+----+----------------+-------+\n| id | commodity_code | count |\n+----+----------------+-------+\n|  1 | C00321         |   100 |\n+----+----------------+-------+\n1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)\n</code></pre>\n<h3>使用Business验证效果</h3>\n<h4>正常情况</h4>\n<p>还是在IDE中执行DubboBusinessTester类的主函数，程序跑完会自动退出</p>\n<p>在程序一切正常的情况下，每个微服务的事物都应该是提交了的，数据保持一致</p>\n<p>我们来看一下MySQL中数据的变化</p>\n<pre><code class=\"language-sh\">mysql&gt; SELECT * FROM account_tbl; SELECT * FROM order_tbl; SELECT * FROM storage_tbl;\n+----+---------+-------+\n| id | user_id | money |\n+----+---------+-------+\n|  1 | U100001 |   599 |\n+----+---------+-------+\n1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)\n\n+----+---------+----------------+-------+-------+\n| id | user_id | commodity_code | count | money |\n+----+---------+----------------+-------+-------+\n|  1 | U100001 | C00321         |     2 |   400 |\n+----+---------+----------------+-------+-------+\n1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)\n\n+----+----------------+-------+\n| id | commodity_code | count |\n+----+----------------+-------+\n|  1 | C00321         |    98 |\n+----+----------------+-------+\n1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)\n</code></pre>\n<p>从3个表的数据可以看到：账户余额扣减了400块；订单表增加了1条记录；商品库存扣减了2个</p>\n<p>这个结果是程序的逻辑是一致的，说明事务没有问题</p>\n<h4>异常情况</h4>\n<p>其实即使不加入分布式事务的控制，一切都正常情况下，事务本身就不会有问题的</p>\n<p>所以我们来重点关注，当程序出现异常时的情况</p>\n<p>现在我把BusinessServiceImpl的抛异常的代码注释放开，然后再执行一次DubboBusinessTester，来看看有什么情况发生</p>\n<pre><code class=\"language-java\">\t\t<span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-meta\">@GlobalTransactional</span>(timeoutMills = <span class=\"hljs-number\">300000</span>, name = <span class=\"hljs-string\">\"dubbo-demo-tx\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">purchase</span><span class=\"hljs-params\">(String userId, String commodityCode, <span class=\"hljs-keyword\">int</span> orderCount)</span> </span>{\n        LOGGER.info(<span class=\"hljs-string\">\"purchase begin ... xid: \"</span> + RootContext.getXID());\n        storageService.deduct(commodityCode, orderCount);\n        orderService.create(userId, commodityCode, orderCount);\n      \n        <span class=\"hljs-comment\">//放开这句抛异常的注释，模拟程序出现异常</span>\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"portman's foooooobar error.\"</span>);\n\n    }\n</code></pre>\n<p>接着，我再一次执行DubboBusinessTester，执行过程中在控制台可以看到异常报错信息</p>\n<pre><code class=\"language-java\">Exception in thread \"main\" java.lang.RuntimeException: portman's foooooobar error.\n</code></pre>\n<p>现在我们再看一下MySQL里的数据变化，发现数据没有任何变化，说明分布式事务的控制已经起作用了</p>\n<h2>待思考问题</h2>\n<p>上面的步骤只是演示了seata最简单的demo程序，更多更复杂的情况后续大家可以一起讨论和验证</p>\n<p>学习过程中还有一些问题和疑惑，后续进一步学习</p>\n<ul>\n<li>全局锁对性能的影响程度</li>\n<li>undo_log日志可以回滚到原来状态，但是如果数据状态已经发生变化如何处理（比如增加的用户积分已经被别的本地事务花掉了）</li>\n</ul>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"http://seata.io/zh-cn/docs/overview/what-is-seata.html\">Seata 是什么?</a></li>\n<li><a href=\"http://seata.io/zh-cn/docs/user/quickstart.html\">快速开始</a></li>\n</ul>\n<h2>作者信息</h2>\n<p>许晓加，金蝶软件架构师</p>\n<p><a href=\"https://github.com/iportman\">Github</a></p>\n",
  "link": "/zh-cn/blog/seata-at-demo-in-mac.html",
  "meta": {
    "title": "Mac下的Seata Demo环境搭建（AT模式）",
    "author": "portman xu",
    "date": "2020/07/20",
    "keywords": "seata, 分布式事务, demo, mac, at"
  }
}