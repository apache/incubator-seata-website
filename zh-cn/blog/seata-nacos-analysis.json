{
  "filename": "seata-nacos-analysis.md",
  "__html": "<h1>Seata分布式事务启用Nacos做配置中心</h1>\n<p><a href=\"https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata\">项目地址</a></p>\n<p>本文作者：FUNKYE(陈健斌),杭州某互联网公司主程。</p>\n<h1>前言</h1>\n<p>上次发布了直连方式的seata配置,详细可以看这篇<a href=\"http://seata.io/zh-cn/blog/springboot-dubbo-mybatisplus-seata.html\">博客</a></p>\n<p>我们接着上一篇的基础上去配置nacos做配置中心跟dubbo注册中心.</p>\n<h2>准备工作</h2>\n<p>​\t1.首先去nacos的github上下载<a href=\"https://github.com/alibaba/nacos/releases/tag/1.1.4\">最新版本</a></p>\n<p>​\t<img src=\"/img/blog/20191202203649.png\" alt=\"\"></p>\n<p>​\t2.下载好了后,很简单,解压后到bin目录下去启动就好了,看到如图所示就成了：</p>\n<p><img src=\"/img/blog/20191202203943.png\" alt=\"\"></p>\n<p>​\t3.启动完毕后访问:<a href=\"http://127.0.0.1:8848/nacos/#/login\">http://127.0.0.1:8848/nacos/#/login</a></p>\n<p><img src=\"/img/blog/20191202204101.png\" alt=\"\"></p>\n<p>是不是看到这样的界面了?输入nacos(账号密码相同),先进去看看吧.</p>\n<p>这时候可以发现没有任何服务注册</p>\n<p><img src=\"/img/blog/20191202204147.png\" alt=\"20191202204147\"></p>\n<p>别急我们马上让seata服务连接进来.</p>\n<h2>Seata配置</h2>\n<p>​\t1.进入seata的conf文件夹看到这个木有?</p>\n<p><img src=\"/img/blog/20191202204259.png\" alt=\"\"></p>\n<p>就是它,编辑它:</p>\n<p><img src=\"/img/blog/20191202204353.png\" alt=\"20191202204353\"></p>\n<p><img src=\"/img/blog/20191202204437.png\" alt=\"20191202204437\"></p>\n<p>​\t2.然后记得保存哦!接着我们把registry.conf文件打开编辑：</p>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;\n\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n  eureka {\n    serviceUrl = &quot;http://localhost:8761/eureka&quot;\n    application = &quot;default&quot;\n    weight = &quot;1&quot;\n  }\n  redis {\n    serverAddr = &quot;localhost:6379&quot;\n    db = &quot;0&quot;\n  }\n  zk {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;127.0.0.1:2181&quot;\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  consul {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;127.0.0.1:8500&quot;\n  }\n  etcd3 {\n    cluster = &quot;default&quot;\n    serverAddr = &quot;http://localhost:2379&quot;\n  }\n  sofa {\n    serverAddr = &quot;127.0.0.1:9603&quot;\n    application = &quot;default&quot;\n    region = &quot;DEFAULT_ZONE&quot;\n    datacenter = &quot;DefaultDataCenter&quot;\n    cluster = &quot;default&quot;\n    group = &quot;SEATA_GROUP&quot;\n    addressWaitTime = &quot;3000&quot;\n  }\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;\n\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n  consul {\n    serverAddr = &quot;127.0.0.1:8500&quot;\n  }\n  apollo {\n    app.id = &quot;seata-server&quot;\n    apollo.meta = &quot;http://192.168.1.204:8801&quot;\n  }\n  zk {\n    serverAddr = &quot;127.0.0.1:2181&quot;\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  etcd3 {\n    serverAddr = &quot;http://localhost:2379&quot;\n  }\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n\n</code></pre>\n<p>都编辑好了后，<a href=\"http://xn--nacos-config-2b7sf85sq33gseza.sh\">我们运行nacos-config.sh</a>,这时候我们配置的nacos-config.txt的内容已经被发送到nacos中了详细如图：</p>\n<p><img src=\"/img/blog/20191202205743.png\" alt=\"20191202205743\"></p>\n<p>出现以上类似的代码就是说明成功了，接着我们登录nacos配置中心，查看配置列表，出现如图列表说明配置成功了：</p>\n<p><img src=\"/img/blog/20191202205912.png\" alt=\"20191202205912\"></p>\n<p>看到了吧,你的配置已经全部都提交上去了,如果再git工具内运行sh不行的话,试着把编辑sh文件,试试改成如下操作</p>\n<pre><code class=\"language-shell\">for line in $(cat nacos-config.txt)\n\ndo\n\nkey=${line%%=*}\nvalue=${line#*=}\necho \"\\r\\n set \"${key}\" = \"${value}\n\nresult=`curl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=$key&amp;group=SEATA_GROUP&amp;content=$value\"`\n\nif [ \"$result\"x == \"true\"x ]; then\n\n  echo \"\\033[42;37m $result \\033[0m\"\n\nelse\n\n  echo \"\\033[41;37 $result \\033[0m\"\n  let error++\n\nfi\n\ndone\n\n\nif [ $error -eq 0 ]; then\n\necho  \"\\r\\n\\033[42;37m init nacos config finished, please start seata-server. \\033[0m\"\n\nelse\n\necho  \"\\r\\n\\033[41;33m init nacos config fail. \\033[0m\"\n\nfi\n</code></pre>\n<p>​\t3.目前我们的准备工作全部完成,我们去seata-service/bin去运行seata服务吧,如图所示就成功啦!</p>\n<p><img src=\"/img/blog/20191202210112.png\" alt=\"20191202210112\"></p>\n<h1>进行调试</h1>\n<p>​\t1.首先把springboot-dubbo-mybatsiplus-seata项目的pom的依赖更改,去除掉zk这些配置,因为我们使用nacos做注册中心了.</p>\n<pre><code class=\"language-java\">\t&lt;properties&gt;\n\t\t&lt;webVersion&gt;3.1&lt;/webVersion&gt;\n\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n\t\t&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n\t\t&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n\t\t&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n\t\t&lt;HikariCP.version&gt;3.2.0&lt;/HikariCP.version&gt;\n\t\t&lt;mybatis-plus-boot-starter.version&gt;3.2.0&lt;/mybatis-plus-boot-starter.version&gt;\n\t&lt;/properties&gt;\n\t&lt;parent&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n\t\t&lt;version&gt;2.1.8.RELEASE&lt;/version&gt;\n\t&lt;/parent&gt;\n\t&lt;dependencies&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;nacos-client&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.1.4&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;dubbo-registry-nacos&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.7.4.1&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.7.4.1&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.2.60&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;7.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.9.2&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.9.2&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n \n\t\t&lt;!-- mybatis-plus begin --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;${mybatis-plus-boot-starter.version}&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- mybatis-plus end --&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;provided&lt;/scope&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;io.seata&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;seata-all&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;0.9.0.1&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;2.5.4&lt;/version&gt; &lt;/dependency&gt; --&gt;\n \n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.freemarker&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;freemarker&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.1.20&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- 加上这个才能辨认到log4j2.yml文件 --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;jackson-dataformat-yaml&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt; &lt;!-- 引入log4j2依赖 --&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;mysql&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n\t\t\t&lt;exclusions&gt;\n\t\t\t\t&lt;exclusion&gt;\n\t\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t\t\t&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;\n\t\t\t\t&lt;/exclusion&gt;\n\t\t\t\t&lt;exclusion&gt;\n\t\t\t\t\t&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t\t\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n\t\t\t\t&lt;/exclusion&gt;\n\t\t\t&lt;/exclusions&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n\t\t\t&lt;scope&gt;test&lt;/scope&gt;\n\t\t&lt;/dependency&gt;\n\t\t&lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.scala-lang&lt;/groupId&gt; &lt;artifactId&gt;scala-library&lt;/artifactId&gt; \n\t\t\t&lt;version&gt;2.11.0&lt;/version&gt; &lt;/dependency&gt; --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n\t\t\t&lt;optional&gt;true&lt;/optional&gt;\n\t\t&lt;/dependency&gt;\n\t&lt;/dependencies&gt;\n\n</code></pre>\n<p>​\t2.然后更改test-service的目录结构,删除zk的配置并更改application.yml文件,目录结构与代码:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n<span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">38888</span>\n<span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  application:</span> \n<span class=\"hljs-attr\">      name:</span> <span class=\"hljs-string\">test-service</span>\n<span class=\"hljs-attr\">  datasource:</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span>\n<span class=\"hljs-attr\">    driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-attr\">    username:</span> <span class=\"hljs-string\">root</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-number\">123456</span>\n<span class=\"hljs-attr\">dubbo:</span>\n<span class=\"hljs-attr\">  protocol:</span>\n<span class=\"hljs-attr\">    loadbalance:</span> <span class=\"hljs-string\">leastactive</span>\n<span class=\"hljs-attr\">    threadpool:</span> <span class=\"hljs-string\">cached</span>\n<span class=\"hljs-attr\">  scan:</span>\n<span class=\"hljs-attr\">    base-packages:</span> <span class=\"hljs-string\">org。test.service</span>\n<span class=\"hljs-attr\">  application:</span>\n<span class=\"hljs-attr\">    qos-enable:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">testserver</span>\n<span class=\"hljs-attr\">  registry:</span>\n<span class=\"hljs-attr\">    id:</span> <span class=\"hljs-string\">my-registry</span>\n<span class=\"hljs-attr\">    address:</span>  <span class=\"hljs-attr\">nacos://127.0.0.1:8848</span>\n<span class=\"hljs-attr\">mybatis-plus:</span>\n<span class=\"hljs-attr\">  mapper-locations:</span> <span class=\"hljs-attr\">classpath:/mapper/*Mapper.xml</span>\n<span class=\"hljs-attr\">  typeAliasesPackage:</span> <span class=\"hljs-string\">org.test.entity</span>\n<span class=\"hljs-attr\">  global-config:</span>\n<span class=\"hljs-attr\">    db-config:</span>\n<span class=\"hljs-attr\">      field-strategy:</span> <span class=\"hljs-string\">not-empty</span>\n<span class=\"hljs-attr\">      id-type:</span> <span class=\"hljs-string\">auto</span>\n<span class=\"hljs-attr\">      db-type:</span> <span class=\"hljs-string\">mysql</span>\n<span class=\"hljs-attr\">  configuration:</span>\n<span class=\"hljs-attr\">    map-underscore-to-camel-case:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">    cache-enabled:</span> <span class=\"hljs-literal\">true</span>      \n<span class=\"hljs-attr\">    auto-mapping-unknown-column-behavior:</span> <span class=\"hljs-string\">none</span>\n</code></pre>\n<img src=\"/img/blog/20191202211833.png\" alt=\"20191202211833\" style=\"zoom:100%;\" />\n<p>​\t3.再更改registry.conf文件,如果你的nacos是其它服务器,请改成对应都ip跟端口</p>\n<pre><code class=\"language-java\">registry {\n  type = <span class=\"hljs-string\">\"nacos\"</span>\n  file {\n    name = <span class=\"hljs-string\">\"file.conf\"</span>\n  }\n   zk {\n    cluster = <span class=\"hljs-string\">\"default\"</span>\n    serverAddr = <span class=\"hljs-string\">\"127.0.0.1:2181\"</span>\n    session.timeout = <span class=\"hljs-number\">6000</span>\n    connect.timeout = <span class=\"hljs-number\">2000</span>\n  }\n    nacos {\n    serverAddr = <span class=\"hljs-string\">\"localhost\"</span>\n    namespace = <span class=\"hljs-string\">\"\"</span>\n    cluster = <span class=\"hljs-string\">\"default\"</span>\n  }\n}\nconfig {\n  type = <span class=\"hljs-string\">\"nacos\"</span>\n  file {\n    name = <span class=\"hljs-string\">\"file.conf\"</span>\n  }\n  zk {\n    serverAddr = <span class=\"hljs-string\">\"127.0.0.1:2181\"</span>\n    session.timeout = <span class=\"hljs-number\">6000</span>\n    connect.timeout = <span class=\"hljs-number\">2000</span>\n  }\n    nacos {\n    serverAddr = <span class=\"hljs-string\">\"localhost\"</span>\n    namespace = <span class=\"hljs-string\">\"\"</span>\n    cluster = <span class=\"hljs-string\">\"default\"</span>\n  }\n}\n</code></pre>\n<p>​\t4.接着我们运行provideApplication</p>\n<p><img src=\"/img/blog/20191202212000.png\" alt=\"20191202212000\"></p>\n<p>启动成功啦,我们再去看seata的日志:</p>\n<p><img src=\"/img/blog/20191202212028.png\" alt=\"20191202212028\"></p>\n<p>成功了,这下我们一样,去修改test-client的内容,首先一样application.yml,把zk换成nacos,这里就不详细描述了,把test-service内的registry.conf,复制到client项目的resources中覆盖原来的registry.conf.</p>\n<p>然后我们可以运行clientApplication:</p>\n<p><img src=\"/img/blog/20191202212114.png\" alt=\"20191202212114\"></p>\n<p>​\t5.确认服务已经被发布并测试事务运行是否正常</p>\n<p><img src=\"/img/blog/20191202212203.png\" alt=\"20191202212203\"></p>\n<p>服务成功发布出来,也被成功消费了.这下我们再去swagger中去测试回滚是否一切正常,访问http://127.0.0.1:28888/swagger-ui.html</p>\n<p><img src=\"/img/blog/20191202212240.png\" alt=\"20191202212240\"></p>\n<p>恭喜你,看到这一定跟我一样成功了!</p>\n<h1>总结</h1>\n<p>关于nacos的使用跟seata的简单搭建已经完成了,更详细的内容希望希望大家访问以下地址阅读详细文档</p>\n<p><a href=\"https://nacos.io/zh-cn/index.html\">nacos官网</a></p>\n<p><a href=\"http://dubbo.apache.org/en-us/\">dubbo官网</a></p>\n<p><a href=\"http://seata.io/zh-cn/\">seata官网</a></p>\n",
  "link": "/zh-cn/blog/seata-nacos-analysis.html",
  "meta": {
    "title": "Seata分布式事务启用Nacos做配置中心",
    "keywords": "Seata,Nacos,分布式事务",
    "description": "本文讲述如何使用Seata整合Nacos配置",
    "author": "FUNKYE",
    "date": "2019/12/02"
  }
}