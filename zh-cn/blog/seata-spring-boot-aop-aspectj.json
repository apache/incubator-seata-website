{
  "filename": "seata-spring-boot-aop-aspectj.md",
  "__html": "<h1>通过AOP动态创建/关闭Seata分布式事务</h1>\n<p>本文作者：FUNKYE(陈健斌),杭州某互联网公司主程。</p>\n<h1>前言</h1>\n<p>通过GA大会上滴滴出行的高级研发工程陈鹏志的在滴滴两轮车业务中的实践,发现动态降级的必要性是非常的高,所以这边简单利用spring boot aop来简单的处理降级相关的处理,这边非常感谢陈鹏志的分享!</p>\n<p>可利用此demo<a href=\"https://gitee.com/itCjb/springboot-dubbo-mybatisplus-seata\">项目地址</a></p>\n<p>通过以下代码改造实践.</p>\n<h2>准备工作</h2>\n<p>​\t1.创建测试用的TestAspect:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.test.config;\n\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method; \n\n<span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n<span class=\"hljs-keyword\">import</span> io.seata.core.context.RootContext;\n<span class=\"hljs-keyword\">import</span> io.seata.core.exception.TransactionException;\n<span class=\"hljs-keyword\">import</span> io.seata.tm.api.GlobalTransaction;\n<span class=\"hljs-keyword\">import</span> io.seata.tm.api.GlobalTransactionContext;\n\n<span class=\"hljs-meta\">@Aspect</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestAspect</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(TestAspect.class);\n    \n    <span class=\"hljs-meta\">@Before</span>(<span class=\"hljs-string\">\"execution(* org.test.service.*.*(..))\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        logger.info(<span class=\"hljs-string\">\"拦截到需要分布式事务的方法,\"</span> + method.getName());\n        <span class=\"hljs-comment\">// 此处可用redis或者定时任务来获取一个key判断是否需要关闭分布式事务</span>\n        <span class=\"hljs-comment\">// 模拟动态关闭分布式事务</span>\n        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">int</span>)(Math.random() * <span class=\"hljs-number\">100</span>) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n            GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();\n            tx.begin(<span class=\"hljs-number\">300000</span>, <span class=\"hljs-string\">\"test-client\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            logger.info(<span class=\"hljs-string\">\"关闭分布式事务\"</span>);\n        }\n    }\n\n    <span class=\"hljs-meta\">@AfterThrowing</span>(throwing = <span class=\"hljs-string\">\"e\"</span>, pointcut = <span class=\"hljs-string\">\"execution(* org.test.service.*.*(..))\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRecoveryActions</span><span class=\"hljs-params\">(Throwable e)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n        logger.info(<span class=\"hljs-string\">\"方法执行异常:{}\"</span>, e.getMessage());\n        <span class=\"hljs-keyword\">if</span> (!StringUtils.isBlank(RootContext.getXID()))\n            GlobalTransactionContext.reload(RootContext.getXID()).rollback();\n    }\n\n    <span class=\"hljs-meta\">@AfterReturning</span>(value = <span class=\"hljs-string\">\"execution(* org.test.service.*.*(..))\"</span>, returning = <span class=\"hljs-string\">\"result\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterReturning</span><span class=\"hljs-params\">(JoinPoint point, Object result)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n        logger.info(<span class=\"hljs-string\">\"方法执行结束:{}\"</span>, result);\n        <span class=\"hljs-keyword\">if</span> ((Boolean)result) {\n            <span class=\"hljs-keyword\">if</span> (!StringUtils.isBlank(RootContext.getXID())) {\n                logger.info(<span class=\"hljs-string\">\"分布式事务Id:{}\"</span>, RootContext.getXID());\n                GlobalTransactionContext.reload(RootContext.getXID()).commit();\n            }\n        }\n    }\n\n}\n</code></pre>\n<p>请注意上面的包名可改为你自己的service包名:</p>\n<p>​\t2.改动service代码:</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">seataCommit</span><span class=\"hljs-params\">()</span> </span>{\n        testService.Commit();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n</code></pre>\n<p>因为异常跟返回结果我们都会拦截,所以这边可以trycatch或者直接让他抛异常来拦截也行,或者直接判断返回结果,比如你的业务代码code=200为成功,那么就commit,反之在拦截返回值那段代码加上rollback;</p>\n<h1>进行调试</h1>\n<p>​\t1.更改代码主动抛出异常</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">seataCommit</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            testService.Commit();\n            <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> handle exception</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException();\n        }\n    }\n</code></pre>\n<p>​\t查看日志:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.386</span>  INFO <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] org.test.controller.TestController       : 拦截到需要分布式事务的方法,seataCommit\n<span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.489</span>  INFO <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] i.seata.tm.api.DefaultGlobalTransaction  : Begin <span class=\"hljs-keyword\">new</span> global transaction [<span class=\"hljs-number\">192.168</span>.14.67:<span class=\"hljs-number\">8092</span>:<span class=\"hljs-number\">2030765910</span>]\n<span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.489</span>  INFO <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] org.test.controller.TestController       : 创建分布式事务完毕<span class=\"hljs-number\">192.168</span>.14.67:<span class=\"hljs-number\">8092</span>:<span class=\"hljs-number\">2030765910</span>\n<span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.709</span>  INFO <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] org.test.controller.TestController       : 方法执行异常:<span class=\"hljs-keyword\">null</span>\n<span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.885</span>  INFO <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] i.seata.tm.api.DefaultGlobalTransaction  : [<span class=\"hljs-number\">192.168</span>.14.67:<span class=\"hljs-number\">8092</span>:<span class=\"hljs-number\">2030765910</span>] rollback status: Rollbacked\n<span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">23</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>:<span class=\"hljs-number\">55.888</span> ERROR <span class=\"hljs-number\">23952</span> --- [.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">28888</span>-exec-<span class=\"hljs-number\">7</span>] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() <span class=\"hljs-keyword\">for</span> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException] with root cause\n\n</code></pre>\n<p>​\t可以看到已被拦截也触发了rollback了.</p>\n<p>​\t2.恢复代码调试正常情况:</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">seataCommit</span><span class=\"hljs-params\">()</span> </span>{\n        testService.Commit();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n</code></pre>\n<p>​\t查看日志:</p>\n<pre><code>2019-12-23 12:00:20.876  INFO 23952 --- [.0-28888-exec-2] org.test.controller.TestController       : 拦截到需要分布式事务的方法,seataCommit\n2019-12-23 12:00:20.919  INFO 23952 --- [.0-28888-exec-2] i.seata.tm.api.DefaultGlobalTransaction  : Begin new global transaction [192.168.14.67:8092:2030765926]\n2019-12-23 12:00:20.920  INFO 23952 --- [.0-28888-exec-2] org.test.controller.TestController       : 创建分布式事务完毕192.168.14.67:8092:2030765926\n2019-12-23 12:00:21.078  INFO 23952 --- [.0-28888-exec-2] org.test.controller.TestController       : 方法执行结束:true\n2019-12-23 12:00:21.078  INFO 23952 --- [.0-28888-exec-2] org.test.controller.TestController       : 分布式事务Id:192.168.14.67:8092:2030765926\n2019-12-23 12:00:21.213  INFO 23952 --- [.0-28888-exec-2] i.seata.tm.api.DefaultGlobalTransaction  : [192.168.14.67:8092:2030765926] commit status: Committed\n</code></pre>\n<p>​\t可以看到事务已经被提交了.</p>\n<h1>总结</h1>\n<p>更详细的内容希望希望大家访问以下地址阅读详细文档</p>\n<p><a href=\"https://nacos.io/zh-cn/index.html\">nacos官网</a></p>\n<p><a href=\"http://dubbo.apache.org/en-us/\">dubbo官网</a></p>\n<p><a href=\"http://seata.io/zh-cn/\">seata官网</a></p>\n<p><a href=\"https://www.docker.com/\">docker官网</a></p>\n",
  "link": "/zh-cn/blog/seata-spring-boot-aop-aspectj.html",
  "meta": {
    "title": "通过AOP动态创建/关闭Seata分布式事务",
    "keywords": "Seata,Nacos,分布式事务,spring",
    "description": "本文讲述如何通过AOP动态创建/关闭Seata分布式事务",
    "author": "FUNKYE",
    "date": "2019/12/23"
  }
}