{
  "filename": "deploy-guide-beginner.md",
  "__html": "<h1>部署指南</h1>\n<h2>Seata新手部署指南(1.0.0版本)</h2>\n<p>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。</p>\n<h3>资源目录介绍</h3>\n<h4><a href=\"https://github.com/seata/seata/tree/develop/script\" target=\"_blank\">script</a></h4>\n<ul>\n<li>client</li>\n</ul>\n<blockquote>\n<p>存放client端sql脚本，参数配置</p>\n</blockquote>\n<ul>\n<li>config-center</li>\n</ul>\n<blockquote>\n<p>各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</p>\n</blockquote>\n<ul>\n<li>server</li>\n</ul>\n<blockquote>\n<p>server端数据库脚本及各个容器配置</p>\n</blockquote>\n<h3>注意事项</h3>\n<ul>\n<li>seata-spring-boot-starter</li>\n</ul>\n<blockquote>\n<p>1.0.0可用于替换seata-all，GlobalTransactionScanner自动初始化（依赖SpringUtils）<br>\n若其他途径实现GlobalTransactionScanner初始化，请保证io.seata.spring.boot.autoconfigure.util.SpringUtils先初始化；<br>\nstarter默认开启数据源自动代理，用户若再手动配置DataSourceProxy将会导致异常</p>\n</blockquote>\n<ul>\n<li>spring-cloud-alibaba-seata</li>\n</ul>\n<blockquote>\n<p>2.1.0内嵌seata-all 0.7.1，2.1.1内嵌seata-all 0.9.0。<br>\n截止20191222日，现有版本不能与seata-spring-boot-starter兼容，后续sca会提供新的seata集成版本；</p>\n</blockquote>\n<pre><code>    临时兼容解决方案(单选即可): \n    a.@SpringBootApplication注解内exclude掉spring-cloud-alibaba-seata内的com.alibaba.cloud.seata.GlobalTransactionAutoConfiguration\n    b.让SpringUtils先初始化\n</code></pre>\n<h3>启动Server</h3>\n<p>Server端存储模式（store.mode）现有file、db两种（后续将引入raft），file模式无需改动，直接启动即可，下面专门讲下db启动步骤。<br>\n注：file模式为单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高;<br>\ndb模式为高可用模式，全局事务会话信息通过db共享，相应性能差些。</p>\n<h4>步骤一：启动包</h4>\n<ul>\n<li><a href=\"https://github.com/seata/seata/releases\" target=\"_blank\">点击下载</a></li>\n<li>官方钉钉群（群号：23171167，1群5000人已满，<a href=\"http://seata.io/zh-cn/community/index.html\" target=\"_blank\">2群</a>），qq群（群号：254657148）群文件共享下载</li>\n<li>其它途径</li>\n</ul>\n<h4>步骤二：建表</h4>\n<p>全局事务会话信息由3块内容构成，全局事务--&gt;分支事务--&gt;全局锁，对应表global_table、branch_table、lock_table</p>\n<h4>步骤三：修改store.mode</h4>\n<p>启动包: seata--&gt;conf--&gt;file.conf，修改store.mode=&quot;db&quot;<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;file.conf，修改store.mode=&quot;db&quot;</p>\n<h4>步骤四：修改数据库连接</h4>\n<p>启动包: seata--&gt;conf--&gt;file.conf，修改store.db相关属性。<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;file.conf，修改store.db相关属性。</p>\n<h4>步骤五：启动</h4>\n<ul>\n<li>源码启动: 执行Server.java的main方法</li>\n<li>命令启动: <a href=\"http://seata-server.sh\">seata-server.sh</a> -h 127.0.0.1 -p 8091 -m db -n 1 -e test</li>\n</ul>\n<pre><code>    -h: 注册到注册中心的ip\n    -p: Server rpc 监听端口\n    -m: 全局事务会话信息存储模式，file、db，优先读取启动参数\n    -n: Server node，多个Server时，需区分各自节点，用于生成不同区间的transactionId，以免冲突\n    -e: 多环境配置参考 http://seata.io/en-us/docs/ops/multi-configuration-isolation.html\n</code></pre>\n<ul>\n<li><a href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker.html\" target=\"_blank\">点击查看docker部署</a></li>\n</ul>\n<p>注: 堆内存建议分配2G，堆外内存1G</p>\n<h3>业务系统集成Client</h3>\n<h4>步骤一：添加seata依赖（建议单选）</h4>\n<ul>\n<li>依赖seata-all</li>\n<li>依赖seata-spring-boot-starter，支持yml配置</li>\n<li>依赖spring-cloud-alibaba-seata，内部集成了seata，并实现了xid传递</li>\n</ul>\n<h4>步骤二：undo_log建表、配置参数</h4>\n<ul>\n<li><a href=\"https://seata.io/zh-cn/docs/user/configurations.html\" target=\"_blank\">点击查看参数配置介绍</a></li>\n</ul>\n<h4>步骤三：数据源代理</h4>\n<ul>\n<li>0.9.0版本开始seata支持自动代理数据源</li>\n</ul>\n<pre><code>    1.0.0: client.support.spring.datasource.autoproxy=true  \n    0.9.0: support.spring.datasource.autoproxy=true\n</code></pre>\n<ul>\n<li>手动配置可参考下方的例子</li>\n</ul>\n<pre><code> @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)\n    public DataSource druidDataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        return druidDataSource;\n    }\n    @Primary\n    @Bean(&quot;dataSource&quot;)\n    public DataSourceProxy dataSource(DataSource druidDataSource) {\n        return new DataSourceProxy(druidDataSource);\n    }\n</code></pre>\n<h4>步骤四：初始化GlobalTransactionScanner</h4>\n<ul>\n<li>手动</li>\n</ul>\n<pre><code class=\"language-@Bean\">       public GlobalTransactionScanner globalTransactionScanner() {\n           String applicationName = this.applicationContext.getEnvironment().getProperty(&quot;spring.application.name&quot;);\n           String txServiceGroup = this.seataProperties.getTxServiceGroup();\n           if (StringUtils.isEmpty(txServiceGroup)) {\n               txServiceGroup = applicationName + &quot;-fescar-service-group&quot;;\n               this.seataProperties.setTxServiceGroup(txServiceGroup);\n           }\n   \n           return new GlobalTransactionScanner(applicationName, txServiceGroup);\n       }\n</code></pre>\n<ul>\n<li>自动，引入seata-spring-boot-starter、spring-cloud-alibaba-seata等jar</li>\n</ul>\n<h4>步骤五：实现xid跨服务传递</h4>\n<ul>\n<li>手动\n参考源码integration文件夹下的各种rpc实现 module</li>\n<li>自动\nspringCloud用户可以引入spring-cloud-alibaba-seata，内部已经实现xid传递</li>\n</ul>\n<p><a href=\"https://seata.io/zh-cn/docs/user/transaction-group.html\">查看事务分组介绍</a></p>\n",
  "link": "/zh-cn/docs/ops/deploy-guide-beginner.html",
  "meta": {
    "title": "Seata部署指南",
    "keywords": "Seata",
    "description": "Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。"
  }
}