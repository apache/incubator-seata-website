{
  "filename": "deploy-guide-beginner.md",
  "__html": "<h1>部署指南</h1>\n<h2>Seata新手部署指南(1.0版本)</h2>\n<p>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。</p>\n<h3>启动Server</h3>\n<p>Server端存储模式（store.mode）现有file、db两种（后续将引入raft），file模式无需改动，直接启动即可，下面专门讲下db启动步骤。<br>\n注：file模式为单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高;<br>\ndb模式为高可用模式，全局事务会话信息通过db共享，相应性能差些。</p>\n<h4>步骤一：启动包</h4>\n<p>a.<a href=\"https://github.com/seata/seata/releases\">https://github.com/seata/seata/releases</a> 下载<br>\nb.官方钉钉群（群号：23171167），qq群（群号：254657148）群文件共享下载<br>\nc.其它途径</p>\n<h4>步骤二：建表</h4>\n<p>全局事务会话信息由3块内容构成，全局事务--&gt;分支事务--&gt;全局锁，对应表global_table、branch_table、lock_table，<br>\nmysql建表脚本存放于module seata-server--&gt;resources--&gt;db_store.sql<br>\noracle脚本（可参考 <a href=\"https://github.com/seata/seata/pull/1640\">https://github.com/seata/seata/pull/1640</a> ）暂未合并。</p>\n<h4>步骤三：修改store.mode</h4>\n<p>打开seata-server--&gt;resources--&gt;file.conf，修改store.mode=&quot;db&quot;;也可以在启动时加命令参数-m db指定。</p>\n<h4>步骤四：修改数据库连接</h4>\n<p>打开seata-server--&gt;resources--&gt;file.conf，修改store.db相关属性</p>\n<h4>步骤五：启动</h4>\n<p>a.源码启动: 执行Server.java的main方法<br>\nb.命令启动: <a href=\"http://seata-server.sh\">seata-server.sh</a> -h 127.0.0.1 -p 8091 -m db -n 1 -DSEATA_ENV=test</p>\n<pre><code>    -h: 注册到注册中心的ip\n    -p: Server rpc 监听端口\n    -m: 全局事务会话信息存储模式，file、db，优先读取启动参数\n    -n: Server node，多个Server时，需区分各自节点，用于生成不同的transactionId范围，以免冲突\n    SEATA_ENV: 多环境配置参考 https://github.com/seata/seata/wiki/Multi-configuration-Isolation\n</code></pre>\n<p>c.docker部署请看 <a href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker.html\">https://seata.io/zh-cn/docs/ops/deploy-by-docker.html</a></p>\n<p>注: 堆内存建议分配4G</p>\n<h3>业务系统集成Client</h3>\n<h4>步骤一：添加seata依赖</h4>\n<p>a.依赖seata-all<br>\nb.依赖seata-spring-boot-starter，支持yml配置<br>\nc.依赖spring-cloud-alibaba-seata，内部集成了seata，并实现了xid传递</p>\n<h4>步骤二：undo_log建表、配置参数</h4>\n<p>统一放置在源码script文件夹下，也可以看module seata-server resources的db_undo_log.sql和file.conf.example。<br>\noracle暂时参考 <a href=\"https://github.com/seata/seata/pull/1640\">https://github.com/seata/seata/pull/1640</a><br>\n参数配置介绍请看 <a href=\"https://seata.io/zh-cn/docs/user/configurations.html\">https://seata.io/zh-cn/docs/user/configurations.html</a></p>\n<h4>步骤三：数据源代理</h4>\n<p>a.0.9.0版本开始可通过配置client.support.spring.datasource.autoproxy=true由seata自动实现数据源代理<br>\nb.手动配置可参考下方mybatis的例子</p>\n<pre><code> @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)\n    public DataSource druidDataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        return druidDataSource;\n    }\n    @Primary\n    @Bean(&quot;dataSource&quot;)\n    public DataSourceProxy dataSource(DataSource druidDataSource) {\n        return new DataSourceProxy(druidDataSource);\n    }\n    @Bean\n    public MybatisSqlSessionFactoryBean mybatisSqlSessionFactoryBean(DataSourceProxy druidDataSource, ResourcePatternResolver resourcePatternResolver) throws IOException {\n        MybatisSqlSessionFactoryBean mybatisSqlSessionFactoryBean = new MybatisSqlSessionFactoryBean();\n        mybatisSqlSessionFactoryBean.setDataSource(druidDataSource);\n        mybatisSqlSessionFactoryBean.setMapperLocations(resourcePatternResolver.getResources(&quot;classpath:mapper/*.xml&quot;));\n        return mybatisSqlSessionFactoryBean;\n    }\n</code></pre>\n<h4>步骤四：初始化GlobalTransactionScanner</h4>\n<p>a.手动</p>\n<pre><code class=\"language-@Bean\">       public GlobalTransactionScanner globalTransactionScanner() {\n           String applicationName = this.applicationContext.getEnvironment().getProperty(&quot;spring.application.name&quot;);\n           String txServiceGroup = this.seataProperties.getTxServiceGroup();\n           if (StringUtils.isEmpty(txServiceGroup)) {\n               txServiceGroup = applicationName + &quot;-fescar-service-group&quot;;\n               this.seataProperties.setTxServiceGroup(txServiceGroup);\n           }\n   \n           return new GlobalTransactionScanner(applicationName, txServiceGroup);\n       }\n</code></pre>\n<p>b.自动，依赖seata-spring-boot-starter、spring-cloud-alibaba-seata等jar</p>\n<h4>步骤五：实现xid跨服务传递</h4>\n<p>a.手动<br>\n参考源码integration文件夹下的各种rpc实现 module<br>\nb.自动<br>\nspringCloud用户可以引入spring-cloud-alibaba-seata，内部已经实现xid传递</p>\n<h3>事务分组专题简介</h3>\n<p>事务分组可以作为资源的逻辑隔离单位，去注册中心获得相应的TC服务列表。<br>\nseata注册、配置中心分为两类，内置file、第三方注册（配置）中心如nacos等等，注册中心和配置中心之间没有约束，可使用不同类型。</p>\n<h3>file注册中心和file配置中心（file注册中心也可以搭配nacos、zk等其他配置中心）</h3>\n<h4>Server端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                                ---------------&gt; 该行简称RT\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n</code></pre>\n<p>1.RT配置为file<br>\n2.file、db模式启动server，见文章上方节点：启动Server</p>\n<h4>Client端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                                ---------------&gt; 该行简称RT2\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;                                 ---------------&gt; CF\n  file {\n    name = &quot;file.conf&quot;                          ---------------&gt; CFN\n  }\n}\nspring.cloud.alibaba.seata.tx-service-group=my_test_tx_group   ---------------&gt; TG\nservice {\n  vgroup_mapping.my_test_tx_group = &quot;default&quot;   ---------------&gt; VM\n  default.grouplist = &quot;127.0.0.1:8091&quot;          ---------------&gt; DG\n}\n</code></pre>\n<p>1.配置CF为file，CNF为file.conf，通过FileConfiguration本地加载seata配置参数<br>\n2.TG为spring配置，springboot可配置在yml、properties中，服务启动时加载配置，对应的值&quot;my_test_tx_group&quot;即为一个事务分组名，若不配置，默认获取属性spring.application.name的值+&quot;-fescar-service-group&quot;<br>\n3.以VM为例，拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroup_mapping.my_test_tx_group&quot;查找TC集群名clusterName为&quot;default&quot;<br>\n4.再拼接&quot;service.&quot;+clusterName+&quot;.grouplist&quot;找到真实TC服务列表127.0.0.1:8091</p>\n<h3>nacos注册中心和配置中心</h3>\n<h4>Server端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                                ---------------&gt; 该行简称RT\n  nacos {\n    serverAddr = &quot;localhost&quot;                    ---------------&gt; RNS\n    namespace = &quot;&quot;                              ---------------&gt; RNN\n    cluster = &quot;default&quot;                         ---------------&gt; RNC\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n}\n\n</code></pre>\n<p>1.获取源码scrpit--&gt;<a href=\"http://xn--config-center3nacosnacos-config-4t23cj3al2r845tb25e.py\">config-center下的3个nacos文件nacos-config.py</a>、<a href=\"http://nacos-config.sh\">nacos-config.sh</a>、nacos-config.txt<br>\ntxt为参数明细（包含Server和Client），sh为linux脚本，windows可下载git来操作，py为python脚本。<br>\n2.用命令执行脚本导入seata配置参数至nacos，在nacos控制台查看配置确认是否成功<br>\n3.RT配置为nacos,启动seata-server注册至nacos，查看nacos控制台服务列表确认是否成功</p>\n<pre><code>RNS：nacos注册中心ip\nRNN：nacos命名空间id，&quot;&quot;为nacos保留public空间控件，用户勿配置namespace = &quot;public&quot;\nRNC：seata-server在nacos的集群名\n</code></pre>\n<h4>Client端</h4>\n<pre><code>spring.cloud.alibaba.seata.tx-service-group=my_test_tx_group   ---------------&gt; TG\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                                ---------------&gt; RT2\n  nacos {\n    serverAddr = &quot;localhost&quot;                    ---------------&gt; RNS2\n    namespace = &quot;&quot;                              ---------------&gt; RNN2\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;                                 ---------------&gt; CF\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n}\n</code></pre>\n<p>1.配置CF为nacos，通过NacosConfiguration远程读取seata配置参数<br>\n2.TG为spring配置，springboot可配置在yml、properties中，服务启动时加载配置，对应的值&quot;my_test_tx_group&quot;即为一个事务分组名，若不配置，默认获取属性spring.application.name的值+&quot;-fescar-service-group&quot;<br>\n4.拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroup_mapping.my_test_tx_group&quot;查找TC集群名clusterName为&quot;default&quot;<br>\n5.再根据serverAddr和namespace以及clusterName找到真实TC服务列表<br>\n注：serverAddr和namespace与Server端一致，clusterName与Server端cluster一致</p>\n",
  "link": "/zh-cn/docs/ops/deploy-guide-beginner.html",
  "meta": {}
}