{
  "filename": "test-coverage-guide_dev.md",
  "__html": "<h1>测试覆盖率向导</h1>\n<h2>测试粒度如何划分</h2>\n  <img src=\"https://microservices.io/i/test-pyramid.jpeg\">\n        测试粒度如何划分是个大问题。Chris Richardson 在\" [降低测试金字塔：微服务的有效测试策略](https://microservices.io/microservices/testing/2019/09/20/oracle-code-one-testing.html)\" 一文中将服务测试划分为：单元测试、集成测试、组件测试、端到端的测试。我们可以在设计测试用例的过程中,拿来借鉴。\n<h2>单元测试</h2>\n<h3>1.写单元测试的收益</h3>\n<ul>\n<li>单元测试能帮助每个人深入代码细节，了解代码的功能。</li>\n<li>通过测试用例我们能发现bug，并提交代码的健壮性。</li>\n<li>测试用例同时也是代码的demo用法。</li>\n</ul>\n<h3>2.单元测试用例的一些设计原则</h3>\n<ul>\n<li>应该精心设计好步骤，颗粒度和组合条件。</li>\n<li>注意边界条件。</li>\n<li>单元测试也应该好好设计，不要写无用的代码。</li>\n<li>当你发现一个<code>方法</code>很难写单元测试时，如果可以确认这个<code>方法</code>是<code>臭代码</code>，那么就和开发者一起重构它。</li>\n<li>Seata中用的mock框架是: <a href=\"http://site.mockito.org/\">mockito</a>. 下面是一些开发向导:<a href=\"http://www.baeldung.com/bdd-mockito\">mockito tutorial</a>,<a href=\"https://dzone.com/refcardz/mockito\">mockito refcard</a></li>\n<li>TDD（可选）：当你开始写一个新的功能时，你可以试着先写测试用例。</li>\n</ul>\n<h3>3.测试覆盖率设定值</h3>\n<ul>\n<li>在现阶段，Delta更改代码的测试覆盖设定值为：&gt;＝80%，越高越好。</li>\n<li>我们可以在这个页面中看到测试报告: <a href=\"https://codecov.io/gh/seata/seata\">https://codecov.io/gh/seata/seata</a></li>\n</ul>\n<h3>4.项目约定</h3>\n<ul>\n<li>Seata 项目的单元测试用例分布在项目每个子模块中，测试断言类以Test结尾。</li>\n</ul>\n<h2>集成测试</h2>\n<h3>项目约定</h3>\n<ul>\n<li>集成测试在本项目泛指单元测试以上级别的测试。</li>\n<li>项目使用<a href=\"https://help.github.com/cn/actions/automating-your-workflow-with-github-actions\">github actions</a>、<a href=\"https://github.com/GoogleContainerTools/jib\">jiblib maven 插件</a>、<a href=\"https://github.com/fabric8io/fabric8-maven-plugin\">fabric maven 插件</a>、<a href=\"https://github.com/testcontainers/testcontainers-java\">testContainers</a>等用来构建<a href=\"https://www.docker.com/\">Docker</a>镜像，搭建集成测试环境</li>\n<li>区别于单元测试，某个测试用例，需要依赖第三方中间件的，可以不用Mock, 使用上面介绍的工具搭建docker环境,进行测试。但是也要注意搭建组件的粒度。过于复杂的环境，可以：核心测试依赖的中间件可以docker搭建，非强依赖的可以Mock</li>\n<li>Seata 项目的集成测试用例分布统一放在integration-test子模块中，测试断言类以IT结尾。</li>\n<li>这里还用 <a href=\"https://junit.org/junit5/\">Junit5</a></li>\n<li>测试用例并行跑的过程中，注意公共中间件的隔离状态，规划好所造数据，防止冲突。</li>\n</ul>\n",
  "link": "/zh-cn/docs/developers/contributor-guide/test-coverage-guide_dev.html",
  "meta": {
    "title": "测试覆盖率向导",
    "keywords": "Seata",
    "description": "测试覆盖率向导。"
  }
}