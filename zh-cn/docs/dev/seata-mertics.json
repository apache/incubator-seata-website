{
  "filename": "seata-mertics.md",
  "__html": "<h3>Metrics</h3>\n<h4>设计思路</h4>\n<ol>\n<li>Seata作为一个被集成的数据一致性框架，Metrics模块将尽可能少的使用第三方依赖以降低发生冲突的风险；</li>\n<li>Metrics模块将竭力争取更高的度量性能和更低的资源开销，尽可能降低开启后带来的副作用；</li>\n<li>插件式——Metrics是否激活、数据如何发布，去取决于是否引入了对应的依赖，例如在TC Server中引入<code>seata-metrics-prometheus</code>，则自动启用并将度量数据发布到<a href=\"https://github.com/prometheus\">Prometheus</a>；</li>\n<li>不使用Spring，使用SPI(Service Provider Interface)加载扩展；</li>\n<li>初始仅发布核心Transaction相关指标，之后结合社区的需求，逐步完善运维方面的所有其他指标。</li>\n</ol>\n<h4>模块说明</h4>\n<p>由1个核心API模块<code>seata-metrics-api</code>和N个对接实现模块如<code>seata-metrics-prometheus</code>构成：</p>\n<ul>\n<li>seata-metrics-api模块</li>\n</ul>\n<p>此模块是Metrics的核心，将作为Seata基础架构的一部分被TC、TM和RM引用，它内部<strong>没有任何具体实现代码</strong>，仅包含接口定义，定义的内容包括：</p>\n<ol>\n<li>Meter类接口：<code>Gauge</code>、<code>Counter</code>、<code>Timer</code>...</li>\n<li>注册容器接口<code>Registry</code></li>\n<li>Measurement发布接口<code>Publisher</code></li>\n</ol>\n<blockquote>\n<p>提示：Metrics本身在开源领域也已有很多实现，例如</p>\n<ol>\n<li><a href=\"https://github.com/Netflix/spectator\">Netflix-Spectator</a></li>\n<li><a href=\"https://github.com/dropwizard/metrics\">Dropwizard-Metrics</a></li>\n<li><a href=\"https://github.com/dubbo/dubbo-metrics\">Dubbo-Metrics</a></li>\n</ol>\n</blockquote>\n<blockquote>\n<p>它们有的轻而敏捷，有的重而强大，由于也是“实现”，因此不会纳入<code>seata-metrics-api</code>中，避免实现绑定。</p>\n</blockquote>\n<ul>\n<li>seata-metrics-prometheus模块</li>\n</ul>\n<p>这是我们默认提供的Metrics实现，不使用其它Metrics开源实现，并轻量级的实现了以下三个Meter：</p>\n<table>\n<thead>\n<tr>\n<th>Meter类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gauge</td>\n<td>单一最新值度量器</td>\n</tr>\n<tr>\n<td>Counter</td>\n<td>单一累加度量器，可增可减</td>\n</tr>\n<tr>\n<td>Summary</td>\n<td>多Measurement输出计数器，将输出<code>total</code>(合计)、<code>count</code>(计数)、<code>max</code>(最大)、<code>average</code>(合计/计数)和<code>tps</code>(合计/时间间隔)，无单位</td>\n</tr>\n<tr>\n<td>Timer</td>\n<td>多Measurement输出计时器，将输出<code>total</code>(合计)、<code>count</code>(计数)、<code>max</code>(最大)和<code>average</code>(合计/计数)，支持微秒为单位累计</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>说明：</p>\n<ol>\n<li>未来可能增加更丰富复杂的度量器例如Histogram，这是一种可以本地统计聚合75th, 90th, 95th, 98th, 99th,99.9th...的度量器，适合某些场合，但需要更多内存。</li>\n<li>所有的计量器都将继承自Meter，所有的计量器执行measure()方法后，都将归一化的生成1或N个Measurement结果。</li>\n</ol>\n</blockquote>\n<p>它也会实现一个内存的Registry和PrometheusExporter，将度量数据同步给Prometheus。</p>\n<blockquote>\n<p>说明：不同的监控系统，采集度量数据的方式不尽相同，例如Zabbix支持用zabbix-agent推送，Prometheus则推荐使用prometheus-server<a href=\"https://prometheus.io/docs/practices/pushing/\">拉取</a>的方式；同样数据交换协议也不同，因此往往需要逐一适配。</p>\n</blockquote>\n<h4>如何使用</h4>\n<h5>引入依赖</h5>\n<p>如果需要开启TC的Metrics，只需要在<code>seata-server</code>的pom中增加：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>seata-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!--导入依赖，启用Metrics--&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>${project.groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>seata-metrics-prometheus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>commons-lang<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-lang<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.testng<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>testng<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<p>之后启动TC，即可在<code>http://tc-server-ip:9898/metrics</code>上获取到Metrics的文本格式数据。</p>\n<blockquote>\n<p>提示：默认使用<code>9898</code>端口，Prometheus已登记的端口列表<a href=\"https://github.com/prometheus/prometheus/wiki/Default-port-allocations\">在此</a>，如果想更换端口，可通过<code>metrics.exporter.prometheus.port</code>配置修改。</p>\n</blockquote>\n<h5>下载并启动Prometheus</h5>\n<p>下载完毕后，修改Prometheus的配置文件<code>prometheus.yml</code>，在<code>scrape_configs</code>中增加一项抓取Seata的度量数据：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">scrape_configs:</span>\n  <span class=\"hljs-comment\"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>\n<span class=\"hljs-attr\">  - job_name:</span> <span class=\"hljs-string\">'prometheus'</span>\n\n    <span class=\"hljs-comment\"># metrics_path defaults to '/metrics'</span>\n    <span class=\"hljs-comment\"># scheme defaults to 'http'.</span>\n\n<span class=\"hljs-attr\">    static_configs:</span>\n<span class=\"hljs-attr\">    - targets:</span> <span class=\"hljs-string\">['localhost:9090']</span>\n\n<span class=\"hljs-attr\">  - job_name:</span> <span class=\"hljs-string\">'seata'</span>\n\n    <span class=\"hljs-comment\"># metrics_path defaults to '/metrics'</span>\n    <span class=\"hljs-comment\"># scheme defaults to 'http'.</span>\n\n<span class=\"hljs-attr\">    static_configs:</span>\n<span class=\"hljs-attr\">    - targets:</span> <span class=\"hljs-string\">['tc-server-ip:9898']</span>\n</code></pre>\n<h5>查看数据输出</h5>\n<p>推荐结合配置<a href=\"https://prometheus.io/docs/visualization/grafana/\">Grafana</a>获得更好的查询效果，初期Seata导出的Metrics包括：</p>\n<ul>\n<li>TC :</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Metrics</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>seata.transaction(role=tc,meter=counter,status=active/committed/rollback)</td>\n<td>当前活动中/已提交/已回滚的事务总数</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=summary,statistic=count,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务数</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=summary,statistic=tps,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务TPS(transaction per second)</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=timer,statistic=total,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务耗时总和</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=timer,statistic=count,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务数</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=timer,statistic=average,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务平均耗时</td>\n</tr>\n<tr>\n<td>seata.transaction(role=tc,meter=timer,statistic=max,status=committed/rollback)</td>\n<td>当前周期内提交/回滚的事务最大耗时</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：seata.transaction(role=tc,meter=summary,statistic=count,status=committed/rollback)和seata.transaction(role=tc,meter=timer,statistic=count,status=committed/rollback)的值可能相同，但它们来源于两个不同的度量器。</p>\n</blockquote>\n<ul>\n<li>TM：</li>\n</ul>\n<p>稍后实现，包括诸如：\nseata.transaction(role=tm,name={GlobalTransactionalName},meter=counter,status=active/committed/rollback) : 以GlobalTransactionalName为维度区分不同Transactional的状态。</p>\n<ul>\n<li>RM：</li>\n</ul>\n<p>稍后实现，包括诸如：\nseata.transaction(role=rm,name={BranchTransactionalName},mode=at/mt,meter=counter,status=active/committed/rollback)：以BranchTransactionalName为维度以及AT/MT维度区分不同分支Transactional的状态。</p>\n<h4>如何扩展</h4>\n<p>如果有下面几种情况：</p>\n<ol>\n<li>您不是使用Prometheus作为运维监控系统，但希望能够将Seata的Metrics数据集成进Dashboard中；</li>\n<li>您需要更复杂强大的度量器类型，这些度量器在其他Metrics实现库中已有，希望集成这些第三方依赖直接使用；</li>\n<li>您需要改变默认Metric的Measurement输出，例如在Timer中增加一个<code>min</code>或<code>sd</code>(方差)；</li>\n<li>...</li>\n</ol>\n<p>那么需要自行扩展Metrics的实现，请创建新的模块项目例如<code>seata-metrics-xxxx</code>，之后：</p>\n<ul>\n<li>针对1：您需要实现新的Exporter；</li>\n<li>针对2：您可以改变默认Registry的实现，返回第三方的Meter计量器实现；</li>\n<li>针对3：您可以修改对应Meter的实现，包括<code>measure()</code>方法返回的Measurement列表。</li>\n</ul>\n",
  "link": "/zh-cn/docs/dev/seata-mertics.html",
  "meta": {
    "title": "Metrics",
    "keywords": "Seata",
    "description": "Metrics。"
  }
}