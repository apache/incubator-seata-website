{
  "filename": "transaction-group-and-ha.md",
  "__html": "<h1>事务分组与高可用</h1>\n<h2>最佳实践1：TC的异地多机房容灾</h2>\n<ul>\n<li>假定TC集群部署在两个机房：guangzhou机房（主）和shanghai机房（备）各两个实例</li>\n<li>一整套微服务架构项目：projectA</li>\n<li>projectA内有微服务：serviceA、serviceB、serviceC 和 serviceD</li>\n</ul>\n<p>其中，projectA所有微服务的事务分组tx-transaction-group设置为：projectA，projectA正常情况下使用guangzhou的TC集群（主）</p>\n<p>那么正常情况下，client端的配置如下所示：</p>\n<pre><code>seata.tx-service-group=projectA\nseata.service.vgroup-mapping.projectA=Guangzhou\n</code></pre>\n<p><img src=\"https://gitee.com/tanzjz/pic/raw/master/txgroup-normal.png\" alt=\"\"></p>\n<p>假如此时guangzhou集群分组整个down掉，或者因为网络原因projectA暂时无法与Guangzhou机房通讯，那么我们将配置中心中的Guangzhou集群分组改为Shanghai，如下：</p>\n<pre><code>seata.service.vgroup-mapping.projectA=Shanghai\n</code></pre>\n<p>并推送到各个微服务，便完成了对整个projectA项目的TC集群动态切换。</p>\n<p><img src=\"https://gitee.com/tanzjz/pic/raw/master/txgroup-switch-to-sh.png\" alt=\"异地多机房容灾备用集群\"></p>\n<h2>最佳实践2：单一环境多应用接入</h2>\n<ul>\n<li>假设现在开发环境（或预发/生产）中存在一整套seata集群</li>\n<li>seata集群要服务于不同的微服务架构项目projectA、projectB、projectC</li>\n<li>projectA、projectB、projectC之间相对独立</li>\n</ul>\n<p>我们将seata集群中的六个实例两两分组，使其分别服务于projectA、projectB与projectC，那么此时seata-server端的配置如下（以nacos注册中心为例）：</p>\n<pre><code>registry {\n  type = &quot;nacos&quot;\n  loadBalance = &quot;RandomLoadBalance&quot;\n  loadBalanceVirtualNodes = 10\n\n  nacos {\n    application = &quot;seata-server&quot;\n    serverAddr = &quot;127.0.0.1:8848&quot;\n    group = &quot;DEFAULT_GROUP&quot;\n    namespace = &quot;8f11aeb1-5042-461b-b88b-d47a7f7e01c0&quot;\n    #同理在其他几个分组seata-server实例配置 project-b-group / project-c-group\n    cluster = &quot;project-a-group&quot;\n    username = &quot;username&quot;\n    password = &quot;password&quot;\n  }\n}\n</code></pre>\n<p>client端的配置如下：</p>\n<pre><code>seata.tx-service-group=projectA\n#同理，projectB与projectC配置 project-b-group / project-c-group\nseata.service.vgroup-mapping.projectA=project-a-group\n</code></pre>\n<p>完成配置启动后，对应事务分组的TC单独为其应用服务，整体部署图如下：</p>\n<p><img src=\"https://gitee.com/tanzjz/pic/raw/master/txgroup-multipart-application.png\" alt=\"单环境多应用接入\"></p>\n<h2>最佳实践3：client的精细化控制</h2>\n<ul>\n<li>假定现在存在seata集群，Guangzhou机房实例运行在性能较高的机器上，Shanghai集群运行在性能较差的机器上</li>\n<li>现存微服务架构项目projectA、projectA中有微服务ServiceA、ServiceB、ServiceC与ServiceD</li>\n<li>其中ServiceD的流量较小，其余微服务流量较大</li>\n</ul>\n<p>那么此时，我们可以将ServiceD微服务引流到Shanghai集群中去，将高性能的服务器让给其余流量较大的微服务（反之亦然，若存在某一个微服务流量特别大，我们也可以单独为此微服务开辟一个更高性能的集群，并将该client的virtual group指向该集群，其最终目的都是保证在流量洪峰时服务的可用）</p>\n<p><img src=\"https://gitee.com/tanzjz/pic/raw/master/txgroup-client-controll.png\" alt=\"client精细化控制\"></p>\n<h2>最佳实践4：Seata的预发与生产隔离</h2>\n<ul>\n<li>大多数情况下，预发环境与生产环境会使用同一套数据库。基于这个条件，预发TC集群与生产TC集群必须使用同一个数据库保证全局事务的生效（即生产TC集群与预发TC集群使用同一个lock表，并使用不同的branch_table与global_table的情况）</li>\n<li>我们记生产使用的branch表与global表分别为：global_table与branch_table；预发为global_table_pre，branch_table_pre</li>\n<li>预发与生产共用lock_table</li>\n</ul>\n<p>此时，seata-server的 file.conf 配置如下</p>\n<pre><code>store {\n  mode = &quot;db&quot;\n\n  db {\n    datasource = &quot;druid&quot;\n    dbType = &quot;mysql&quot;\n    driverClassName = &quot;com.mysql.jdbc.Driver&quot;\n    url = &quot;jdbc:mysql://127.0.0.1:3306/seata&quot;\n    user = &quot;username&quot;\n    password = &quot;password&quot;\n    minConn = 5\n    maxConn = 100\n    globalTable = &quot;global_table&quot;  ----&gt; 预发为 &quot;global_table_pre&quot;\n    branchTable = &quot;branch_table&quot;  ----&gt; 预发为 &quot;branch_table_pre&quot;\n    lockTable = &quot;lock_table&quot;\n    queryLimit = 100\n    maxWait = 5000\n  }\n}\n</code></pre>\n<p>seata-server的 regiistry.conf 配置如下（以nacos为例）</p>\n<pre><code>registry {\n  type = &quot;nacos&quot;\n  loadBalance = &quot;RandomLoadBalance&quot;\n  loadBalanceVirtualNodes = 10\n\n  nacos {\n    application = &quot;seata-server&quot;\n    serverAddr = &quot;127.0.0.1:8848&quot;\n    group = &quot;DEFAULT_GROUP&quot;\n    namespace = &quot;8f11aeb1-5042-461b-b88b-d47a7f7e01c0&quot;\n    cluster = &quot;pre-product&quot;  --&gt;同理生产为 &quot;product&quot;\n    username = &quot;username&quot;\n    password = &quot;password&quot;\n  }\n}\n</code></pre>\n<p>其部署图如下所示：</p>\n<p><img src=\"https://gitee.com/tanzjz/pic/raw/master/txgroup-segregation-of-pre-and-product.png\" alt=\"预发生产隔离\"></p>\n<p>不仅如此，你还可以将以上四个最佳实践依据你的实际生产情况组合搭配使用。</p>\n",
  "link": "/zh-cn/docs/user/txgroup/transaction-group-and-ha.html",
  "meta": {
    "title": "事务分组与高可用",
    "keywords": "Seata 事务分组",
    "description": "Seata 事务分组与高可用的最佳实践"
  }
}