{
  "filename": "configurations090.md",
  "__html": "<h1>seata参数配置 0.9.0版本</h1>\n<h3>公共部分</h3>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>desc</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>transport.serialization</td>\n<td>client和server通信编解码方式</td>\n<td>seata、protobuf</td>\n</tr>\n<tr>\n<td>transport.heartbeat</td>\n<td>client和server通信心跳检测开关</td>\n<td>默认true开启</td>\n</tr>\n</tbody>\n</table>\n<h3>server端</h3>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>desc</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>transaction.undo.log.save.days</td>\n<td>undo保留天数</td>\n<td>默认7天,log_status=1（附录3）和未正常清理的undo</td>\n</tr>\n<tr>\n<td>transaction.undo.log.delete.period</td>\n<td>undo清理线程间隔时间</td>\n<td>默认86400000，单位毫秒</td>\n</tr>\n<tr>\n<td>service.max.commit.retry.timeout</td>\n<td>二阶段提交重试超时时长</td>\n<td>单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试。公式: timeout&gt;=now-globalTransactionBeginTime,true表示超时则不再重试</td>\n</tr>\n<tr>\n<td>service.max.rollback.retry.timeout</td>\n<td>二阶段回滚重试超时时长</td>\n<td>同commit</td>\n</tr>\n<tr>\n<td>recovery.committing-retry-period</td>\n<td>二阶段提交未完成状态全局事务重试提交线程间隔时间</td>\n<td>默认1000，单位毫秒</td>\n</tr>\n<tr>\n<td>recovery.asyn-committing-retry-period</td>\n<td>二阶段异步提交状态重试提交线程间隔时间</td>\n<td>默认1000，单位毫秒</td>\n</tr>\n<tr>\n<td>recovery.rollbacking-retry-period</td>\n<td>二阶段回滚状态重试回滚线程间隔时间</td>\n<td>默认1000，单位毫秒</td>\n</tr>\n<tr>\n<td>recovery.timeout-retry-period</td>\n<td>超时状态检测重试线程间隔时间</td>\n<td>默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器</td>\n</tr>\n<tr>\n<td>store.mode</td>\n<td>事务会话信息存储方式</td>\n<td>file本地文件(不支持HA)，db数据库(支持HA)</td>\n</tr>\n<tr>\n<td>store.file.dir</td>\n<td>file模式文件存储文件夹名</td>\n<td>默认sessionStore</td>\n</tr>\n<tr>\n<td>store.db.datasource</td>\n<td>db模式数据源类型</td>\n<td>默认dbcp</td>\n</tr>\n<tr>\n<td>store.db.db-type</td>\n<td>db模式数据库类型</td>\n<td>默认mysql</td>\n</tr>\n<tr>\n<td>store.db.driver-class-name</td>\n<td>db模式数据库驱动</td>\n<td>默认com.mysql.jdbc.Driver</td>\n</tr>\n<tr>\n<td>store.db.url</td>\n<td>db模式数据源库url</td>\n<td>默认jdbc:mysql://127.0.0.1:3306/seata</td>\n</tr>\n<tr>\n<td>store.db.user</td>\n<td>db模式数据库账户</td>\n<td>默认mysql</td>\n</tr>\n<tr>\n<td>store.db.min-conn</td>\n<td>db模式数据库初始连接数</td>\n<td>默认1</td>\n</tr>\n<tr>\n<td>store.db.max-conn</td>\n<td>db模式数据库最大连接数</td>\n<td>默认3</td>\n</tr>\n<tr>\n<td>store.db.global.table</td>\n<td>db模式全局事务表名</td>\n<td>默认global_table</td>\n</tr>\n<tr>\n<td>store.db.branch.table</td>\n<td>db模式分支事务表名</td>\n<td>默认branch_table</td>\n</tr>\n<tr>\n<td>store.db.lock-table</td>\n<td>db模式全局锁表名</td>\n<td>默认lock_table</td>\n</tr>\n<tr>\n<td>store.db.query-limit</td>\n<td>db模式查询全局事务一次的最大条数</td>\n<td>默认1000</td>\n</tr>\n<tr>\n<td>metrics.enabled</td>\n<td>是否启用Metrics</td>\n<td>默认false关闭，在False状态下，所有与Metrics相关的组件将不会被初始化，使得性能损耗最低</td>\n</tr>\n<tr>\n<td>metrics.registry-type</td>\n<td>指标注册器类型</td>\n<td>Metrics使用的指标注册器类型，默认为内置的compact（简易）实现，这个实现中的Meter仅使用有限内存计数，性能高足够满足大多数场景；目前只能设置一个指标注册器实现</td>\n</tr>\n<tr>\n<td>metrics.exporter-list</td>\n<td>指标结果Measurement数据输出器列表</td>\n<td>默认prometheus，多个输出器使用英文逗号分割，例如&quot;prometheus,jmx&quot;，目前仅实现了对接prometheus的输出器</td>\n</tr>\n<tr>\n<td>metrics.exporter-prometheus-port</td>\n<td>prometheus输出器Client端口号</td>\n<td>默认9898</td>\n</tr>\n</tbody>\n</table>\n<h3>client端</h3>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>role</th>\n<th>desc</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>service.vgroup_mapping.my_test_tx_group</td>\n<td>TM,RM</td>\n<td>事务群组（附录1）</td>\n<td>my_test_tx_group为分组，配置项值为TC集群名</td>\n</tr>\n<tr>\n<td>service.default.grouplist</td>\n<td>TM,RM</td>\n<td>TC服务列表（附录2）</td>\n<td>仅注册中心为file时使用</td>\n</tr>\n<tr>\n<td>service.disableGlobalTransaction</td>\n<td>TM,RM</td>\n<td>全局事务开关</td>\n<td>默认false。false为开启，true为关闭</td>\n</tr>\n<tr>\n<td>service.enableDegrade</td>\n<td>TM</td>\n<td>降级开关（待实现）</td>\n<td>默认false。业务侧根据连续错误数自动降级不走seata事务</td>\n</tr>\n<tr>\n<td>client.async.commit.buffer.limit</td>\n<td>RM</td>\n<td>异步提交缓存队列长度</td>\n<td>默认10000。 二阶段提交成功，RM异步清理undo队列</td>\n</tr>\n<tr>\n<td>client.lock.retry.internal</td>\n<td>RM</td>\n<td>校验或占用全局锁重试间隔</td>\n<td>默认10，单位毫秒</td>\n</tr>\n<tr>\n<td>client.lock.retry.times</td>\n<td>RM</td>\n<td>校验或占用全局锁重试次数</td>\n<td>默认30</td>\n</tr>\n<tr>\n<td>client.lock.retry.policy.branch-rollback-on-conflict</td>\n<td>RM</td>\n<td>分支事务与其它全局回滚事务冲突时锁策略</td>\n<td>默认true，优先释放本地锁让回滚成功</td>\n</tr>\n<tr>\n<td>client.report.retry.count</td>\n<td>TM,RM</td>\n<td>一阶段结果上报TC重试次数</td>\n<td>默认5次</td>\n</tr>\n<tr>\n<td>client.tm.commit.retry.count</td>\n<td>TM</td>\n<td>一阶段全局提交结果上报TC重试次数</td>\n<td>默认1次，建议大于1</td>\n</tr>\n<tr>\n<td>client.tm.rollback.retry.count</td>\n<td>TM</td>\n<td>一阶段全局回滚结果上报TC重试次数</td>\n<td>默认1次，建议大于1</td>\n</tr>\n<tr>\n<td>client.table.meta.check.enable</td>\n<td>RM</td>\n<td>自动刷新缓存中的表结构</td>\n<td>默认true</td>\n</tr>\n<tr>\n<td>transaction.undo.data.validation</td>\n<td>RM</td>\n<td>二阶段回滚镜像校验</td>\n<td>默认true开启，false关闭</td>\n</tr>\n<tr>\n<td>transaction.undo.log.serialization</td>\n<td>RM</td>\n<td>undo序列化方式</td>\n<td>默认jackson</td>\n</tr>\n<tr>\n<td>transaction.undo.log.table</td>\n<td>RM</td>\n<td>自定义undo表名</td>\n<td>默认undo_log</td>\n</tr>\n<tr>\n<td>support.spring.datasource.autoproxy</td>\n<td>RM</td>\n<td>数据源自动代理开关</td>\n<td>默认false关闭</td>\n</tr>\n</tbody>\n</table>\n<h3>未使用</h3>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>desc</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lock.mode</td>\n<td>锁存储方式</td>\n<td>local、remote</td>\n</tr>\n<tr>\n<td>lock.local</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>lock.remote</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>附录1：</h3>\n<pre><code>事务分组说明。\n1.事务分组是什么？\n事务分组是seata的资源逻辑，类似于服务实例。在file.conf中的my_test_tx_group就是一个事务分组。\n2.通过事务分组如何找到后端集群？\n首先程序中配置了事务分组（GlobalTransactionScanner 构造方法的txServiceGroup参数），程序会通过用户配置的配置中心去寻找service.vgroup_mapping.事务分组配置项，取得配置项的值就是TC集群的名称。拿到集群名称程序通过一定的前后缀+集群名称去构造服务名，各配置中心的服务名实现不同。拿到服务名去相应的注册中心去拉取相应服务名的服务列表，获得后端真实的TC服务列表。\n3.为什么这么设计，不直接取服务名？\n这里多了一层获取事务分组到映射集群的配置。这样设计后，事务分组可以作为资源的逻辑隔离单位，当发生故障时可以快速failover。\n</code></pre>\n<h3>附录2：</h3>\n<pre><code>关于grouplist问题说明下。\n1. 什么时候会用到file.conf中的default.grouplist？\n当registry.type=file时会用到，其他时候不读。\n2. default.grouplist的值列表是否可以配置多个？\n可以配置多个，配置多个意味着集群，但当store.mode=file时，会报错。原因是在file存储模式下未提供本地文件的同步，所以需要使用store.mode=db，通过db来共享TC集群间数据\n3. 是否推荐使用default.grouplist？\n不推荐，如问题1，当registry.type=file时会用到，也就是说这里用的不是真正的注册中心，不具体服务的健康检查机制当tc不可用时无法自动剔除列表，推荐使用nacos 、eureka、redis、zk、consul、etcd3、sofa。registry.type=file或config.type=file 设计的初衷是让用户再不依赖第三方注册中心或配置中心的前提下，通过直连的方式，快速验证seata服务。    \n</code></pre>\n<h3>附录3：</h3>\n<pre><code>log_status=1的是防御性的，是收到全局回滚请求，但是不确定某个事务分支的本地事务是否已经执行完成了，这时事先插入一条branchid相同的数据，插入的假数据成功了，本地事务继续执行就会报主键冲突自动回滚。\n假如插入不成功说明表里有数据这个本地事务已经执行完成了，那么取出这条undolog数据做反向回滚操作。</code></pre>\n",
  "link": "/zh-cn/docs/user/configurations090.html",
  "meta": {
    "title": "Seata 参数配置 0.9.0版本",
    "keywords": "Seata",
    "description": "Seata 参数配置 0.9.0版本。"
  }
}