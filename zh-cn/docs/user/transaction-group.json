{
  "filename": "transaction-group.md",
  "__html": "<h1>事务分组专题</h1>\n<h3>事务分组是什么？</h3>\n<p>事务分组是seata的资源逻辑，类似于服务实例。在file.conf中的my_test_tx_group就是一个事务分组。</p>\n<h3>通过事务分组如何找到后端集群？</h3>\n<p>首先程序中配置了事务分组（GlobalTransactionScanner 构造方法的txServiceGroup参数），程序会通过用户配置的配置中心去寻找service.vgroup_mapping.事务分组配置项，取得配置项的值就是TC集群的名称。拿到集群名称程序通过一定的前后缀+集群名称去构造服务名，各配置中心的服务名实现不同。拿到服务名去相应的注册中心去拉取相应服务名的服务列表，获得后端真实的TC服务列表。</p>\n<h3>为什么这么设计，不直接取服务名？</h3>\n<p>这里多了一层获取事务分组到映射集群的配置。这样设计后，事务分组可以作为资源的逻辑隔离单位，出现某集群故障时可以快速failover，只切换对应分组，可以把故障缩减到服务级别，但前提也是你有足够server集群。</p>\n<h2>事务分组使用案例</h2>\n<p>seata注册、配置中心分为两类，内置file、第三方注册（配置）中心如nacos等等，注册中心和配置中心之间没有约束，可各自使用不同类型。</p>\n<h3>file注册中心和配置中心</h3>\n<h4>Server端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                ---------------&gt; 使用file作为注册中心\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;                ---------------&gt; 使用file作为配置中心\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n</code></pre>\n<ul>\n<li>file、db模式启动server，见文章上方节点：启动Server</li>\n</ul>\n<h4>Client端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                ---------------&gt; 使用file作为注册中心\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;                ---------------&gt; 使用file作为配置中心\n  file {\n    name = &quot;file.conf&quot;         ---------------&gt; 配置参数存储文件\n  }\n}\nspring.cloud.alibaba.seata.tx-service-group=my_test_tx_group ---------------&gt; 事务分组配置\nfile.conf: \n    service {\n      vgroup_mapping.my_test_tx_group = &quot;default&quot;\n      default.grouplist = &quot;127.0.0.1:8091&quot;\n    }\n</code></pre>\n<ul>\n<li>读取配置</li>\n</ul>\n<blockquote>\n<p>通过FileConfiguration本地加载file.conf的配置参数</p>\n</blockquote>\n<ul>\n<li>获取事务分组</li>\n</ul>\n<blockquote>\n<p>spring配置，springboot可配置在yml、properties中，服务启动时加载配置，对应的值&quot;my_test_tx_group&quot;即为一个事务分组名，若不配置，默认获取属性spring.application.name的值+&quot;-fescar-service-group&quot;</p>\n</blockquote>\n<ul>\n<li>查找TC集群名</li>\n</ul>\n<blockquote>\n<p>拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroup_mapping.my_test_tx_group&quot;查找TC集群名clusterName为&quot;default&quot;</p>\n</blockquote>\n<ul>\n<li>查询TC服务</li>\n</ul>\n<blockquote>\n<p>拼接&quot;service.&quot;+clusterName+&quot;.grouplist&quot;找到真实TC服务地址127.0.0.1:8091</p>\n</blockquote>\n<h3>nacos注册中心和配置中心</h3>\n<h4>Server端</h4>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                ---------------&gt; 使用nacos作为注册中心\n  nacos {\n    serverAddr = &quot;localhost&quot;    ---------------&gt; nacos注册中心所在ip\n    namespace = &quot;&quot;              ---------------&gt; nacos命名空间id，&quot;&quot;为nacos保留public空间控件，用户勿配置namespace = &quot;public&quot;\n    cluster = &quot;default&quot;         ---------------&gt; seata-server在nacos的集群名\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;                ---------------&gt; 使用nacos作为配置中心\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n    cluster = &quot;default&quot;\n  }\n}\n\n</code></pre>\n<ul>\n<li>脚本</li>\n</ul>\n<blockquote>\n<p>script--&gt;<a href=\"http://xn--config-center3nacos-config-9s15b3yaj3py01r5bse.py\">config-center下的3个文件nacos-config.py</a>、<a href=\"http://nacos-config.sh\">nacos-config.sh</a>、config.txt<br>\ntxt为参数明细（包含Server和Client），sh为linux脚本，windows可下载git来操作，py为python脚本。</p>\n</blockquote>\n<ul>\n<li>导入配置</li>\n</ul>\n<blockquote>\n<p>用命令执行脚本导入seata配置参数至nacos，在nacos控制台查看配置确认是否成功</p>\n</blockquote>\n<ul>\n<li>注册TC</li>\n</ul>\n<blockquote>\n<p>启动seata-server注册至nacos，查看nacos控制台服务列表确认是否成功</p>\n</blockquote>\n<h4>Client端</h4>\n<pre><code>spring.cloud.alibaba.seata.tx-service-group=my_test_tx_group ---------------&gt; 事务分组配置\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                ---------------&gt; 从nacos获取TC服务\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;                ---------------&gt; 使用nacos作为配置中心\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n}\n</code></pre>\n<ul>\n<li>读取配置</li>\n</ul>\n<blockquote>\n<p>通过NacosConfiguration远程读取seata配置参数</p>\n</blockquote>\n<ul>\n<li>获取事务分组</li>\n</ul>\n<blockquote>\n<p>springboot可配置在yml、properties中，服务启动时加载配置，对应的值&quot;my_test_tx_group&quot;即为一个事务分组名，若不配置，默认获取属性spring.application.name的值+&quot;-fescar-service-group&quot;</p>\n</blockquote>\n<ul>\n<li>查找TC集群名</li>\n</ul>\n<blockquote>\n<p>拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroup_mapping.my_test_tx_group&quot;从配置中心查找到TC集群名clusterName为&quot;default&quot;</p>\n</blockquote>\n<ul>\n<li>查找TC服务</li>\n</ul>\n<blockquote>\n<p>根据serverAddr和namespace以及clusterName在注册中心找到真实TC服务列表</p>\n</blockquote>\n<p>注：serverAddr和namespace与Server端一致，clusterName与Server端cluster一致</p>\n",
  "link": "/zh-cn/docs/user/transaction-group.html",
  "meta": {
    "title": "Seata 事务分组",
    "keywords": "Seata",
    "description": "Seata 事务分组。"
  }
}